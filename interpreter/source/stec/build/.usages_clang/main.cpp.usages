22 serialization::archive 17 0 0 0 0 36 /home/leopoldkucinski/Dokumenty/stec 42 /home/leopoldkucinski/Dokumenty/stec/build 0 0 4737 0 0 0 1 # 1 1 1 2 18446744073709551615 7 include 1 2 1 9 18446744073709551615 1 < 1 10 1 11 18446744073709551615 7 cstring 1 11 1 18 18446744073709551615 1 > 1 18 1 19 18446744073709551615 1 # 2 1 2 2 18446744073709551615 7 include 2 2 2 9 18446744073709551615 1 < 2 10 2 11 18446744073709551615 7 fstream 2 11 2 18 18446744073709551615 1 > 2 18 2 19 18446744073709551615 1 # 3 1 3 2 18446744073709551615 7 include 3 2 3 9 18446744073709551615 1 < 3 10 3 11 18446744073709551615 8 iostream 3 11 3 19 18446744073709551615 1 > 3 19 3 20 18446744073709551615 1 # 4 1 4 2 18446744073709551615 7 include 4 2 4 9 18446744073709551615 1 < 4 10 4 11 18446744073709551615 6 stdlib 4 11 4 17 18446744073709551615 1 . 4 17 4 18 18446744073709551615 1 h 4 18 4 19 18446744073709551615 1 > 4 19 4 20 18446744073709551615 1 # 5 1 5 2 18446744073709551615 7 include 5 2 5 9 18446744073709551615 1 < 5 10 5 11 18446744073709551615 6 string 5 11 5 17 18446744073709551615 1 > 5 17 5 18 18446744073709551615 1 # 6 1 6 2 18446744073709551615 7 include 6 2 6 9 18446744073709551615 1 < 6 10 6 11 18446744073709551615 4 time 6 11 6 15 18446744073709551615 1 . 6 15 6 16 18446744073709551615 1 h 6 16 6 17 18446744073709551615 1 > 6 17 6 18 18446744073709551615 1 # 7 1 7 2 18446744073709551615 7 include 7 2 7 9 18446744073709551615 1 < 7 10 7 11 18446744073709551615 6 vector 7 11 7 17 18446744073709551615 1 > 7 17 7 18 18446744073709551615 5 using 8 1 8 6 18446744073709551615 9 namespace 8 7 8 16 18446744073709551615 3 std 8 17 8 20 0 1 ; 8 20 8 21 18446744073709551615 3 int 9 1 9 4 18446744073709551615 16 InterpretCommand 9 5 9 21 1 1 ( 9 21 9 22 1 4 char 9 22 9 26 18446744073709551615 3 com 9 27 9 30 2 1 ) 9 30 9 31 1 1 ; 9 31 9 32 18446744073709551615 4 enum 10 1 10 5 18446744073709551615 4 type 10 6 10 10 3 1 { 10 11 10 12 18446744073709551615 6 number 11 3 11 9 4 1 , 11 9 11 10 18446744073709551615 11 char_string 12 3 12 14 5 1 } 13 1 13 2 18446744073709551615 1 ; 13 2 13 3 18446744073709551615 6 struct 14 1 14 7 18446744073709551615 13 StackVariable 14 8 14 21 6 1 { 14 22 14 23 18446744073709551615 4 type 15 3 15 7 3 4 Type 15 8 15 12 7 1 ; 15 12 15 13 18446744073709551615 3 int 16 3 16 6 18446744073709551615 6 number 16 7 16 13 8 1 = 16 14 16 15 18446744073709551615 1 0 16 16 16 17 18446744073709551615 1 ; 16 17 16 18 18446744073709551615 6 string 17 3 17 9 9 11 char_string 17 10 17 21 10 1 = 17 22 17 23 18446744073709551615 2 "" 17 24 17 26 18446744073709551615 1 ; 17 26 17 27 18446744073709551615 1 } 18 1 18 2 18446744073709551615 1 ; 18 2 18 3 18446744073709551615 97 //this will prevent is_in_code_block from allowing to run if statements in disabled if statements 19 1 19 98 18446744073709551615 3 int 20 1 20 4 18446744073709551615 18 code_block_counter 20 5 20 23 11 1 = 20 24 20 25 18446744073709551615 1 0 20 26 20 27 18446744073709551615 1 ; 20 27 20 28 18446744073709551615 16 //for loop stack 21 1 21 17 18446744073709551615 6 vector 22 1 22 7 12 1 < 22 7 22 8 18446744073709551615 6 string 22 8 22 14 9 1 > 22 14 22 15 18446744073709551615 8 ForStack 22 16 22 24 13 1 ; 22 24 22 25 18446744073709551615 28 //counts for loop iterations 23 1 23 29 18446744073709551615 6 vector 24 1 24 7 12 1 < 24 7 24 8 18446744073709551615 3 int 24 8 24 11 18446744073709551615 1 > 24 11 24 12 18446744073709551615 10 ForCounter 24 13 24 23 14 1 ; 24 23 24 24 18446744073709551615 31 //stores exectuion of for loops 25 1 25 32 18446744073709551615 4 bool 26 1 26 5 18446744073709551615 14 is_in_for_loop 26 6 26 20 15 1 = 26 21 26 22 18446744073709551615 5 false 26 23 26 28 18446744073709551615 1 ; 26 28 26 29 18446744073709551615 68 //stores code to execute in truth loop, vector to allow loop nesting 27 1 27 69 18446744073709551615 6 vector 28 1 28 7 12 1 < 28 7 28 8 18446744073709551615 6 string 28 8 28 14 9 1 > 28 14 28 15 18446744073709551615 10 TruthStack 28 16 28 26 16 1 ; 28 26 28 27 18446744073709551615 45 //stores execution information for truth loop 29 1 29 46 18446744073709551615 6 vector 30 1 30 7 12 1 < 30 7 30 8 18446744073709551615 4 bool 30 8 30 12 18446744073709551615 1 > 30 12 30 13 18446744073709551615 9 TruthBool 30 14 30 23 17 1 ; 30 23 30 24 18446744073709551615 4 bool 31 1 31 5 18446744073709551615 16 is_in_truth_loop 31 6 31 22 18 1 ; 31 22 31 23 18446744073709551615 58 //to avoid repeating additions to TruthStack and for loops 32 1 32 59 18446744073709551615 4 bool 33 1 33 5 18446744073709551615 16 is_reinterpreted 33 6 33 22 19 1 = 33 23 33 24 18446744073709551615 5 false 33 25 33 30 18446744073709551615 1 ; 33 30 33 31 18446744073709551615 14 //for comments 34 1 34 15 18446744073709551615 4 bool 35 1 35 5 18446744073709551615 13 is_in_comment 35 6 35 19 20 1 = 35 20 35 21 18446744073709551615 5 false 35 22 35 27 18446744073709551615 1 ; 35 27 35 28 18446744073709551615 16 //for # function 36 1 36 17 18446744073709551615 4 bool 37 1 37 5 18446744073709551615 6 endprg 37 6 37 12 21 1 = 37 13 37 14 18446744073709551615 5 false 37 15 37 20 18446744073709551615 1 ; 37 20 37 21 18446744073709551615 15 //for debbuging 38 1 38 16 18446744073709551615 4 char 39 1 39 5 18446744073709551615 11 cur_command 39 6 39 17 22 1 ; 39 17 39 18 18446744073709551615 28 //important global variables 40 1 40 29 18446744073709551615 6 vector 41 1 41 7 12 1 < 41 7 41 8 18446744073709551615 13 StackVariable 41 8 41 21 6 1 > 41 21 41 22 18446744073709551615 5 Stack 41 23 41 28 23 1 ; 41 28 41 29 18446744073709551615 33 //used for special chars entering 42 1 42 34 18446744073709551615 4 bool 43 1 43 5 18446744073709551615 22 interpret_next_command 43 6 43 28 24 1 = 43 29 43 30 18446744073709551615 4 true 43 31 43 35 18446744073709551615 1 ; 43 35 43 36 18446744073709551615 19 //temp data handler 44 1 44 20 18446744073709551615 6 string 45 1 45 7 9 12 data_handler 45 8 45 20 25 1 = 45 21 45 22 18446744073709551615 2 "" 45 23 45 25 18446744073709551615 1 ; 45 25 45 26 18446744073709551615 28 //for curly brackets support 46 1 46 29 18446744073709551615 6 vector 47 1 47 7 12 1 < 47 7 47 8 18446744073709551615 4 bool 47 8 47 12 18446744073709551615 1 > 47 12 47 13 18446744073709551615 12 interpret_if 47 14 47 26 26 1 ; 47 26 47 27 18446744073709551615 37 //bool interpret_code_blocks = false; 48 1 48 38 18446744073709551615 4 bool 49 1 49 5 18446744073709551615 16 is_in_code_block 49 6 49 22 27 1 = 49 23 49 24 18446744073709551615 5 false 49 25 49 30 18446744073709551615 1 ; 49 30 49 31 18446744073709551615 14 //data handler 50 1 50 15 18446744073709551615 13 StackVariable 51 1 51 14 6 11 DataHandler 51 15 51 26 28 1 ; 51 26 51 27 18446744073709551615 21 //data handler switch 52 1 52 22 18446744073709551615 4 bool 53 1 53 5 18446744073709551615 22 is_data_handler_in_use 53 6 53 28 29 1 = 53 29 53 30 18446744073709551615 5 false 53 31 53 36 18446744073709551615 1 ; 53 36 53 37 18446744073709551615 3 int 54 1 54 4 18446744073709551615 8 parseInt 54 5 54 13 30 1 ( 54 13 54 14 30 5 const 54 14 54 19 18446744073709551615 3 std 54 20 54 23 0 2 :: 54 23 54 25 18446744073709551615 6 string 54 25 54 31 9 1 & 54 32 54 33 18446744073709551615 1 s 54 33 54 34 31 1 ) 54 34 54 35 30 1 { 54 36 54 37 18446744073709551615 3 std 55 3 55 6 0 2 :: 55 6 55 8 18446744073709551615 6 size_t 55 8 55 14 32 3 pos 55 15 55 18 33 1 ; 55 18 55 19 18446744073709551615 3 int 56 3 56 6 18446744073709551615 6 result 56 7 56 13 34 1 = 56 14 56 15 18446744073709551615 3 std 56 16 56 19 0 2 :: 56 19 56 21 35 4 stoi 56 21 56 25 35 1 ( 56 25 56 26 35 1 s 56 26 56 27 31 1 , 56 27 56 28 35 1 & 56 29 56 30 18446744073709551615 3 pos 56 30 56 33 33 1 ) 56 33 56 34 35 1 ; 56 34 56 35 18446744073709551615 2 if 57 3 57 5 18446744073709551615 1 ( 57 6 57 7 18446744073709551615 3 pos 57 7 57 10 33 2 != 57 11 57 13 18446744073709551615 1 s 57 14 57 15 31 1 . 57 15 57 16 36 4 size 57 16 57 20 36 1 ( 57 20 57 21 36 1 ) 57 21 57 22 36 1 ) 57 22 57 23 18446744073709551615 5 throw 58 5 58 10 18446744073709551615 3 std 58 11 58 14 0 2 :: 58 14 58 16 18446744073709551615 13 runtime_error 58 16 58 29 37 1 ( 58 29 58 30 37 21 "can't parse integer" 58 30 58 51 18446744073709551615 1 ) 58 51 58 52 37 1 ; 58 52 58 53 18446744073709551615 6 return 59 3 59 9 18446744073709551615 6 result 59 10 59 16 34 1 ; 59 16 59 17 18446744073709551615 1 } 60 1 60 2 18446744073709551615 4 void 61 1 61 5 18446744073709551615 10 PutOnStack 61 6 61 16 38 1 ( 61 16 61 17 38 13 StackVariable 61 17 61 30 6 5 stack 61 31 61 36 39 1 ) 61 36 61 37 38 1 { 61 38 61 39 18446744073709551615 3 int 62 3 62 6 18446744073709551615 3 var 62 7 62 10 40 1 ; 62 10 62 11 18446744073709551615 3 try 63 3 63 6 18446744073709551615 1 { 63 7 63 8 18446744073709551615 2 if 64 5 64 7 18446744073709551615 1 ( 64 8 64 9 18446744073709551615 5 stack 64 9 64 14 39 1 . 64 14 64 15 18446744073709551615 4 Type 64 15 64 19 7 2 != 64 20 64 22 18446744073709551615 6 number 64 23 64 29 4 1 ) 64 29 64 30 18446744073709551615 1 { 64 31 64 32 18446744073709551615 3 var 65 7 65 10 40 1 = 65 11 65 12 18446744073709551615 8 parseInt 65 13 65 21 41 1 ( 65 21 65 22 18446744073709551615 5 stack 65 22 65 27 39 1 . 65 27 65 28 18446744073709551615 11 char_string 65 28 65 39 18446744073709551615 1 ) 65 39 65 40 18446744073709551615 1 ; 65 40 65 41 18446744073709551615 5 stack 66 7 66 12 39 1 . 66 12 66 13 18446744073709551615 6 number 66 13 66 19 8 1 = 66 20 66 21 18446744073709551615 3 var 66 22 66 25 40 1 ; 66 25 66 26 18446744073709551615 5 stack 67 7 67 12 39 1 . 67 12 67 13 18446744073709551615 4 Type 67 13 67 17 7 1 = 67 18 67 19 18446744073709551615 6 number 67 20 67 26 4 1 ; 67 26 67 27 18446744073709551615 5 stack 68 7 68 12 39 1 . 68 12 68 13 18446744073709551615 11 char_string 68 13 68 24 18446744073709551615 1 = 68 25 68 26 18446744073709551615 2 "" 68 27 68 29 18446744073709551615 1 ; 68 29 68 30 18446744073709551615 1 } 69 5 69 6 18446744073709551615 5 Stack 70 5 70 10 18446744073709551615 1 . 70 10 70 11 18446744073709551615 9 push_back 70 11 70 20 18446744073709551615 1 ( 70 20 70 21 18446744073709551615 5 stack 70 21 70 26 18446744073709551615 1 ) 70 26 70 27 18446744073709551615 1 ; 70 27 70 28 18446744073709551615 1 } 71 3 71 4 18446744073709551615 5 catch 71 5 71 10 18446744073709551615 1 ( 71 11 71 12 18446744073709551615 3 ... 71 12 71 15 18446744073709551615 1 ) 71 15 71 16 18446744073709551615 1 { 71 17 71 18 18446744073709551615 5 stack 72 5 72 10 39 1 . 72 10 72 11 18446744073709551615 4 Type 72 11 72 15 7 1 = 72 16 72 17 18446744073709551615 11 char_string 72 18 72 29 5 1 ; 72 29 72 30 18446744073709551615 5 Stack 73 5 73 10 18446744073709551615 1 . 73 10 73 11 18446744073709551615 9 push_back 73 11 73 20 18446744073709551615 1 ( 73 20 73 21 18446744073709551615 5 stack 73 21 73 26 18446744073709551615 1 ) 73 26 73 27 18446744073709551615 1 ; 73 27 73 28 18446744073709551615 1 } 74 3 74 4 18446744073709551615 1 } 75 1 75 2 18446744073709551615 4 void 76 1 76 5 18446744073709551615 15 PrintErrMessage 76 6 76 21 42 1 ( 76 21 76 22 42 3 int 76 22 76 25 18446744073709551615 8 exitcode 76 26 76 34 43 1 ) 76 34 76 35 42 1 { 76 36 76 37 18446744073709551615 6 switch 77 3 77 9 18446744073709551615 1 ( 77 10 77 11 18446744073709551615 8 exitcode 77 11 77 19 43 1 ) 77 19 77 20 18446744073709551615 1 { 77 21 77 22 18446744073709551615 4 case 78 3 78 7 18446744073709551615 1 2 78 8 78 9 18446744073709551615 1 : 78 9 78 10 18446744073709551615 4 cout 79 5 79 9 44 2 << 79 10 79 12 45 11 cur_command 79 13 79 24 22 2 << 79 25 79 27 45 4 ": " 79 28 79 32 18446744073709551615 2 << 80 10 80 12 45 16 "Stack is empty" 80 13 80 29 18446744073709551615 2 << 80 30 80 32 46 4 endl 80 33 80 37 47 1 ; 80 37 80 38 18446744073709551615 5 break 81 5 81 10 18446744073709551615 1 ; 81 10 81 11 18446744073709551615 4 case 82 3 82 7 18446744073709551615 1 3 82 8 82 9 18446744073709551615 1 : 82 9 82 10 18446744073709551615 4 cout 83 5 83 9 44 2 << 83 10 83 12 45 11 cur_command 83 13 83 24 22 2 << 83 25 83 27 45 4 ": " 83 28 83 32 18446744073709551615 2 << 84 10 84 12 45 20 "Stack is too small" 84 13 84 33 18446744073709551615 2 << 84 34 84 36 46 4 endl 84 37 84 41 47 1 ; 84 41 84 42 18446744073709551615 5 break 85 5 85 10 18446744073709551615 1 ; 85 10 85 11 18446744073709551615 4 case 86 3 86 7 18446744073709551615 2 11 86 8 86 10 18446744073709551615 1 : 86 10 86 11 18446744073709551615 4 cout 87 5 87 9 44 2 << 87 10 87 12 45 11 cur_command 87 13 87 24 22 2 << 87 25 87 27 45 4 ": " 87 28 87 32 18446744073709551615 2 << 88 10 88 12 45 11 "Missing {" 88 13 88 24 18446744073709551615 2 << 88 25 88 27 46 4 endl 88 28 88 32 47 1 ; 88 32 88 33 18446744073709551615 5 break 89 5 89 10 18446744073709551615 1 ; 89 10 89 11 18446744073709551615 4 case 90 3 90 7 18446744073709551615 2 12 90 8 90 10 18446744073709551615 1 : 90 10 90 11 18446744073709551615 4 cout 91 5 91 9 44 2 << 91 10 91 12 45 11 cur_command 91 13 91 24 22 2 << 91 25 91 27 45 4 ": " 91 28 91 32 18446744073709551615 2 << 92 10 92 12 45 11 "Missing [" 92 13 92 24 18446744073709551615 2 << 92 25 92 27 46 4 endl 92 28 92 32 47 1 ; 92 32 92 33 18446744073709551615 5 break 93 5 93 10 18446744073709551615 1 ; 93 10 93 11 18446744073709551615 4 case 94 3 94 7 18446744073709551615 2 13 94 8 94 10 18446744073709551615 1 : 94 10 94 11 18446744073709551615 4 cout 95 5 95 9 44 2 << 95 10 95 12 45 11 cur_command 95 13 95 24 22 2 << 95 25 95 27 45 4 ": " 95 28 95 32 18446744073709551615 2 << 96 10 96 12 45 11 "Missing (" 96 13 96 24 18446744073709551615 2 << 96 25 96 27 46 4 endl 96 28 96 32 47 1 ; 96 32 96 33 18446744073709551615 5 break 97 5 97 10 18446744073709551615 1 ; 97 10 97 11 18446744073709551615 4 case 98 3 98 7 18446744073709551615 2 21 98 8 98 10 18446744073709551615 1 : 98 10 98 11 18446744073709551615 4 cout 99 5 99 9 44 2 << 99 10 99 12 45 11 cur_command 99 13 99 24 22 2 << 99 25 99 27 45 4 ": " 99 28 99 32 18446744073709551615 2 << 100 10 100 12 45 12 "Wrong type" 100 13 100 25 18446744073709551615 2 << 100 26 100 28 46 4 endl 100 29 100 33 47 1 ; 100 33 100 34 18446744073709551615 5 break 101 5 101 10 18446744073709551615 1 ; 101 10 101 11 18446744073709551615 4 case 102 3 102 7 18446744073709551615 2 22 102 8 102 10 18446744073709551615 1 : 102 10 102 11 18446744073709551615 4 cout 103 5 103 9 44 2 << 103 10 103 12 45 11 cur_command 103 13 103 24 22 2 << 103 25 103 27 45 4 ": " 103 28 103 32 18446744073709551615 2 << 104 10 104 12 45 15 "Division by 0" 104 13 104 28 18446744073709551615 2 << 104 29 104 31 46 4 endl 104 32 104 36 47 1 ; 104 36 104 37 18446744073709551615 5 break 105 5 105 10 18446744073709551615 1 ; 105 10 105 11 18446744073709551615 7 default 106 3 106 10 18446744073709551615 1 : 106 10 106 11 18446744073709551615 5 break 107 5 107 10 18446744073709551615 1 ; 107 10 107 11 18446744073709551615 1 } 108 3 108 4 18446744073709551615 1 } 109 1 109 2 18446744073709551615 3 int 110 1 110 4 18446744073709551615 11 PopAndPrint 110 5 110 16 48 1 ( 110 16 110 17 48 1 ) 110 17 110 18 48 1 { 110 19 110 20 18446744073709551615 3 int 111 3 111 6 18446744073709551615 1 x 111 7 111 8 49 1 = 111 9 111 10 18446744073709551615 5 Stack 111 11 111 16 18446744073709551615 1 . 111 16 111 17 18446744073709551615 4 size 111 17 111 21 18446744073709551615 1 ( 111 21 111 22 18446744073709551615 1 ) 111 22 111 23 18446744073709551615 1 ; 111 23 111 24 18446744073709551615 2 if 112 3 112 5 18446744073709551615 1 ( 112 6 112 7 18446744073709551615 1 x 112 7 112 8 49 2 == 112 9 112 11 18446744073709551615 1 0 112 12 112 13 18446744073709551615 1 ) 112 13 112 14 18446744073709551615 1 { 112 15 112 16 18446744073709551615 6 return 113 5 113 11 18446744073709551615 1 2 113 12 113 13 18446744073709551615 1 ; 113 13 113 14 18446744073709551615 1 } 114 3 114 4 18446744073709551615 13 StackVariable 115 3 115 16 6 4 temp 115 17 115 21 50 1 = 115 22 115 23 18446744073709551615 5 Stack 115 24 115 29 18446744073709551615 1 [ 115 29 115 30 18446744073709551615 1 x 115 30 115 31 18446744073709551615 1 - 115 32 115 33 18446744073709551615 1 1 115 34 115 35 18446744073709551615 1 ] 115 35 115 36 18446744073709551615 1 ; 115 36 115 37 18446744073709551615 2 if 116 3 116 5 18446744073709551615 1 ( 116 6 116 7 18446744073709551615 4 temp 116 7 116 11 50 1 . 116 11 116 12 18446744073709551615 4 Type 116 12 116 16 7 2 == 116 17 116 19 18446744073709551615 6 number 116 20 116 26 4 1 ) 116 26 116 27 18446744073709551615 1 { 116 28 116 29 18446744073709551615 4 cout 117 5 117 9 44 2 << 117 10 117 12 46 4 temp 117 13 117 17 50 1 . 117 17 117 18 18446744073709551615 6 number 117 18 117 24 8 1 ; 117 24 117 25 18446744073709551615 1 } 118 3 118 4 18446744073709551615 4 else 118 5 118 9 18446744073709551615 1 { 118 10 118 11 18446744073709551615 4 cout 119 5 119 9 44 2 << 119 10 119 12 18446744073709551615 4 temp 119 13 119 17 50 1 . 119 17 119 18 18446744073709551615 11 char_string 119 18 119 29 18446744073709551615 1 ; 119 29 119 30 18446744073709551615 1 } 120 3 120 4 18446744073709551615 5 Stack 121 3 121 8 18446744073709551615 1 . 121 8 121 9 18446744073709551615 8 pop_back 121 9 121 17 18446744073709551615 1 ( 121 17 121 18 18446744073709551615 1 ) 121 18 121 19 18446744073709551615 1 ; 121 19 121 20 18446744073709551615 6 return 122 3 122 9 18446744073709551615 1 0 122 10 122 11 18446744073709551615 1 ; 122 11 122 12 18446744073709551615 1 } 123 1 123 2 18446744073709551615 193 /* EXIT CODES:
 *0 - finished successfully
 *2- stack is empty
 *3 - stack is too small
 * 11 - missing {
 * 12 missing [
 * 13 missing (
 * 21 - wrong type
 * 22 - division by zero
 *
 *
 * */ 124 1 135 6 18446744073709551615 4 void 136 1 136 5 18446744073709551615 17 DataHandlerUpdate 136 6 136 23 51 1 ( 136 23 136 24 51 1 ) 136 24 136 25 51 1 { 136 26 136 27 18446744073709551615 2 if 137 3 137 5 18446744073709551615 1 ( 137 6 137 7 18446744073709551615 12 data_handler 137 7 137 19 25 2 != 137 20 137 22 52 2 "" 137 23 137 25 18446744073709551615 1 ) 137 25 137 26 18446744073709551615 1 { 137 27 137 28 18446744073709551615 13 StackVariable 138 5 138 18 6 4 temp 138 19 138 23 53 1 ; 138 23 138 24 18446744073709551615 4 temp 139 5 139 9 53 1 . 139 9 139 10 18446744073709551615 11 char_string 139 10 139 21 18446744073709551615 1 = 139 22 139 23 18446744073709551615 12 data_handler 139 24 139 36 25 1 ; 139 36 139 37 18446744073709551615 4 temp 140 5 140 9 53 1 . 140 9 140 10 18446744073709551615 4 Type 140 10 140 14 7 1 = 140 15 140 16 18446744073709551615 11 char_string 140 17 140 28 5 1 ; 140 28 140 29 18446744073709551615 12 data_handler 141 5 141 17 25 1 = 141 18 141 19 54 2 "" 141 20 141 22 18446744073709551615 1 ; 141 22 141 23 18446744073709551615 10 PutOnStack 142 5 142 15 38 1 ( 142 15 142 16 38 4 temp 142 16 142 20 53 1 ) 142 20 142 21 38 1 ; 142 21 142 22 18446744073709551615 1 } 143 3 143 4 18446744073709551615 1 } 144 1 144 2 18446744073709551615 3 int 145 1 145 4 18446744073709551615 9 UserInput 145 5 145 14 55 1 ( 145 14 145 15 55 1 ) 145 15 145 16 55 1 { 145 17 145 18 18446744073709551615 13 StackVariable 146 3 146 16 6 4 temp 146 17 146 21 56 1 ; 146 21 146 22 18446744073709551615 4 temp 147 3 147 7 56 1 . 147 7 147 8 18446744073709551615 4 Type 147 8 147 12 7 1 = 147 13 147 14 18446744073709551615 11 char_string 147 15 147 26 5 1 ; 147 26 147 27 18446744073709551615 7 getline 148 3 148 10 57 1 ( 148 10 148 11 18446744073709551615 3 cin 148 11 148 14 58 1 , 148 14 148 15 18446744073709551615 4 temp 148 16 148 20 56 1 . 148 20 148 21 18446744073709551615 11 char_string 148 21 148 32 18446744073709551615 1 ) 148 32 148 33 18446744073709551615 1 ; 148 33 148 34 18446744073709551615 10 PutOnStack 149 3 149 13 38 1 ( 149 13 149 14 38 4 temp 149 14 149 18 56 1 ) 149 18 149 19 38 1 ; 149 19 149 20 18446744073709551615 6 return 150 3 150 9 18446744073709551615 1 0 150 10 150 11 18446744073709551615 1 ; 150 11 150 12 18446744073709551615 1 } 151 1 151 2 18446744073709551615 3 int 152 1 152 4 18446744073709551615 15 RemoveFromStack 152 5 152 20 59 1 ( 152 20 152 21 59 1 ) 152 21 152 22 59 1 { 152 23 152 24 18446744073709551615 2 if 153 3 153 5 18446744073709551615 1 ( 153 6 153 7 18446744073709551615 5 Stack 153 7 153 12 18446744073709551615 1 . 153 12 153 13 18446744073709551615 4 size 153 13 153 17 18446744073709551615 1 ( 153 17 153 18 18446744073709551615 1 ) 153 18 153 19 18446744073709551615 2 == 153 20 153 22 18446744073709551615 1 0 153 23 153 24 18446744073709551615 1 ) 153 24 153 25 18446744073709551615 1 { 153 26 153 27 18446744073709551615 6 return 154 5 154 11 18446744073709551615 1 2 154 12 154 13 18446744073709551615 1 ; 154 13 154 14 18446744073709551615 1 } 155 3 155 4 18446744073709551615 5 Stack 156 3 156 8 18446744073709551615 1 . 156 8 156 9 18446744073709551615 8 pop_back 156 9 156 17 18446744073709551615 1 ( 156 17 156 18 18446744073709551615 1 ) 156 18 156 19 18446744073709551615 1 ; 156 19 156 20 18446744073709551615 6 return 157 3 157 9 18446744073709551615 1 0 157 10 157 11 18446744073709551615 1 ; 157 11 157 12 18446744073709551615 1 } 158 1 158 2 18446744073709551615 3 int 159 1 159 4 18446744073709551615 22 CalculateLenghtofStack 159 5 159 27 60 1 ( 159 27 159 28 60 1 ) 159 28 159 29 60 1 { 159 30 159 31 18446744073709551615 3 int 160 3 160 6 18446744073709551615 1 a 160 7 160 8 61 1 = 160 9 160 10 18446744073709551615 5 Stack 160 11 160 16 18446744073709551615 1 . 160 16 160 17 18446744073709551615 4 size 160 17 160 21 18446744073709551615 1 ( 160 21 160 22 18446744073709551615 1 ) 160 22 160 23 18446744073709551615 1 ; 160 23 160 24 18446744073709551615 13 StackVariable 161 3 161 16 6 4 temp 161 17 161 21 62 1 ; 161 21 161 22 18446744073709551615 4 temp 162 3 162 7 62 1 . 162 7 162 8 18446744073709551615 4 Type 162 8 162 12 7 1 = 162 13 162 14 18446744073709551615 11 char_string 162 15 162 26 5 1 ; 162 26 162 27 18446744073709551615 4 temp 163 3 163 7 18446744073709551615 1 . 163 7 163 8 18446744073709551615 11 char_string 163 8 163 19 18446744073709551615 1 = 163 20 163 21 18446744073709551615 9 to_string 163 22 163 31 18446744073709551615 1 ( 163 31 163 32 18446744073709551615 1 a 163 32 163 33 18446744073709551615 1 ) 163 33 163 34 18446744073709551615 1 ; 163 34 163 35 18446744073709551615 10 PutOnStack 164 3 164 13 38 1 ( 164 13 164 14 38 4 temp 164 14 164 18 62 1 ) 164 18 164 19 38 1 ; 164 19 164 20 18446744073709551615 6 return 165 3 165 9 18446744073709551615 1 0 165 10 165 11 18446744073709551615 1 ; 165 11 165 12 18446744073709551615 1 } 166 1 166 2 18446744073709551615 3 int 167 1 167 4 18446744073709551615 11 BooleanTest 167 5 167 16 63 1 ( 167 16 167 17 63 1 ) 167 17 167 18 63 1 { 167 19 167 20 18446744073709551615 2 if 168 3 168 5 18446744073709551615 1 ( 168 6 168 7 18446744073709551615 5 Stack 168 7 168 12 18446744073709551615 1 . 168 12 168 13 18446744073709551615 4 size 168 13 168 17 18446744073709551615 1 ( 168 17 168 18 18446744073709551615 1 ) 168 18 168 19 18446744073709551615 2 == 168 20 168 22 18446744073709551615 1 0 168 23 168 24 18446744073709551615 1 ) 168 24 168 25 18446744073709551615 1 { 168 26 168 27 18446744073709551615 6 return 169 5 169 11 18446744073709551615 1 2 169 12 169 13 18446744073709551615 1 ; 169 13 169 14 18446744073709551615 1 } 170 3 170 4 18446744073709551615 4 bool 171 3 171 7 18446744073709551615 3 out 171 8 171 11 64 1 = 171 12 171 13 18446744073709551615 5 false 171 14 171 19 18446744073709551615 1 ; 171 19 171 20 18446744073709551615 3 int 172 3 172 6 18446744073709551615 3 len 172 7 172 10 65 1 = 172 11 172 12 18446744073709551615 5 Stack 172 13 172 18 18446744073709551615 1 . 172 18 172 19 18446744073709551615 4 size 172 19 172 23 18446744073709551615 1 ( 172 23 172 24 18446744073709551615 1 ) 172 24 172 25 18446744073709551615 1 - 172 26 172 27 18446744073709551615 1 1 172 28 172 29 18446744073709551615 1 ; 172 29 172 30 18446744073709551615 2 if 173 3 173 5 18446744073709551615 1 ( 173 6 173 7 18446744073709551615 5 Stack 173 7 173 12 18446744073709551615 1 [ 173 12 173 13 18446744073709551615 3 len 173 13 173 16 18446744073709551615 1 ] 173 16 173 17 18446744073709551615 1 . 173 17 173 18 18446744073709551615 4 Type 173 18 173 22 18446744073709551615 2 == 173 23 173 25 18446744073709551615 11 char_string 173 26 173 37 18446744073709551615 1 ) 173 37 173 38 18446744073709551615 1 { 173 39 173 40 18446744073709551615 3 out 174 5 174 8 64 1 = 174 9 174 10 18446744073709551615 5 false 174 11 174 16 18446744073709551615 1 ; 174 16 174 17 18446744073709551615 1 } 175 3 175 4 18446744073709551615 4 else 175 5 175 9 18446744073709551615 1 { 175 10 175 11 18446744073709551615 2 if 176 5 176 7 18446744073709551615 1 ( 176 8 176 9 18446744073709551615 5 Stack 176 9 176 14 18446744073709551615 1 [ 176 14 176 15 18446744073709551615 3 len 176 15 176 18 18446744073709551615 1 ] 176 18 176 19 18446744073709551615 1 . 176 19 176 20 18446744073709551615 4 Type 176 20 176 24 18446744073709551615 2 == 176 25 176 27 18446744073709551615 6 number 176 28 176 34 18446744073709551615 2 && 176 35 176 37 18446744073709551615 5 Stack 176 38 176 43 18446744073709551615 1 [ 176 43 176 44 18446744073709551615 3 len 176 44 176 47 18446744073709551615 1 ] 176 47 176 48 18446744073709551615 1 . 176 48 176 49 18446744073709551615 6 number 176 49 176 55 18446744073709551615 2 == 176 56 176 58 18446744073709551615 1 0 176 59 176 60 18446744073709551615 1 ) 176 60 176 61 18446744073709551615 1 { 176 62 176 63 18446744073709551615 3 out 177 7 177 10 64 1 = 177 11 177 12 18446744073709551615 5 false 177 13 177 18 18446744073709551615 1 ; 177 18 177 19 18446744073709551615 1 } 178 5 178 6 18446744073709551615 2 if 179 5 179 7 18446744073709551615 1 ( 179 8 179 9 18446744073709551615 5 Stack 179 9 179 14 18446744073709551615 1 [ 179 14 179 15 18446744073709551615 3 len 179 15 179 18 18446744073709551615 1 ] 179 18 179 19 18446744073709551615 1 . 179 19 179 20 18446744073709551615 4 Type 179 20 179 24 18446744073709551615 2 == 179 25 179 27 18446744073709551615 6 number 179 28 179 34 18446744073709551615 2 && 179 35 179 37 18446744073709551615 5 Stack 179 38 179 43 18446744073709551615 1 [ 179 43 179 44 18446744073709551615 3 len 179 44 179 47 18446744073709551615 1 ] 179 47 179 48 18446744073709551615 1 . 179 48 179 49 18446744073709551615 6 number 179 49 179 55 18446744073709551615 2 != 179 56 179 58 18446744073709551615 1 0 179 59 179 60 18446744073709551615 1 ) 179 60 179 61 18446744073709551615 1 { 179 62 179 63 18446744073709551615 3 out 180 7 180 10 64 1 = 180 11 180 12 18446744073709551615 4 true 180 13 180 17 18446744073709551615 1 ; 180 17 180 18 18446744073709551615 1 } 181 5 181 6 18446744073709551615 1 } 182 3 182 4 18446744073709551615 13 StackVariable 183 3 183 16 6 4 temp 183 17 183 21 66 1 ; 183 21 183 22 18446744073709551615 4 temp 184 3 184 7 66 1 . 184 7 184 8 18446744073709551615 4 Type 184 8 184 12 7 1 = 184 13 184 14 18446744073709551615 11 char_string 184 15 184 26 5 1 ; 184 26 184 27 18446744073709551615 2 if 185 3 185 5 18446744073709551615 1 ( 185 6 185 7 18446744073709551615 3 out 185 7 185 10 64 2 == 185 11 185 13 18446744073709551615 4 true 185 14 185 18 18446744073709551615 1 ) 185 18 185 19 18446744073709551615 1 { 185 20 185 21 18446744073709551615 4 temp 186 5 186 9 66 1 . 186 9 186 10 18446744073709551615 11 char_string 186 10 186 21 18446744073709551615 1 = 186 22 186 23 18446744073709551615 3 "1" 186 24 186 27 18446744073709551615 1 ; 186 27 186 28 18446744073709551615 1 } 187 3 187 4 18446744073709551615 4 else 187 5 187 9 18446744073709551615 1 { 187 10 187 11 18446744073709551615 4 temp 188 5 188 9 66 1 . 188 9 188 10 18446744073709551615 11 char_string 188 10 188 21 18446744073709551615 1 = 188 22 188 23 18446744073709551615 3 "0" 188 24 188 27 18446744073709551615 1 ; 188 27 188 28 18446744073709551615 1 } 189 3 189 4 18446744073709551615 10 PutOnStack 190 3 190 13 38 1 ( 190 13 190 14 38 4 temp 190 14 190 18 66 1 ) 190 18 190 19 38 1 ; 190 19 190 20 18446744073709551615 6 return 191 3 191 9 18446744073709551615 1 0 191 10 191 11 18446744073709551615 1 ; 191 11 191 12 18446744073709551615 1 } 192 1 192 2 18446744073709551615 3 int 193 1 193 4 18446744073709551615 9 Duplicate 193 5 193 14 67 1 ( 193 14 193 15 67 1 ) 193 15 193 16 67 1 { 193 17 193 18 18446744073709551615 2 if 194 3 194 5 18446744073709551615 1 ( 194 6 194 7 18446744073709551615 5 Stack 194 7 194 12 18446744073709551615 1 . 194 12 194 13 18446744073709551615 4 size 194 13 194 17 18446744073709551615 1 ( 194 17 194 18 18446744073709551615 1 ) 194 18 194 19 18446744073709551615 2 == 194 20 194 22 18446744073709551615 1 0 194 23 194 24 18446744073709551615 1 ) 194 24 194 25 18446744073709551615 1 { 194 26 194 27 18446744073709551615 6 return 195 5 195 11 18446744073709551615 1 2 195 12 195 13 18446744073709551615 1 ; 195 13 195 14 18446744073709551615 1 } 196 3 196 4 18446744073709551615 3 int 197 3 197 6 18446744073709551615 3 len 197 7 197 10 68 1 = 197 11 197 12 18446744073709551615 5 Stack 197 13 197 18 18446744073709551615 1 . 197 18 197 19 18446744073709551615 4 size 197 19 197 23 18446744073709551615 1 ( 197 23 197 24 18446744073709551615 1 ) 197 24 197 25 18446744073709551615 1 - 197 26 197 27 18446744073709551615 1 1 197 28 197 29 18446744073709551615 1 ; 197 29 197 30 18446744073709551615 13 StackVariable 198 3 198 16 6 4 temp 198 17 198 21 69 1 = 198 22 198 23 18446744073709551615 5 Stack 198 24 198 29 18446744073709551615 1 [ 198 29 198 30 18446744073709551615 3 len 198 30 198 33 18446744073709551615 1 ] 198 33 198 34 18446744073709551615 1 ; 198 34 198 35 18446744073709551615 4 temp 199 3 199 7 18446744073709551615 1 . 199 7 199 8 18446744073709551615 4 Type 199 8 199 12 18446744073709551615 1 = 199 13 199 14 18446744073709551615 5 Stack 199 15 199 20 18446744073709551615 1 [ 199 20 199 21 18446744073709551615 3 len 199 21 199 24 18446744073709551615 1 ] 199 24 199 25 18446744073709551615 1 . 199 25 199 26 18446744073709551615 4 Type 199 26 199 30 18446744073709551615 1 ; 199 30 199 31 18446744073709551615 4 temp 200 3 200 7 18446744073709551615 1 . 200 7 200 8 18446744073709551615 11 char_string 200 8 200 19 18446744073709551615 1 = 200 20 200 21 18446744073709551615 5 Stack 200 22 200 27 18446744073709551615 1 [ 200 27 200 28 18446744073709551615 3 len 200 28 200 31 18446744073709551615 1 ] 200 31 200 32 18446744073709551615 1 . 200 32 200 33 18446744073709551615 11 char_string 200 33 200 44 18446744073709551615 1 ; 200 44 200 45 18446744073709551615 4 temp 201 3 201 7 18446744073709551615 1 . 201 7 201 8 18446744073709551615 6 number 201 8 201 14 18446744073709551615 1 = 201 15 201 16 18446744073709551615 5 Stack 201 17 201 22 18446744073709551615 1 [ 201 22 201 23 18446744073709551615 3 len 201 23 201 26 18446744073709551615 1 ] 201 26 201 27 18446744073709551615 1 . 201 27 201 28 18446744073709551615 6 number 201 28 201 34 18446744073709551615 1 ; 201 34 201 35 18446744073709551615 10 PutOnStack 202 3 202 13 38 1 ( 202 13 202 14 38 4 temp 202 14 202 18 69 1 ) 202 18 202 19 38 1 ; 202 19 202 20 18446744073709551615 6 return 203 3 203 9 18446744073709551615 1 0 203 10 203 11 18446744073709551615 1 ; 203 11 203 12 18446744073709551615 1 } 204 1 204 2 18446744073709551615 3 int 205 1 205 4 18446744073709551615 14 ConvertToASCII 205 5 205 19 70 1 ( 205 19 205 20 70 1 ) 205 20 205 21 70 1 { 205 22 205 23 18446744073709551615 2 if 206 3 206 5 18446744073709551615 1 ( 206 6 206 7 18446744073709551615 5 Stack 206 7 206 12 18446744073709551615 1 . 206 12 206 13 18446744073709551615 4 size 206 13 206 17 18446744073709551615 1 ( 206 17 206 18 18446744073709551615 1 ) 206 18 206 19 18446744073709551615 2 == 206 20 206 22 18446744073709551615 1 0 206 23 206 24 18446744073709551615 1 ) 206 24 206 25 18446744073709551615 1 { 206 26 206 27 18446744073709551615 6 return 207 5 207 11 18446744073709551615 1 2 207 12 207 13 18446744073709551615 1 ; 207 13 207 14 18446744073709551615 1 } 208 3 208 4 18446744073709551615 3 int 209 3 209 6 18446744073709551615 5 ascii 209 7 209 12 71 1 = 209 13 209 14 18446744073709551615 1 0 209 15 209 16 18446744073709551615 1 ; 209 16 209 17 18446744073709551615 4 char 210 3 210 7 18446744073709551615 6 cascii 210 8 210 14 72 1 ; 210 14 210 15 18446744073709551615 3 int 211 3 211 6 18446744073709551615 3 len 211 7 211 10 73 1 = 211 11 211 12 18446744073709551615 5 Stack 211 13 211 18 18446744073709551615 1 . 211 18 211 19 18446744073709551615 4 size 211 19 211 23 18446744073709551615 1 ( 211 23 211 24 18446744073709551615 1 ) 211 24 211 25 18446744073709551615 1 - 211 26 211 27 18446744073709551615 1 1 211 28 211 29 18446744073709551615 1 ; 211 29 211 30 18446744073709551615 2 if 212 3 212 5 18446744073709551615 1 ( 212 6 212 7 18446744073709551615 5 Stack 212 7 212 12 18446744073709551615 1 [ 212 12 212 13 18446744073709551615 3 len 212 13 212 16 18446744073709551615 1 ] 212 16 212 17 18446744073709551615 1 . 212 17 212 18 18446744073709551615 4 Type 212 18 212 22 18446744073709551615 2 == 212 23 212 25 18446744073709551615 6 number 212 26 212 32 18446744073709551615 1 ) 212 32 212 33 18446744073709551615 1 { 212 34 212 35 18446744073709551615 5 ascii 213 5 213 10 18446744073709551615 1 = 213 11 213 12 18446744073709551615 5 Stack 213 13 213 18 18446744073709551615 1 [ 213 18 213 19 18446744073709551615 3 len 213 19 213 22 18446744073709551615 1 ] 213 22 213 23 18446744073709551615 1 . 213 23 213 24 18446744073709551615 6 number 213 24 213 30 18446744073709551615 1 ; 213 30 213 31 18446744073709551615 6 cascii 214 5 214 11 72 1 = 214 12 214 13 18446744073709551615 1 ( 214 14 214 15 18446744073709551615 4 char 214 15 214 19 18446744073709551615 1 ) 214 19 214 20 18446744073709551615 5 ascii 214 20 214 25 71 1 ; 214 25 214 26 18446744073709551615 5 Stack 215 5 215 10 18446744073709551615 1 [ 215 10 215 11 18446744073709551615 3 len 215 11 215 14 18446744073709551615 1 ] 215 14 215 15 18446744073709551615 1 . 215 15 215 16 18446744073709551615 4 Type 215 16 215 20 18446744073709551615 1 = 215 21 215 22 18446744073709551615 11 char_string 215 23 215 34 18446744073709551615 1 ; 215 34 215 35 18446744073709551615 5 Stack 216 5 216 10 18446744073709551615 1 [ 216 10 216 11 18446744073709551615 3 len 216 11 216 14 18446744073709551615 1 ] 216 14 216 15 18446744073709551615 1 . 216 15 216 16 18446744073709551615 6 number 216 16 216 22 18446744073709551615 1 = 216 23 216 24 18446744073709551615 1 0 216 25 216 26 18446744073709551615 1 ; 216 26 216 27 18446744073709551615 5 Stack 217 5 217 10 18446744073709551615 1 [ 217 10 217 11 18446744073709551615 3 len 217 11 217 14 18446744073709551615 1 ] 217 14 217 15 18446744073709551615 1 . 217 15 217 16 18446744073709551615 11 char_string 217 16 217 27 18446744073709551615 1 = 217 28 217 29 18446744073709551615 6 cascii 217 30 217 36 18446744073709551615 1 ; 217 36 217 37 18446744073709551615 1 } 218 3 218 4 18446744073709551615 4 else 218 5 218 9 18446744073709551615 1 { 218 10 218 11 18446744073709551615 5 ascii 219 5 219 10 18446744073709551615 1 = 219 11 219 12 18446744073709551615 5 Stack 219 13 219 18 18446744073709551615 1 [ 219 18 219 19 18446744073709551615 3 len 219 19 219 22 18446744073709551615 1 ] 219 22 219 23 18446744073709551615 1 . 219 23 219 24 18446744073709551615 11 char_string 219 24 219 35 18446744073709551615 1 . 219 35 219 36 18446744073709551615 6 length 219 36 219 42 18446744073709551615 1 ( 219 42 219 43 18446744073709551615 1 ) 219 43 219 44 18446744073709551615 1 ; 219 44 219 45 18446744073709551615 5 Stack 220 5 220 10 18446744073709551615 1 [ 220 10 220 11 18446744073709551615 3 len 220 11 220 14 18446744073709551615 1 ] 220 14 220 15 18446744073709551615 1 . 220 15 220 16 18446744073709551615 4 Type 220 16 220 20 18446744073709551615 1 = 220 21 220 22 18446744073709551615 6 number 220 23 220 29 18446744073709551615 1 ; 220 29 220 30 18446744073709551615 5 Stack 221 5 221 10 18446744073709551615 1 [ 221 10 221 11 18446744073709551615 3 len 221 11 221 14 18446744073709551615 1 ] 221 14 221 15 18446744073709551615 1 . 221 15 221 16 18446744073709551615 6 number 221 16 221 22 18446744073709551615 1 = 221 23 221 24 18446744073709551615 5 ascii 221 25 221 30 18446744073709551615 1 ; 221 30 221 31 18446744073709551615 5 Stack 222 5 222 10 18446744073709551615 1 [ 222 10 222 11 18446744073709551615 3 len 222 11 222 14 18446744073709551615 1 ] 222 14 222 15 18446744073709551615 1 . 222 15 222 16 18446744073709551615 11 char_string 222 16 222 27 18446744073709551615 1 = 222 28 222 29 18446744073709551615 2 "" 222 30 222 32 18446744073709551615 1 ; 222 32 222 33 18446744073709551615 1 } 223 3 223 4 18446744073709551615 6 return 224 3 224 9 18446744073709551615 1 0 224 10 224 11 18446744073709551615 1 ; 224 11 224 12 18446744073709551615 1 } 225 1 225 2 18446744073709551615 3 int 226 1 226 4 18446744073709551615 9 IfCommand 226 5 226 14 74 1 ( 226 14 226 15 74 1 ) 226 15 226 16 74 1 { 226 17 226 18 18446744073709551615 2 if 227 3 227 5 18446744073709551615 1 ( 227 6 227 7 18446744073709551615 5 Stack 227 7 227 12 18446744073709551615 1 . 227 12 227 13 18446744073709551615 4 size 227 13 227 17 18446744073709551615 1 ( 227 17 227 18 18446744073709551615 1 ) 227 18 227 19 18446744073709551615 2 == 227 20 227 22 18446744073709551615 1 0 227 23 227 24 18446744073709551615 1 ) 227 24 227 25 18446744073709551615 1 { 227 26 227 27 18446744073709551615 6 return 228 5 228 11 18446744073709551615 1 2 228 12 228 13 18446744073709551615 1 ; 228 13 228 14 18446744073709551615 1 } 229 3 229 4 18446744073709551615 2 if 230 3 230 5 18446744073709551615 1 ( 230 6 230 7 18446744073709551615 5 Stack 230 7 230 12 18446744073709551615 1 . 230 12 230 13 18446744073709551615 4 size 230 13 230 17 18446744073709551615 1 ( 230 17 230 18 18446744073709551615 1 ) 230 18 230 19 18446744073709551615 2 <= 230 20 230 22 18446744073709551615 1 1 230 23 230 24 18446744073709551615 1 ) 230 24 230 25 18446744073709551615 1 { 230 26 230 27 18446744073709551615 6 return 231 5 231 11 18446744073709551615 1 3 231 12 231 13 18446744073709551615 1 ; 231 13 231 14 18446744073709551615 1 } 232 3 232 4 18446744073709551615 4 bool 233 3 233 7 18446744073709551615 4 temp 233 8 233 12 75 1 = 233 13 233 14 18446744073709551615 5 false 233 15 233 20 18446744073709551615 1 ; 233 20 233 21 18446744073709551615 3 int 234 3 234 6 18446744073709551615 3 len 234 7 234 10 76 1 = 234 11 234 12 18446744073709551615 5 Stack 234 13 234 18 18446744073709551615 1 . 234 18 234 19 18446744073709551615 4 size 234 19 234 23 18446744073709551615 1 ( 234 23 234 24 18446744073709551615 1 ) 234 24 234 25 18446744073709551615 1 - 234 26 234 27 18446744073709551615 1 1 234 28 234 29 18446744073709551615 1 ; 234 29 234 30 18446744073709551615 3 int 235 3 235 6 18446744073709551615 4 len2 235 7 235 11 77 1 = 235 12 235 13 18446744073709551615 3 len 235 14 235 17 76 1 - 235 18 235 19 18446744073709551615 1 1 235 20 235 21 18446744073709551615 1 ; 235 21 235 22 18446744073709551615 13 StackVariable 236 3 236 16 6 3 tmp 236 17 236 20 78 1 = 236 21 236 22 18446744073709551615 5 Stack 236 23 236 28 18446744073709551615 1 [ 236 28 236 29 18446744073709551615 3 len 236 29 236 32 18446744073709551615 1 ] 236 32 236 33 18446744073709551615 1 ; 236 33 236 34 18446744073709551615 13 StackVariable 237 3 237 16 6 4 tmp2 237 17 237 21 79 1 = 237 22 237 23 18446744073709551615 5 Stack 237 24 237 29 18446744073709551615 1 [ 237 29 237 30 18446744073709551615 4 len2 237 30 237 34 18446744073709551615 1 ] 237 34 237 35 18446744073709551615 1 ; 237 35 237 36 18446744073709551615 2 if 238 3 238 5 18446744073709551615 1 ( 238 6 238 7 18446744073709551615 3 tmp 238 7 238 10 78 1 . 238 10 238 11 18446744073709551615 4 Type 238 11 238 15 7 2 == 238 16 238 18 18446744073709551615 4 tmp2 238 19 238 23 79 1 . 238 23 238 24 18446744073709551615 4 Type 238 24 238 28 7 1 ) 238 28 238 29 18446744073709551615 1 { 238 30 238 31 18446744073709551615 2 if 239 5 239 7 18446744073709551615 1 ( 239 8 239 9 18446744073709551615 3 tmp 239 9 239 12 78 1 . 239 12 239 13 18446744073709551615 4 Type 239 13 239 17 7 2 == 239 18 239 20 18446744073709551615 11 char_string 239 21 239 32 5 1 ) 239 32 239 33 18446744073709551615 1 { 239 34 239 35 18446744073709551615 2 if 240 7 240 9 18446744073709551615 1 ( 240 10 240 11 18446744073709551615 3 tmp 240 11 240 14 78 1 . 240 14 240 15 18446744073709551615 11 char_string 240 15 240 26 18446744073709551615 2 == 240 27 240 29 18446744073709551615 4 tmp2 240 30 240 34 79 1 . 240 34 240 35 18446744073709551615 11 char_string 240 35 240 46 18446744073709551615 1 ) 240 46 240 47 18446744073709551615 1 { 240 48 240 49 18446744073709551615 4 temp 241 9 241 13 75 1 = 241 14 241 15 18446744073709551615 4 true 241 16 241 20 18446744073709551615 1 ; 241 20 241 21 18446744073709551615 1 } 242 7 242 8 18446744073709551615 1 } 243 5 243 6 18446744073709551615 2 if 244 5 244 7 18446744073709551615 1 ( 244 8 244 9 18446744073709551615 3 tmp 244 9 244 12 78 1 . 244 12 244 13 18446744073709551615 4 Type 244 13 244 17 7 2 == 244 18 244 20 18446744073709551615 6 number 244 21 244 27 4 1 ) 244 27 244 28 18446744073709551615 1 { 244 29 244 30 18446744073709551615 2 if 245 7 245 9 18446744073709551615 1 ( 245 10 245 11 18446744073709551615 3 tmp 245 11 245 14 78 1 . 245 14 245 15 18446744073709551615 6 number 245 15 245 21 8 2 == 245 22 245 24 18446744073709551615 4 tmp2 245 25 245 29 79 1 . 245 29 245 30 18446744073709551615 6 number 245 30 245 36 8 1 ) 245 36 245 37 18446744073709551615 1 { 245 38 245 39 18446744073709551615 4 temp 246 9 246 13 75 1 = 246 14 246 15 18446744073709551615 4 true 246 16 246 20 18446744073709551615 1 ; 246 20 246 21 18446744073709551615 1 } 247 7 247 8 18446744073709551615 1 } 248 5 248 6 18446744073709551615 1 } 249 3 249 4 18446744073709551615 4 else 249 5 249 9 18446744073709551615 1 { 249 10 249 11 18446744073709551615 4 temp 250 5 250 9 75 1 = 250 10 250 11 18446744073709551615 5 false 250 12 250 17 18446744073709551615 1 ; 250 17 250 18 18446744073709551615 1 } 251 3 251 4 18446744073709551615 12 interpret_if 252 3 252 15 26 1 . 252 15 252 16 80 9 push_back 252 16 252 25 80 1 ( 252 25 252 26 80 4 temp 252 26 252 30 75 1 ) 252 30 252 31 80 1 ; 252 31 252 32 18446744073709551615 6 return 253 3 253 9 18446744073709551615 1 0 253 10 253 11 18446744073709551615 1 ; 253 11 253 12 18446744073709551615 1 } 254 1 254 2 18446744073709551615 3 int 255 1 255 4 18446744073709551615 11 SmallerThan 255 5 255 16 81 1 ( 255 16 255 17 81 1 ) 255 17 255 18 81 1 { 255 19 255 20 18446744073709551615 2 if 256 3 256 5 18446744073709551615 1 ( 256 6 256 7 18446744073709551615 5 Stack 256 7 256 12 18446744073709551615 1 . 256 12 256 13 18446744073709551615 4 size 256 13 256 17 18446744073709551615 1 ( 256 17 256 18 18446744073709551615 1 ) 256 18 256 19 18446744073709551615 2 == 256 20 256 22 18446744073709551615 1 0 256 23 256 24 18446744073709551615 1 ) 256 24 256 25 18446744073709551615 1 { 256 26 256 27 18446744073709551615 6 return 257 5 257 11 18446744073709551615 1 2 257 12 257 13 18446744073709551615 1 ; 257 13 257 14 18446744073709551615 1 } 258 3 258 4 18446744073709551615 2 if 259 3 259 5 18446744073709551615 1 ( 259 6 259 7 18446744073709551615 5 Stack 259 7 259 12 18446744073709551615 1 . 259 12 259 13 18446744073709551615 4 size 259 13 259 17 18446744073709551615 1 ( 259 17 259 18 18446744073709551615 1 ) 259 18 259 19 18446744073709551615 2 <= 259 20 259 22 18446744073709551615 1 1 259 23 259 24 18446744073709551615 1 ) 259 24 259 25 18446744073709551615 1 { 259 26 259 27 18446744073709551615 6 return 260 5 260 11 18446744073709551615 1 3 260 12 260 13 18446744073709551615 1 ; 260 13 260 14 18446744073709551615 1 } 261 3 261 4 18446744073709551615 4 bool 262 3 262 7 18446744073709551615 4 temp 262 8 262 12 82 1 = 262 13 262 14 18446744073709551615 5 false 262 15 262 20 18446744073709551615 1 ; 262 20 262 21 18446744073709551615 3 int 263 3 263 6 18446744073709551615 3 len 263 7 263 10 83 1 = 263 11 263 12 18446744073709551615 5 Stack 263 13 263 18 18446744073709551615 1 . 263 18 263 19 18446744073709551615 4 size 263 19 263 23 18446744073709551615 1 ( 263 23 263 24 18446744073709551615 1 ) 263 24 263 25 18446744073709551615 1 - 263 26 263 27 18446744073709551615 1 1 263 28 263 29 18446744073709551615 1 ; 263 29 263 30 18446744073709551615 3 int 264 3 264 6 18446744073709551615 4 len2 264 7 264 11 84 1 = 264 12 264 13 18446744073709551615 3 len 264 14 264 17 83 1 - 264 18 264 19 18446744073709551615 1 1 264 20 264 21 18446744073709551615 1 ; 264 21 264 22 18446744073709551615 13 StackVariable 265 3 265 16 6 3 tmp 265 17 265 20 85 1 = 265 21 265 22 18446744073709551615 5 Stack 265 23 265 28 18446744073709551615 1 [ 265 28 265 29 18446744073709551615 3 len 265 29 265 32 18446744073709551615 1 ] 265 32 265 33 18446744073709551615 1 ; 265 33 265 34 18446744073709551615 13 StackVariable 266 3 266 16 6 4 tmp2 266 17 266 21 86 1 = 266 22 266 23 18446744073709551615 5 Stack 266 24 266 29 18446744073709551615 1 [ 266 29 266 30 18446744073709551615 4 len2 266 30 266 34 18446744073709551615 1 ] 266 34 266 35 18446744073709551615 1 ; 266 35 266 36 18446744073709551615 2 if 267 3 267 5 18446744073709551615 1 ( 267 6 267 7 18446744073709551615 3 tmp 267 7 267 10 85 1 . 267 10 267 11 18446744073709551615 4 Type 267 11 267 15 7 2 == 267 16 267 18 18446744073709551615 4 tmp2 267 19 267 23 86 1 . 267 23 267 24 18446744073709551615 4 Type 267 24 267 28 7 1 ) 267 28 267 29 18446744073709551615 1 { 267 30 267 31 18446744073709551615 2 if 268 5 268 7 18446744073709551615 1 ( 268 8 268 9 18446744073709551615 3 tmp 268 9 268 12 85 1 . 268 12 268 13 18446744073709551615 4 Type 268 13 268 17 7 2 == 268 18 268 20 18446744073709551615 11 char_string 268 21 268 32 5 1 ) 268 32 268 33 18446744073709551615 1 { 268 34 268 35 18446744073709551615 3 int 269 7 269 10 18446744073709551615 1 i 269 11 269 12 87 1 = 269 13 269 14 18446744073709551615 1 0 269 15 269 16 18446744073709551615 1 ; 269 16 269 17 18446744073709551615 3 int 270 7 270 10 18446744073709551615 1 j 270 11 270 12 88 1 = 270 13 270 14 18446744073709551615 1 0 270 15 270 16 18446744073709551615 1 ; 270 16 270 17 18446744073709551615 1 i 271 7 271 8 87 1 = 271 9 271 10 18446744073709551615 3 tmp 271 11 271 14 85 1 . 271 14 271 15 18446744073709551615 11 char_string 271 15 271 26 18446744073709551615 1 . 271 26 271 27 18446744073709551615 6 length 271 27 271 33 18446744073709551615 1 ( 271 33 271 34 18446744073709551615 1 ) 271 34 271 35 18446744073709551615 1 ; 271 35 271 36 18446744073709551615 1 j 272 7 272 8 88 1 = 272 9 272 10 18446744073709551615 4 tmp2 272 11 272 15 86 1 . 272 15 272 16 18446744073709551615 11 char_string 272 16 272 27 18446744073709551615 1 . 272 27 272 28 18446744073709551615 6 length 272 28 272 34 18446744073709551615 1 ( 272 34 272 35 18446744073709551615 1 ) 272 35 272 36 18446744073709551615 1 ; 272 36 272 37 18446744073709551615 2 if 273 7 273 9 18446744073709551615 1 ( 273 10 273 11 18446744073709551615 1 i 273 11 273 12 87 1 < 273 13 273 14 18446744073709551615 1 j 273 15 273 16 88 1 ) 273 16 273 17 18446744073709551615 1 { 273 18 273 19 18446744073709551615 4 temp 274 9 274 13 82 1 = 274 14 274 15 18446744073709551615 4 true 274 16 274 20 18446744073709551615 1 ; 274 20 274 21 18446744073709551615 1 } 275 7 275 8 18446744073709551615 1 } 276 5 276 6 18446744073709551615 2 if 277 5 277 7 18446744073709551615 1 ( 277 8 277 9 18446744073709551615 3 tmp 277 9 277 12 85 1 . 277 12 277 13 18446744073709551615 4 Type 277 13 277 17 7 2 == 277 18 277 20 18446744073709551615 6 number 277 21 277 27 4 2 && 277 28 277 30 18446744073709551615 4 tmp2 277 31 277 35 86 1 . 277 35 277 36 18446744073709551615 4 Type 277 36 277 40 7 2 == 277 41 277 43 18446744073709551615 6 number 277 44 277 50 4 1 ) 277 50 277 51 18446744073709551615 1 { 277 52 277 53 18446744073709551615 2 if 278 7 278 9 18446744073709551615 1 ( 278 10 278 11 18446744073709551615 3 tmp 278 11 278 14 85 1 . 278 14 278 15 18446744073709551615 6 number 278 15 278 21 8 1 < 278 22 278 23 18446744073709551615 4 tmp2 278 24 278 28 86 1 . 278 28 278 29 18446744073709551615 6 number 278 29 278 35 8 1 ) 278 35 278 36 18446744073709551615 1 { 278 37 278 38 18446744073709551615 4 temp 279 9 279 13 82 1 = 279 14 279 15 18446744073709551615 4 true 279 16 279 20 18446744073709551615 1 ; 279 20 279 21 18446744073709551615 1 } 280 7 280 8 18446744073709551615 1 } 281 5 281 6 18446744073709551615 1 } 282 3 282 4 18446744073709551615 4 else 282 5 282 9 18446744073709551615 1 { 282 10 282 11 18446744073709551615 4 temp 283 5 283 9 82 1 = 283 10 283 11 18446744073709551615 5 false 283 12 283 17 18446744073709551615 1 ; 283 17 283 18 18446744073709551615 1 } 284 3 284 4 18446744073709551615 12 interpret_if 285 3 285 15 26 1 . 285 15 285 16 80 9 push_back 285 16 285 25 80 1 ( 285 25 285 26 80 4 temp 285 26 285 30 82 1 ) 285 30 285 31 80 1 ; 285 31 285 32 18446744073709551615 6 return 286 3 286 9 18446744073709551615 1 0 286 10 286 11 18446744073709551615 1 ; 286 11 286 12 18446744073709551615 1 } 287 1 287 2 18446744073709551615 3 int 288 1 288 4 18446744073709551615 11 GreaterThan 288 5 288 16 89 1 ( 288 16 288 17 89 1 ) 288 17 288 18 89 1 { 288 19 288 20 18446744073709551615 2 if 289 3 289 5 18446744073709551615 1 ( 289 6 289 7 18446744073709551615 5 Stack 289 7 289 12 18446744073709551615 1 . 289 12 289 13 18446744073709551615 4 size 289 13 289 17 18446744073709551615 1 ( 289 17 289 18 18446744073709551615 1 ) 289 18 289 19 18446744073709551615 2 == 289 20 289 22 18446744073709551615 1 0 289 23 289 24 18446744073709551615 1 ) 289 24 289 25 18446744073709551615 1 { 289 26 289 27 18446744073709551615 6 return 290 5 290 11 18446744073709551615 1 2 290 12 290 13 18446744073709551615 1 ; 290 13 290 14 18446744073709551615 1 } 291 3 291 4 18446744073709551615 2 if 292 3 292 5 18446744073709551615 1 ( 292 6 292 7 18446744073709551615 5 Stack 292 7 292 12 18446744073709551615 1 . 292 12 292 13 18446744073709551615 4 size 292 13 292 17 18446744073709551615 1 ( 292 17 292 18 18446744073709551615 1 ) 292 18 292 19 18446744073709551615 2 <= 292 20 292 22 18446744073709551615 1 1 292 23 292 24 18446744073709551615 1 ) 292 24 292 25 18446744073709551615 1 { 292 26 292 27 18446744073709551615 6 return 293 5 293 11 18446744073709551615 1 3 293 12 293 13 18446744073709551615 1 ; 293 13 293 14 18446744073709551615 1 } 294 3 294 4 18446744073709551615 4 bool 295 3 295 7 18446744073709551615 4 temp 295 8 295 12 90 1 = 295 13 295 14 18446744073709551615 5 false 295 15 295 20 18446744073709551615 1 ; 295 20 295 21 18446744073709551615 3 int 296 3 296 6 18446744073709551615 3 len 296 7 296 10 91 1 = 296 11 296 12 18446744073709551615 5 Stack 296 13 296 18 18446744073709551615 1 . 296 18 296 19 18446744073709551615 4 size 296 19 296 23 18446744073709551615 1 ( 296 23 296 24 18446744073709551615 1 ) 296 24 296 25 18446744073709551615 1 - 296 26 296 27 18446744073709551615 1 1 296 28 296 29 18446744073709551615 1 ; 296 29 296 30 18446744073709551615 3 int 297 3 297 6 18446744073709551615 4 len2 297 7 297 11 92 1 = 297 12 297 13 18446744073709551615 3 len 297 14 297 17 91 1 - 297 18 297 19 18446744073709551615 1 1 297 20 297 21 18446744073709551615 1 ; 297 21 297 22 18446744073709551615 13 StackVariable 298 3 298 16 6 3 tmp 298 17 298 20 93 1 = 298 21 298 22 18446744073709551615 5 Stack 298 23 298 28 18446744073709551615 1 [ 298 28 298 29 18446744073709551615 3 len 298 29 298 32 18446744073709551615 1 ] 298 32 298 33 18446744073709551615 1 ; 298 33 298 34 18446744073709551615 13 StackVariable 299 3 299 16 6 4 tmp2 299 17 299 21 94 1 = 299 22 299 23 18446744073709551615 5 Stack 299 24 299 29 18446744073709551615 1 [ 299 29 299 30 18446744073709551615 4 len2 299 30 299 34 18446744073709551615 1 ] 299 34 299 35 18446744073709551615 1 ; 299 35 299 36 18446744073709551615 2 if 300 3 300 5 18446744073709551615 1 ( 300 6 300 7 18446744073709551615 3 tmp 300 7 300 10 93 1 . 300 10 300 11 18446744073709551615 4 Type 300 11 300 15 7 2 == 300 16 300 18 18446744073709551615 4 tmp2 300 19 300 23 94 1 . 300 23 300 24 18446744073709551615 4 Type 300 24 300 28 7 1 ) 300 28 300 29 18446744073709551615 1 { 300 30 300 31 18446744073709551615 2 if 301 5 301 7 18446744073709551615 1 ( 301 8 301 9 18446744073709551615 3 tmp 301 9 301 12 93 1 . 301 12 301 13 18446744073709551615 4 Type 301 13 301 17 7 2 == 301 18 301 20 18446744073709551615 11 char_string 301 21 301 32 5 1 ) 301 32 301 33 18446744073709551615 1 { 301 34 301 35 18446744073709551615 3 int 302 7 302 10 18446744073709551615 1 i 302 11 302 12 95 1 = 302 13 302 14 18446744073709551615 1 0 302 15 302 16 18446744073709551615 1 ; 302 16 302 17 18446744073709551615 3 int 303 7 303 10 18446744073709551615 1 j 303 11 303 12 96 1 = 303 13 303 14 18446744073709551615 1 0 303 15 303 16 18446744073709551615 1 ; 303 16 303 17 18446744073709551615 1 i 304 7 304 8 95 1 = 304 9 304 10 18446744073709551615 3 tmp 304 11 304 14 93 1 . 304 14 304 15 18446744073709551615 11 char_string 304 15 304 26 18446744073709551615 1 . 304 26 304 27 18446744073709551615 6 length 304 27 304 33 18446744073709551615 1 ( 304 33 304 34 18446744073709551615 1 ) 304 34 304 35 18446744073709551615 1 ; 304 35 304 36 18446744073709551615 1 j 305 7 305 8 96 1 = 305 9 305 10 18446744073709551615 4 tmp2 305 11 305 15 94 1 . 305 15 305 16 18446744073709551615 11 char_string 305 16 305 27 18446744073709551615 1 . 305 27 305 28 18446744073709551615 6 length 305 28 305 34 18446744073709551615 1 ( 305 34 305 35 18446744073709551615 1 ) 305 35 305 36 18446744073709551615 1 ; 305 36 305 37 18446744073709551615 2 if 306 7 306 9 18446744073709551615 1 ( 306 10 306 11 18446744073709551615 1 i 306 11 306 12 95 1 > 306 13 306 14 18446744073709551615 1 j 306 15 306 16 96 1 ) 306 16 306 17 18446744073709551615 1 { 306 18 306 19 18446744073709551615 4 temp 307 9 307 13 90 1 = 307 14 307 15 18446744073709551615 4 true 307 16 307 20 18446744073709551615 1 ; 307 20 307 21 18446744073709551615 1 } 308 7 308 8 18446744073709551615 1 } 309 5 309 6 18446744073709551615 2 if 311 5 311 7 18446744073709551615 1 ( 311 8 311 9 18446744073709551615 3 tmp 311 9 311 12 93 1 . 311 12 311 13 18446744073709551615 4 Type 311 13 311 17 7 2 == 311 18 311 20 18446744073709551615 6 number 311 21 311 27 4 2 && 311 28 311 30 18446744073709551615 4 tmp2 311 31 311 35 94 1 . 311 35 311 36 18446744073709551615 4 Type 311 36 311 40 7 2 == 311 41 311 43 18446744073709551615 6 number 311 44 311 50 4 1 ) 311 50 311 51 18446744073709551615 1 { 311 52 311 53 18446744073709551615 2 if 312 7 312 9 18446744073709551615 1 ( 312 10 312 11 18446744073709551615 3 tmp 312 11 312 14 93 1 . 312 14 312 15 18446744073709551615 6 number 312 15 312 21 8 1 > 312 22 312 23 18446744073709551615 4 tmp2 312 24 312 28 94 1 . 312 28 312 29 18446744073709551615 6 number 312 29 312 35 8 1 ) 312 35 312 36 18446744073709551615 1 { 312 37 312 38 18446744073709551615 4 temp 313 9 313 13 90 1 = 313 14 313 15 18446744073709551615 4 true 313 16 313 20 18446744073709551615 1 ; 313 20 313 21 18446744073709551615 1 } 314 7 314 8 18446744073709551615 1 } 315 5 315 6 18446744073709551615 1 } 316 3 316 4 18446744073709551615 4 else 316 5 316 9 18446744073709551615 1 { 316 10 316 11 18446744073709551615 4 temp 317 5 317 9 90 1 = 317 10 317 11 18446744073709551615 5 false 317 12 317 17 18446744073709551615 1 ; 317 17 317 18 18446744073709551615 1 } 318 3 318 4 18446744073709551615 12 interpret_if 319 3 319 15 26 1 . 319 15 319 16 80 9 push_back 319 16 319 25 80 1 ( 319 25 319 26 80 4 temp 319 26 319 30 90 1 ) 319 30 319 31 80 1 ; 319 31 319 32 18446744073709551615 6 return 320 3 320 9 18446744073709551615 1 0 320 10 320 11 18446744073709551615 1 ; 320 11 320 12 18446744073709551615 1 } 321 1 321 2 18446744073709551615 3 int 322 1 322 4 18446744073709551615 3 Add 322 5 322 8 97 1 ( 322 8 322 9 97 1 ) 322 9 322 10 97 1 { 322 11 322 12 18446744073709551615 2 if 323 3 323 5 18446744073709551615 1 ( 323 6 323 7 18446744073709551615 5 Stack 323 7 323 12 18446744073709551615 1 . 323 12 323 13 18446744073709551615 4 size 323 13 323 17 18446744073709551615 1 ( 323 17 323 18 18446744073709551615 1 ) 323 18 323 19 18446744073709551615 2 == 323 20 323 22 18446744073709551615 1 0 323 23 323 24 18446744073709551615 1 ) 323 24 323 25 18446744073709551615 1 { 323 26 323 27 18446744073709551615 6 return 324 5 324 11 18446744073709551615 1 2 324 12 324 13 18446744073709551615 1 ; 324 13 324 14 18446744073709551615 1 } 325 3 325 4 18446744073709551615 2 if 326 3 326 5 18446744073709551615 1 ( 326 6 326 7 18446744073709551615 5 Stack 326 7 326 12 18446744073709551615 1 . 326 12 326 13 18446744073709551615 4 size 326 13 326 17 18446744073709551615 1 ( 326 17 326 18 18446744073709551615 1 ) 326 18 326 19 18446744073709551615 2 <= 326 20 326 22 18446744073709551615 1 1 326 23 326 24 18446744073709551615 1 ) 326 24 326 25 18446744073709551615 1 { 326 26 326 27 18446744073709551615 6 return 327 5 327 11 18446744073709551615 1 3 327 12 327 13 18446744073709551615 1 ; 327 13 327 14 18446744073709551615 1 } 328 3 328 4 18446744073709551615 3 int 329 3 329 6 18446744073709551615 3 len 329 7 329 10 98 1 = 329 11 329 12 18446744073709551615 5 Stack 329 13 329 18 18446744073709551615 1 . 329 18 329 19 18446744073709551615 4 size 329 19 329 23 18446744073709551615 1 ( 329 23 329 24 18446744073709551615 1 ) 329 24 329 25 18446744073709551615 1 - 329 26 329 27 18446744073709551615 1 1 329 28 329 29 18446744073709551615 1 ; 329 29 329 30 18446744073709551615 3 int 330 3 330 6 18446744073709551615 4 len2 330 7 330 11 99 1 = 330 12 330 13 18446744073709551615 3 len 330 14 330 17 98 1 - 330 18 330 19 18446744073709551615 1 1 330 20 330 21 18446744073709551615 1 ; 330 21 330 22 18446744073709551615 13 StackVariable 331 3 331 16 6 3 tmp 331 17 331 20 100 1 = 331 21 331 22 18446744073709551615 5 Stack 331 23 331 28 18446744073709551615 1 [ 331 28 331 29 18446744073709551615 3 len 331 29 331 32 18446744073709551615 1 ] 331 32 331 33 18446744073709551615 1 ; 331 33 331 34 18446744073709551615 13 StackVariable 332 3 332 16 6 4 tmp2 332 17 332 21 101 1 = 332 22 332 23 18446744073709551615 5 Stack 332 24 332 29 18446744073709551615 1 [ 332 29 332 30 18446744073709551615 4 len2 332 30 332 34 18446744073709551615 1 ] 332 34 332 35 18446744073709551615 1 ; 332 35 332 36 18446744073709551615 2 if 333 3 333 5 18446744073709551615 1 ( 333 6 333 7 18446744073709551615 3 tmp 333 7 333 10 100 1 . 333 10 333 11 18446744073709551615 4 Type 333 11 333 15 7 2 == 333 16 333 18 18446744073709551615 11 char_string 333 19 333 30 5 2 || 333 31 333 33 18446744073709551615 4 tmp2 333 34 333 38 101 1 . 333 38 333 39 18446744073709551615 4 Type 333 39 333 43 7 2 == 333 44 333 46 18446744073709551615 11 char_string 333 47 333 58 5 1 ) 333 58 333 59 18446744073709551615 1 { 333 60 333 61 18446744073709551615 6 return 334 5 334 11 18446744073709551615 2 21 334 12 334 14 18446744073709551615 1 ; 334 14 334 15 18446744073709551615 1 } 335 3 335 4 18446744073709551615 3 int 336 3 336 6 18446744073709551615 3 out 336 7 336 10 102 1 = 336 11 336 12 18446744073709551615 1 0 336 13 336 14 18446744073709551615 1 ; 336 14 336 15 18446744073709551615 3 out 337 3 337 6 102 1 = 337 7 337 8 18446744073709551615 4 tmp2 337 9 337 13 101 1 . 337 13 337 14 18446744073709551615 6 number 337 14 337 20 8 1 + 337 21 337 22 18446744073709551615 3 tmp 337 23 337 26 100 1 . 337 26 337 27 18446744073709551615 6 number 337 27 337 33 8 1 ; 337 33 337 34 18446744073709551615 13 StackVariable 338 3 338 16 6 4 temp 338 17 338 21 103 1 ; 338 21 338 22 18446744073709551615 4 temp 339 3 339 7 103 1 . 339 7 339 8 18446744073709551615 4 Type 339 8 339 12 7 1 = 339 13 339 14 18446744073709551615 6 number 339 15 339 21 4 1 ; 339 21 339 22 18446744073709551615 4 temp 340 3 340 7 103 1 . 340 7 340 8 18446744073709551615 6 number 340 8 340 14 8 1 = 340 15 340 16 18446744073709551615 3 out 340 17 340 20 102 1 ; 340 20 340 21 18446744073709551615 5 Stack 341 3 341 8 18446744073709551615 1 . 341 8 341 9 18446744073709551615 8 pop_back 341 9 341 17 18446744073709551615 1 ( 341 17 341 18 18446744073709551615 1 ) 341 18 341 19 18446744073709551615 1 ; 341 19 341 20 18446744073709551615 5 Stack 342 3 342 8 18446744073709551615 1 . 342 8 342 9 18446744073709551615 8 pop_back 342 9 342 17 18446744073709551615 1 ( 342 17 342 18 18446744073709551615 1 ) 342 18 342 19 18446744073709551615 1 ; 342 19 342 20 18446744073709551615 10 PutOnStack 343 3 343 13 38 1 ( 343 13 343 14 38 4 temp 343 14 343 18 103 1 ) 343 18 343 19 38 1 ; 343 19 343 20 18446744073709551615 6 return 344 3 344 9 18446744073709551615 1 0 344 10 344 11 18446744073709551615 1 ; 344 11 344 12 18446744073709551615 1 } 345 1 345 2 18446744073709551615 3 int 346 1 346 4 18446744073709551615 6 Divide 346 5 346 11 104 1 ( 346 11 346 12 104 1 ) 346 12 346 13 104 1 { 346 14 346 15 18446744073709551615 2 if 347 3 347 5 18446744073709551615 1 ( 347 6 347 7 18446744073709551615 5 Stack 347 7 347 12 18446744073709551615 1 . 347 12 347 13 18446744073709551615 4 size 347 13 347 17 18446744073709551615 1 ( 347 17 347 18 18446744073709551615 1 ) 347 18 347 19 18446744073709551615 2 == 347 20 347 22 18446744073709551615 1 0 347 23 347 24 18446744073709551615 1 ) 347 24 347 25 18446744073709551615 1 { 347 26 347 27 18446744073709551615 6 return 348 5 348 11 18446744073709551615 1 2 348 12 348 13 18446744073709551615 1 ; 348 13 348 14 18446744073709551615 1 } 349 3 349 4 18446744073709551615 2 if 350 3 350 5 18446744073709551615 1 ( 350 6 350 7 18446744073709551615 5 Stack 350 7 350 12 18446744073709551615 1 . 350 12 350 13 18446744073709551615 4 size 350 13 350 17 18446744073709551615 1 ( 350 17 350 18 18446744073709551615 1 ) 350 18 350 19 18446744073709551615 2 <= 350 20 350 22 18446744073709551615 1 1 350 23 350 24 18446744073709551615 1 ) 350 24 350 25 18446744073709551615 1 { 350 26 350 27 18446744073709551615 6 return 351 5 351 11 18446744073709551615 1 3 351 12 351 13 18446744073709551615 1 ; 351 13 351 14 18446744073709551615 1 } 352 3 352 4 18446744073709551615 3 int 353 3 353 6 18446744073709551615 3 len 353 7 353 10 105 1 = 353 11 353 12 18446744073709551615 5 Stack 353 13 353 18 18446744073709551615 1 . 353 18 353 19 18446744073709551615 4 size 353 19 353 23 18446744073709551615 1 ( 353 23 353 24 18446744073709551615 1 ) 353 24 353 25 18446744073709551615 1 - 353 26 353 27 18446744073709551615 1 1 353 28 353 29 18446744073709551615 1 ; 353 29 353 30 18446744073709551615 3 int 354 3 354 6 18446744073709551615 4 len2 354 7 354 11 106 1 = 354 12 354 13 18446744073709551615 3 len 354 14 354 17 105 1 - 354 18 354 19 18446744073709551615 1 1 354 20 354 21 18446744073709551615 1 ; 354 21 354 22 18446744073709551615 13 StackVariable 355 3 355 16 6 3 tmp 355 17 355 20 107 1 = 355 21 355 22 18446744073709551615 5 Stack 355 23 355 28 18446744073709551615 1 [ 355 28 355 29 18446744073709551615 3 len 355 29 355 32 18446744073709551615 1 ] 355 32 355 33 18446744073709551615 1 ; 355 33 355 34 18446744073709551615 13 StackVariable 356 3 356 16 6 4 tmp2 356 17 356 21 108 1 = 356 22 356 23 18446744073709551615 5 Stack 356 24 356 29 18446744073709551615 1 [ 356 29 356 30 18446744073709551615 4 len2 356 30 356 34 18446744073709551615 1 ] 356 34 356 35 18446744073709551615 1 ; 356 35 356 36 18446744073709551615 2 if 357 3 357 5 18446744073709551615 1 ( 357 6 357 7 18446744073709551615 3 tmp 357 7 357 10 107 1 . 357 10 357 11 18446744073709551615 4 Type 357 11 357 15 7 2 == 357 16 357 18 18446744073709551615 11 char_string 357 19 357 30 5 2 || 357 31 357 33 18446744073709551615 4 tmp2 357 34 357 38 108 1 . 357 38 357 39 18446744073709551615 4 Type 357 39 357 43 7 2 == 357 44 357 46 18446744073709551615 11 char_string 357 47 357 58 5 1 ) 357 58 357 59 18446744073709551615 1 { 357 60 357 61 18446744073709551615 6 return 358 5 358 11 18446744073709551615 2 21 358 12 358 14 18446744073709551615 1 ; 358 14 358 15 18446744073709551615 1 } 359 3 359 4 18446744073709551615 2 if 360 3 360 5 18446744073709551615 1 ( 360 6 360 7 18446744073709551615 3 tmp 360 7 360 10 107 1 . 360 10 360 11 18446744073709551615 6 number 360 11 360 17 8 2 == 360 18 360 20 18446744073709551615 1 0 360 21 360 22 18446744073709551615 1 ) 360 22 360 23 18446744073709551615 1 { 360 24 360 25 18446744073709551615 6 return 361 5 361 11 18446744073709551615 2 22 361 12 361 14 18446744073709551615 1 ; 361 14 361 15 18446744073709551615 1 } 362 3 362 4 18446744073709551615 3 int 363 3 363 6 18446744073709551615 3 out 363 7 363 10 109 1 = 363 11 363 12 18446744073709551615 1 0 363 13 363 14 18446744073709551615 1 ; 363 14 363 15 18446744073709551615 3 out 364 3 364 6 109 1 = 364 7 364 8 18446744073709551615 4 tmp2 364 9 364 13 108 1 . 364 13 364 14 18446744073709551615 6 number 364 14 364 20 8 1 / 364 21 364 22 18446744073709551615 3 tmp 364 23 364 26 107 1 . 364 26 364 27 18446744073709551615 6 number 364 27 364 33 8 1 ; 364 33 364 34 18446744073709551615 13 StackVariable 365 3 365 16 6 4 temp 365 17 365 21 110 1 ; 365 21 365 22 18446744073709551615 4 temp 366 3 366 7 110 1 . 366 7 366 8 18446744073709551615 4 Type 366 8 366 12 7 1 = 366 13 366 14 18446744073709551615 6 number 366 15 366 21 4 1 ; 366 21 366 22 18446744073709551615 4 temp 367 3 367 7 110 1 . 367 7 367 8 18446744073709551615 6 number 367 8 367 14 8 1 = 367 15 367 16 18446744073709551615 3 out 367 17 367 20 109 1 ; 367 20 367 21 18446744073709551615 5 Stack 368 3 368 8 18446744073709551615 1 . 368 8 368 9 18446744073709551615 8 pop_back 368 9 368 17 18446744073709551615 1 ( 368 17 368 18 18446744073709551615 1 ) 368 18 368 19 18446744073709551615 1 ; 368 19 368 20 18446744073709551615 5 Stack 369 3 369 8 18446744073709551615 1 . 369 8 369 9 18446744073709551615 8 pop_back 369 9 369 17 18446744073709551615 1 ( 369 17 369 18 18446744073709551615 1 ) 369 18 369 19 18446744073709551615 1 ; 369 19 369 20 18446744073709551615 10 PutOnStack 370 3 370 13 38 1 ( 370 13 370 14 38 4 temp 370 14 370 18 110 1 ) 370 18 370 19 38 1 ; 370 19 370 20 18446744073709551615 6 return 371 3 371 9 18446744073709551615 1 0 371 10 371 11 18446744073709551615 1 ; 371 11 371 12 18446744073709551615 1 } 372 1 372 2 18446744073709551615 3 int 373 1 373 4 18446744073709551615 6 Modulo 373 5 373 11 111 1 ( 373 11 373 12 111 1 ) 373 12 373 13 111 1 { 373 14 373 15 18446744073709551615 2 if 374 3 374 5 18446744073709551615 1 ( 374 6 374 7 18446744073709551615 5 Stack 374 7 374 12 18446744073709551615 1 . 374 12 374 13 18446744073709551615 4 size 374 13 374 17 18446744073709551615 1 ( 374 17 374 18 18446744073709551615 1 ) 374 18 374 19 18446744073709551615 2 == 374 20 374 22 18446744073709551615 1 0 374 23 374 24 18446744073709551615 1 ) 374 24 374 25 18446744073709551615 1 { 374 26 374 27 18446744073709551615 6 return 375 5 375 11 18446744073709551615 1 2 375 12 375 13 18446744073709551615 1 ; 375 13 375 14 18446744073709551615 1 } 376 3 376 4 18446744073709551615 2 if 377 3 377 5 18446744073709551615 1 ( 377 6 377 7 18446744073709551615 5 Stack 377 7 377 12 18446744073709551615 1 . 377 12 377 13 18446744073709551615 4 size 377 13 377 17 18446744073709551615 1 ( 377 17 377 18 18446744073709551615 1 ) 377 18 377 19 18446744073709551615 2 <= 377 20 377 22 18446744073709551615 1 1 377 23 377 24 18446744073709551615 1 ) 377 24 377 25 18446744073709551615 1 { 377 26 377 27 18446744073709551615 6 return 378 5 378 11 18446744073709551615 1 3 378 12 378 13 18446744073709551615 1 ; 378 13 378 14 18446744073709551615 1 } 379 3 379 4 18446744073709551615 3 int 380 3 380 6 18446744073709551615 3 len 380 7 380 10 112 1 = 380 11 380 12 18446744073709551615 5 Stack 380 13 380 18 18446744073709551615 1 . 380 18 380 19 18446744073709551615 4 size 380 19 380 23 18446744073709551615 1 ( 380 23 380 24 18446744073709551615 1 ) 380 24 380 25 18446744073709551615 1 - 380 26 380 27 18446744073709551615 1 1 380 28 380 29 18446744073709551615 1 ; 380 29 380 30 18446744073709551615 3 int 381 3 381 6 18446744073709551615 4 len2 381 7 381 11 113 1 = 381 12 381 13 18446744073709551615 3 len 381 14 381 17 112 1 - 381 18 381 19 18446744073709551615 1 1 381 20 381 21 18446744073709551615 1 ; 381 21 381 22 18446744073709551615 13 StackVariable 382 3 382 16 6 3 tmp 382 17 382 20 114 1 = 382 21 382 22 18446744073709551615 5 Stack 382 23 382 28 18446744073709551615 1 [ 382 28 382 29 18446744073709551615 3 len 382 29 382 32 18446744073709551615 1 ] 382 32 382 33 18446744073709551615 1 ; 382 33 382 34 18446744073709551615 13 StackVariable 383 3 383 16 6 4 tmp2 383 17 383 21 115 1 = 383 22 383 23 18446744073709551615 5 Stack 383 24 383 29 18446744073709551615 1 [ 383 29 383 30 18446744073709551615 4 len2 383 30 383 34 18446744073709551615 1 ] 383 34 383 35 18446744073709551615 1 ; 383 35 383 36 18446744073709551615 2 if 384 3 384 5 18446744073709551615 1 ( 384 6 384 7 18446744073709551615 3 tmp 384 7 384 10 114 1 . 384 10 384 11 18446744073709551615 4 Type 384 11 384 15 7 2 == 384 16 384 18 18446744073709551615 11 char_string 384 19 384 30 5 2 || 384 31 384 33 18446744073709551615 4 tmp2 384 34 384 38 115 1 . 384 38 384 39 18446744073709551615 4 Type 384 39 384 43 7 2 == 384 44 384 46 18446744073709551615 11 char_string 384 47 384 58 5 1 ) 384 58 384 59 18446744073709551615 1 { 384 60 384 61 18446744073709551615 6 return 385 5 385 11 18446744073709551615 2 21 385 12 385 14 18446744073709551615 1 ; 385 14 385 15 18446744073709551615 1 } 386 3 386 4 18446744073709551615 3 int 387 3 387 6 18446744073709551615 3 out 387 7 387 10 116 1 = 387 11 387 12 18446744073709551615 1 0 387 13 387 14 18446744073709551615 1 ; 387 14 387 15 18446744073709551615 3 out 388 3 388 6 116 1 = 388 7 388 8 18446744073709551615 4 tmp2 388 9 388 13 115 1 . 388 13 388 14 18446744073709551615 6 number 388 14 388 20 8 1 % 388 21 388 22 18446744073709551615 3 tmp 388 23 388 26 114 1 . 388 26 388 27 18446744073709551615 6 number 388 27 388 33 8 1 ; 388 33 388 34 18446744073709551615 13 StackVariable 389 3 389 16 6 4 temp 389 17 389 21 117 1 ; 389 21 389 22 18446744073709551615 4 temp 390 3 390 7 117 1 . 390 7 390 8 18446744073709551615 4 Type 390 8 390 12 7 1 = 390 13 390 14 18446744073709551615 6 number 390 15 390 21 4 1 ; 390 21 390 22 18446744073709551615 4 temp 391 3 391 7 117 1 . 391 7 391 8 18446744073709551615 6 number 391 8 391 14 8 1 = 391 15 391 16 18446744073709551615 3 out 391 17 391 20 116 1 ; 391 20 391 21 18446744073709551615 5 Stack 392 3 392 8 18446744073709551615 1 . 392 8 392 9 18446744073709551615 8 pop_back 392 9 392 17 18446744073709551615 1 ( 392 17 392 18 18446744073709551615 1 ) 392 18 392 19 18446744073709551615 1 ; 392 19 392 20 18446744073709551615 5 Stack 393 3 393 8 18446744073709551615 1 . 393 8 393 9 18446744073709551615 8 pop_back 393 9 393 17 18446744073709551615 1 ( 393 17 393 18 18446744073709551615 1 ) 393 18 393 19 18446744073709551615 1 ; 393 19 393 20 18446744073709551615 10 PutOnStack 394 3 394 13 38 1 ( 394 13 394 14 38 4 temp 394 14 394 18 117 1 ) 394 18 394 19 38 1 ; 394 19 394 20 18446744073709551615 6 return 395 3 395 9 18446744073709551615 1 0 395 10 395 11 18446744073709551615 1 ; 395 11 395 12 18446744073709551615 1 } 396 1 396 2 18446744073709551615 3 int 397 1 397 4 18446744073709551615 9 Substract 397 5 397 14 118 1 ( 397 14 397 15 118 1 ) 397 15 397 16 118 1 { 397 17 397 18 18446744073709551615 2 if 398 3 398 5 18446744073709551615 1 ( 398 6 398 7 18446744073709551615 5 Stack 398 7 398 12 18446744073709551615 1 . 398 12 398 13 18446744073709551615 4 size 398 13 398 17 18446744073709551615 1 ( 398 17 398 18 18446744073709551615 1 ) 398 18 398 19 18446744073709551615 2 == 398 20 398 22 18446744073709551615 1 0 398 23 398 24 18446744073709551615 1 ) 398 24 398 25 18446744073709551615 1 { 398 26 398 27 18446744073709551615 6 return 399 5 399 11 18446744073709551615 1 2 399 12 399 13 18446744073709551615 1 ; 399 13 399 14 18446744073709551615 1 } 400 3 400 4 18446744073709551615 2 if 401 3 401 5 18446744073709551615 1 ( 401 6 401 7 18446744073709551615 5 Stack 401 7 401 12 18446744073709551615 1 . 401 12 401 13 18446744073709551615 4 size 401 13 401 17 18446744073709551615 1 ( 401 17 401 18 18446744073709551615 1 ) 401 18 401 19 18446744073709551615 2 <= 401 20 401 22 18446744073709551615 1 1 401 23 401 24 18446744073709551615 1 ) 401 24 401 25 18446744073709551615 1 { 401 26 401 27 18446744073709551615 6 return 402 5 402 11 18446744073709551615 1 3 402 12 402 13 18446744073709551615 1 ; 402 13 402 14 18446744073709551615 1 } 403 3 403 4 18446744073709551615 3 int 404 3 404 6 18446744073709551615 3 len 404 7 404 10 119 1 = 404 11 404 12 18446744073709551615 5 Stack 404 13 404 18 18446744073709551615 1 . 404 18 404 19 18446744073709551615 4 size 404 19 404 23 18446744073709551615 1 ( 404 23 404 24 18446744073709551615 1 ) 404 24 404 25 18446744073709551615 1 - 404 26 404 27 18446744073709551615 1 1 404 28 404 29 18446744073709551615 1 ; 404 29 404 30 18446744073709551615 3 int 405 3 405 6 18446744073709551615 4 len2 405 7 405 11 120 1 = 405 12 405 13 18446744073709551615 3 len 405 14 405 17 119 1 - 405 18 405 19 18446744073709551615 1 1 405 20 405 21 18446744073709551615 1 ; 405 21 405 22 18446744073709551615 13 StackVariable 406 3 406 16 6 3 tmp 406 17 406 20 121 1 = 406 21 406 22 18446744073709551615 5 Stack 406 23 406 28 18446744073709551615 1 [ 406 28 406 29 18446744073709551615 3 len 406 29 406 32 18446744073709551615 1 ] 406 32 406 33 18446744073709551615 1 ; 406 33 406 34 18446744073709551615 13 StackVariable 407 3 407 16 6 4 tmp2 407 17 407 21 122 1 = 407 22 407 23 18446744073709551615 5 Stack 407 24 407 29 18446744073709551615 1 [ 407 29 407 30 18446744073709551615 4 len2 407 30 407 34 18446744073709551615 1 ] 407 34 407 35 18446744073709551615 1 ; 407 35 407 36 18446744073709551615 2 if 408 3 408 5 18446744073709551615 1 ( 408 6 408 7 18446744073709551615 3 tmp 408 7 408 10 121 1 . 408 10 408 11 18446744073709551615 4 Type 408 11 408 15 7 2 == 408 16 408 18 18446744073709551615 11 char_string 408 19 408 30 5 2 || 408 31 408 33 18446744073709551615 4 tmp2 408 34 408 38 122 1 . 408 38 408 39 18446744073709551615 4 Type 408 39 408 43 7 2 == 408 44 408 46 18446744073709551615 11 char_string 408 47 408 58 5 1 ) 408 58 408 59 18446744073709551615 1 { 408 60 408 61 18446744073709551615 6 return 409 5 409 11 18446744073709551615 2 21 409 12 409 14 18446744073709551615 1 ; 409 14 409 15 18446744073709551615 1 } 410 3 410 4 18446744073709551615 3 int 411 3 411 6 18446744073709551615 3 out 411 7 411 10 123 1 = 411 11 411 12 18446744073709551615 1 0 411 13 411 14 18446744073709551615 1 ; 411 14 411 15 18446744073709551615 3 out 412 3 412 6 123 1 = 412 7 412 8 18446744073709551615 4 tmp2 412 9 412 13 122 1 . 412 13 412 14 18446744073709551615 6 number 412 14 412 20 8 1 - 412 21 412 22 18446744073709551615 3 tmp 412 23 412 26 121 1 . 412 26 412 27 18446744073709551615 6 number 412 27 412 33 8 1 ; 412 33 412 34 18446744073709551615 13 StackVariable 413 3 413 16 6 4 temp 413 17 413 21 124 1 ; 413 21 413 22 18446744073709551615 4 temp 414 3 414 7 124 1 . 414 7 414 8 18446744073709551615 4 Type 414 8 414 12 7 1 = 414 13 414 14 18446744073709551615 6 number 414 15 414 21 4 1 ; 414 21 414 22 18446744073709551615 4 temp 415 3 415 7 124 1 . 415 7 415 8 18446744073709551615 6 number 415 8 415 14 8 1 = 415 15 415 16 18446744073709551615 3 out 415 17 415 20 123 1 ; 415 20 415 21 18446744073709551615 5 Stack 416 3 416 8 18446744073709551615 1 . 416 8 416 9 18446744073709551615 8 pop_back 416 9 416 17 18446744073709551615 1 ( 416 17 416 18 18446744073709551615 1 ) 416 18 416 19 18446744073709551615 1 ; 416 19 416 20 18446744073709551615 5 Stack 417 3 417 8 18446744073709551615 1 . 417 8 417 9 18446744073709551615 8 pop_back 417 9 417 17 18446744073709551615 1 ( 417 17 417 18 18446744073709551615 1 ) 417 18 417 19 18446744073709551615 1 ; 417 19 417 20 18446744073709551615 10 PutOnStack 418 3 418 13 38 1 ( 418 13 418 14 38 4 temp 418 14 418 18 124 1 ) 418 18 418 19 38 1 ; 418 19 418 20 18446744073709551615 6 return 419 3 419 9 18446744073709551615 1 0 419 10 419 11 18446744073709551615 1 ; 419 11 419 12 18446744073709551615 1 } 420 1 420 2 18446744073709551615 3 int 421 1 421 4 18446744073709551615 8 Multiply 421 5 421 13 125 1 ( 421 13 421 14 125 1 ) 421 14 421 15 125 1 { 421 16 421 17 18446744073709551615 2 if 422 3 422 5 18446744073709551615 1 ( 422 6 422 7 18446744073709551615 5 Stack 422 7 422 12 18446744073709551615 1 . 422 12 422 13 18446744073709551615 4 size 422 13 422 17 18446744073709551615 1 ( 422 17 422 18 18446744073709551615 1 ) 422 18 422 19 18446744073709551615 2 == 422 20 422 22 18446744073709551615 1 0 422 23 422 24 18446744073709551615 1 ) 422 24 422 25 18446744073709551615 1 { 422 26 422 27 18446744073709551615 6 return 423 5 423 11 18446744073709551615 1 2 423 12 423 13 18446744073709551615 1 ; 423 13 423 14 18446744073709551615 1 } 424 3 424 4 18446744073709551615 2 if 425 3 425 5 18446744073709551615 1 ( 425 6 425 7 18446744073709551615 5 Stack 425 7 425 12 18446744073709551615 1 . 425 12 425 13 18446744073709551615 4 size 425 13 425 17 18446744073709551615 1 ( 425 17 425 18 18446744073709551615 1 ) 425 18 425 19 18446744073709551615 2 <= 425 20 425 22 18446744073709551615 1 1 425 23 425 24 18446744073709551615 1 ) 425 24 425 25 18446744073709551615 1 { 425 26 425 27 18446744073709551615 6 return 426 5 426 11 18446744073709551615 1 3 426 12 426 13 18446744073709551615 1 ; 426 13 426 14 18446744073709551615 1 } 427 3 427 4 18446744073709551615 3 int 428 3 428 6 18446744073709551615 3 len 428 7 428 10 126 1 = 428 11 428 12 18446744073709551615 5 Stack 428 13 428 18 18446744073709551615 1 . 428 18 428 19 18446744073709551615 4 size 428 19 428 23 18446744073709551615 1 ( 428 23 428 24 18446744073709551615 1 ) 428 24 428 25 18446744073709551615 1 - 428 26 428 27 18446744073709551615 1 1 428 28 428 29 18446744073709551615 1 ; 428 29 428 30 18446744073709551615 3 int 429 3 429 6 18446744073709551615 4 len2 429 7 429 11 127 1 = 429 12 429 13 18446744073709551615 3 len 429 14 429 17 126 1 - 429 18 429 19 18446744073709551615 1 1 429 20 429 21 18446744073709551615 1 ; 429 21 429 22 18446744073709551615 13 StackVariable 430 3 430 16 6 3 tmp 430 17 430 20 128 1 = 430 21 430 22 18446744073709551615 5 Stack 430 23 430 28 18446744073709551615 1 [ 430 28 430 29 18446744073709551615 3 len 430 29 430 32 18446744073709551615 1 ] 430 32 430 33 18446744073709551615 1 ; 430 33 430 34 18446744073709551615 13 StackVariable 431 3 431 16 6 4 tmp2 431 17 431 21 129 1 = 431 22 431 23 18446744073709551615 5 Stack 431 24 431 29 18446744073709551615 1 [ 431 29 431 30 18446744073709551615 4 len2 431 30 431 34 18446744073709551615 1 ] 431 34 431 35 18446744073709551615 1 ; 431 35 431 36 18446744073709551615 2 if 432 3 432 5 18446744073709551615 1 ( 432 6 432 7 18446744073709551615 3 tmp 432 7 432 10 128 1 . 432 10 432 11 18446744073709551615 4 Type 432 11 432 15 7 2 == 432 16 432 18 18446744073709551615 11 char_string 432 19 432 30 5 2 || 432 31 432 33 18446744073709551615 4 tmp2 432 34 432 38 129 1 . 432 38 432 39 18446744073709551615 4 Type 432 39 432 43 7 2 == 432 44 432 46 18446744073709551615 11 char_string 432 47 432 58 5 1 ) 432 58 432 59 18446744073709551615 1 { 432 60 432 61 18446744073709551615 6 return 433 5 433 11 18446744073709551615 2 21 433 12 433 14 18446744073709551615 1 ; 433 14 433 15 18446744073709551615 1 } 434 3 434 4 18446744073709551615 3 int 435 3 435 6 18446744073709551615 3 out 435 7 435 10 130 1 = 435 11 435 12 18446744073709551615 1 0 435 13 435 14 18446744073709551615 1 ; 435 14 435 15 18446744073709551615 3 out 436 3 436 6 130 1 = 436 7 436 8 18446744073709551615 4 tmp2 436 9 436 13 129 1 . 436 13 436 14 18446744073709551615 6 number 436 14 436 20 8 1 * 436 21 436 22 18446744073709551615 3 tmp 436 23 436 26 128 1 . 436 26 436 27 18446744073709551615 6 number 436 27 436 33 8 1 ; 436 33 436 34 18446744073709551615 13 StackVariable 437 3 437 16 6 4 temp 437 17 437 21 131 1 ; 437 21 437 22 18446744073709551615 4 temp 438 3 438 7 131 1 . 438 7 438 8 18446744073709551615 4 Type 438 8 438 12 7 1 = 438 13 438 14 18446744073709551615 6 number 438 15 438 21 4 1 ; 438 21 438 22 18446744073709551615 4 temp 439 3 439 7 131 1 . 439 7 439 8 18446744073709551615 6 number 439 8 439 14 8 1 = 439 15 439 16 18446744073709551615 3 out 439 17 439 20 130 1 ; 439 20 439 21 18446744073709551615 5 Stack 440 3 440 8 18446744073709551615 1 . 440 8 440 9 18446744073709551615 8 pop_back 440 9 440 17 18446744073709551615 1 ( 440 17 440 18 18446744073709551615 1 ) 440 18 440 19 18446744073709551615 1 ; 440 19 440 20 18446744073709551615 5 Stack 441 3 441 8 18446744073709551615 1 . 441 8 441 9 18446744073709551615 8 pop_back 441 9 441 17 18446744073709551615 1 ( 441 17 441 18 18446744073709551615 1 ) 441 18 441 19 18446744073709551615 1 ; 441 19 441 20 18446744073709551615 10 PutOnStack 442 3 442 13 38 1 ( 442 13 442 14 38 4 temp 442 14 442 18 131 1 ) 442 18 442 19 38 1 ; 442 19 442 20 18446744073709551615 6 return 443 3 443 9 18446744073709551615 1 0 443 10 443 11 18446744073709551615 1 ; 443 11 443 12 18446744073709551615 1 } 444 1 444 2 18446744073709551615 3 int 445 1 445 4 18446744073709551615 6 Negate 445 5 445 11 132 1 ( 445 11 445 12 132 1 ) 445 12 445 13 132 1 { 445 14 445 15 18446744073709551615 2 if 446 3 446 5 18446744073709551615 1 ( 446 6 446 7 18446744073709551615 5 Stack 446 7 446 12 18446744073709551615 1 . 446 12 446 13 18446744073709551615 4 size 446 13 446 17 18446744073709551615 1 ( 446 17 446 18 18446744073709551615 1 ) 446 18 446 19 18446744073709551615 2 == 446 20 446 22 18446744073709551615 1 0 446 23 446 24 18446744073709551615 1 ) 446 24 446 25 18446744073709551615 1 { 446 26 446 27 18446744073709551615 6 return 447 5 447 11 18446744073709551615 1 2 447 12 447 13 18446744073709551615 1 ; 447 13 447 14 18446744073709551615 1 } 448 3 448 4 18446744073709551615 3 int 449 3 449 6 18446744073709551615 3 len 449 7 449 10 133 1 = 449 11 449 12 18446744073709551615 5 Stack 449 13 449 18 18446744073709551615 1 . 449 18 449 19 18446744073709551615 4 size 449 19 449 23 18446744073709551615 1 ( 449 23 449 24 18446744073709551615 1 ) 449 24 449 25 18446744073709551615 1 - 449 26 449 27 18446744073709551615 1 1 449 28 449 29 18446744073709551615 1 ; 449 29 449 30 18446744073709551615 13 StackVariable 450 3 450 16 6 3 tmp 450 17 450 20 134 1 = 450 21 450 22 18446744073709551615 5 Stack 450 23 450 28 18446744073709551615 1 [ 450 28 450 29 18446744073709551615 3 len 450 29 450 32 18446744073709551615 1 ] 450 32 450 33 18446744073709551615 1 ; 450 33 450 34 18446744073709551615 2 if 451 3 451 5 18446744073709551615 1 ( 451 6 451 7 18446744073709551615 3 tmp 451 7 451 10 134 1 . 451 10 451 11 18446744073709551615 4 Type 451 11 451 15 7 2 == 451 16 451 18 18446744073709551615 11 char_string 451 19 451 30 5 1 ) 451 30 451 31 18446744073709551615 1 { 451 32 451 33 18446744073709551615 6 return 452 5 452 11 18446744073709551615 2 21 452 12 452 14 18446744073709551615 1 ; 452 14 452 15 18446744073709551615 1 } 453 3 453 4 18446744073709551615 3 tmp 454 3 454 6 134 1 . 454 6 454 7 18446744073709551615 6 number 454 7 454 13 8 1 = 454 14 454 15 18446744073709551615 1 - 454 16 454 17 18446744073709551615 3 tmp 454 17 454 20 134 1 . 454 20 454 21 18446744073709551615 6 number 454 21 454 27 8 1 ; 454 27 454 28 18446744073709551615 5 Stack 455 3 455 8 18446744073709551615 1 . 455 8 455 9 18446744073709551615 8 pop_back 455 9 455 17 18446744073709551615 1 ( 455 17 455 18 18446744073709551615 1 ) 455 18 455 19 18446744073709551615 1 ; 455 19 455 20 18446744073709551615 10 PutOnStack 456 3 456 13 38 1 ( 456 13 456 14 38 3 tmp 456 14 456 17 134 1 ) 456 17 456 18 38 1 ; 456 18 456 19 18446744073709551615 6 return 457 3 457 9 18446744073709551615 1 0 457 10 457 11 18446744073709551615 1 ; 457 11 457 12 18446744073709551615 1 } 458 1 458 2 18446744073709551615 3 int 459 1 459 4 18446744073709551615 7 Convert 459 5 459 12 135 1 ( 459 12 459 13 135 1 ) 459 13 459 14 135 1 { 459 15 459 16 18446744073709551615 2 if 460 3 460 5 18446744073709551615 1 ( 460 6 460 7 18446744073709551615 5 Stack 460 7 460 12 18446744073709551615 1 . 460 12 460 13 18446744073709551615 4 size 460 13 460 17 18446744073709551615 1 ( 460 17 460 18 18446744073709551615 1 ) 460 18 460 19 18446744073709551615 2 == 460 20 460 22 18446744073709551615 1 0 460 23 460 24 18446744073709551615 1 ) 460 24 460 25 18446744073709551615 1 { 460 26 460 27 18446744073709551615 6 return 461 5 461 11 18446744073709551615 1 2 461 12 461 13 18446744073709551615 1 ; 461 13 461 14 18446744073709551615 1 } 462 3 462 4 18446744073709551615 3 int 463 3 463 6 18446744073709551615 3 len 463 7 463 10 136 1 = 463 11 463 12 18446744073709551615 5 Stack 463 13 463 18 18446744073709551615 1 . 463 18 463 19 18446744073709551615 4 size 463 19 463 23 18446744073709551615 1 ( 463 23 463 24 18446744073709551615 1 ) 463 24 463 25 18446744073709551615 1 - 463 26 463 27 18446744073709551615 1 1 463 28 463 29 18446744073709551615 1 ; 463 29 463 30 18446744073709551615 13 StackVariable 464 3 464 16 6 3 tmp 464 17 464 20 137 1 = 464 21 464 22 18446744073709551615 5 Stack 464 23 464 28 18446744073709551615 1 [ 464 28 464 29 18446744073709551615 3 len 464 29 464 32 18446744073709551615 1 ] 464 32 464 33 18446744073709551615 1 ; 464 33 464 34 18446744073709551615 6 string 465 3 465 9 9 4 temp 465 10 465 14 138 1 = 465 15 465 16 18446744073709551615 9 to_string 465 17 465 26 18446744073709551615 1 ( 465 26 465 27 18446744073709551615 3 tmp 465 27 465 30 18446744073709551615 1 . 465 30 465 31 18446744073709551615 6 number 465 31 465 37 18446744073709551615 1 ) 465 37 465 38 18446744073709551615 1 ; 465 38 465 39 18446744073709551615 5 Stack 466 3 466 8 18446744073709551615 1 . 466 8 466 9 18446744073709551615 8 pop_back 466 9 466 17 18446744073709551615 1 ( 466 17 466 18 18446744073709551615 1 ) 466 18 466 19 18446744073709551615 1 ; 466 19 466 20 18446744073709551615 3 int 467 3 467 6 18446744073709551615 3 var 467 7 467 10 139 1 ; 467 10 467 11 18446744073709551615 3 try 468 3 468 6 18446744073709551615 1 { 468 7 468 8 18446744073709551615 2 if 469 5 469 7 18446744073709551615 1 ( 469 8 469 9 18446744073709551615 3 tmp 469 9 469 12 137 1 . 469 12 469 13 18446744073709551615 4 Type 469 13 469 17 7 2 != 469 18 469 20 18446744073709551615 6 number 469 21 469 27 4 1 ) 469 27 469 28 18446744073709551615 1 { 469 29 469 30 18446744073709551615 3 var 470 7 470 10 139 1 = 470 11 470 12 18446744073709551615 8 parseInt 470 13 470 21 41 1 ( 470 21 470 22 18446744073709551615 3 tmp 470 22 470 25 137 1 . 470 25 470 26 18446744073709551615 11 char_string 470 26 470 37 18446744073709551615 1 ) 470 37 470 38 18446744073709551615 1 ; 470 38 470 39 18446744073709551615 37 //  cout << "Debug: " << var << endl; 471 7 471 44 18446744073709551615 3 tmp 472 7 472 10 137 1 . 472 10 472 11 18446744073709551615 6 number 472 11 472 17 8 1 = 472 18 472 19 18446744073709551615 3 var 472 20 472 23 139 1 ; 472 23 472 24 18446744073709551615 3 tmp 473 7 473 10 137 1 . 473 10 473 11 18446744073709551615 4 Type 473 11 473 15 7 1 = 473 16 473 17 18446744073709551615 6 number 473 18 473 24 4 1 ; 473 24 473 25 18446744073709551615 3 tmp 474 7 474 10 137 1 . 474 10 474 11 18446744073709551615 11 char_string 474 11 474 22 18446744073709551615 1 = 474 23 474 24 18446744073709551615 2 "" 474 25 474 27 18446744073709551615 1 ; 474 27 474 28 18446744073709551615 5 Stack 475 7 475 12 18446744073709551615 1 . 475 12 475 13 18446744073709551615 9 push_back 475 13 475 22 18446744073709551615 1 ( 475 22 475 23 18446744073709551615 3 tmp 475 23 475 26 18446744073709551615 1 ) 475 26 475 27 18446744073709551615 1 ; 475 27 475 28 18446744073709551615 4 goto 476 7 476 11 18446744073709551615 3 end 476 12 476 15 140 1 ; 476 15 476 16 18446744073709551615 1 } 477 5 477 6 18446744073709551615 1 } 479 3 479 4 18446744073709551615 5 catch 479 5 479 10 18446744073709551615 1 ( 479 11 479 12 18446744073709551615 3 ... 479 12 479 15 18446744073709551615 1 ) 479 15 479 16 18446744073709551615 1 { 479 17 479 18 18446744073709551615 5 Stack 480 5 480 10 18446744073709551615 1 . 480 10 480 11 18446744073709551615 9 push_back 480 11 480 20 18446744073709551615 1 ( 480 20 480 21 18446744073709551615 3 tmp 480 21 480 24 18446744073709551615 1 ) 480 24 480 25 18446744073709551615 1 ; 480 25 480 26 18446744073709551615 4 goto 481 5 481 9 18446744073709551615 3 end 481 10 481 13 140 1 ; 481 13 481 14 18446744073709551615 1 } 482 3 482 4 18446744073709551615 26 // cout << "here" << endl; 483 3 483 29 18446744073709551615 3 tmp 484 3 484 6 137 1 . 484 6 484 7 18446744073709551615 11 char_string 484 7 484 18 18446744073709551615 1 = 484 19 484 20 18446744073709551615 4 temp 484 21 484 25 138 1 ; 484 25 484 26 18446744073709551615 3 tmp 485 3 485 6 137 1 . 485 6 485 7 18446744073709551615 6 number 485 7 485 13 8 1 = 485 14 485 15 18446744073709551615 1 0 485 16 485 17 18446744073709551615 1 ; 485 17 485 18 18446744073709551615 3 tmp 486 3 486 6 137 1 . 486 6 486 7 18446744073709551615 4 Type 486 7 486 11 7 1 = 486 12 486 13 18446744073709551615 11 char_string 486 14 486 25 5 1 ; 486 25 486 26 18446744073709551615 5 Stack 487 3 487 8 18446744073709551615 1 . 487 8 487 9 18446744073709551615 9 push_back 487 9 487 18 18446744073709551615 1 ( 487 18 487 19 18446744073709551615 3 tmp 487 19 487 22 18446744073709551615 1 ) 487 22 487 23 18446744073709551615 1 ; 487 23 487 24 18446744073709551615 3 end 488 1 488 4 18446744073709551615 1 : 488 4 488 5 18446744073709551615 6 return 489 3 489 9 18446744073709551615 1 0 489 10 489 11 18446744073709551615 1 ; 489 11 489 12 18446744073709551615 1 } 490 1 490 2 18446744073709551615 3 int 491 1 491 4 18446744073709551615 4 Join 491 5 491 9 141 1 ( 491 9 491 10 141 1 ) 491 10 491 11 141 1 { 491 12 491 13 18446744073709551615 2 if 492 3 492 5 18446744073709551615 1 ( 492 6 492 7 18446744073709551615 5 Stack 492 7 492 12 18446744073709551615 1 . 492 12 492 13 18446744073709551615 4 size 492 13 492 17 18446744073709551615 1 ( 492 17 492 18 18446744073709551615 1 ) 492 18 492 19 18446744073709551615 2 == 492 20 492 22 18446744073709551615 1 0 492 23 492 24 18446744073709551615 1 ) 492 24 492 25 18446744073709551615 1 { 492 26 492 27 18446744073709551615 6 return 493 5 493 11 18446744073709551615 1 2 493 12 493 13 18446744073709551615 1 ; 493 13 493 14 18446744073709551615 1 } 494 3 494 4 18446744073709551615 2 if 495 3 495 5 18446744073709551615 1 ( 495 6 495 7 18446744073709551615 5 Stack 495 7 495 12 18446744073709551615 1 . 495 12 495 13 18446744073709551615 4 size 495 13 495 17 18446744073709551615 1 ( 495 17 495 18 18446744073709551615 1 ) 495 18 495 19 18446744073709551615 2 <= 495 20 495 22 18446744073709551615 1 1 495 23 495 24 18446744073709551615 1 ) 495 24 495 25 18446744073709551615 1 { 495 26 495 27 18446744073709551615 6 return 496 5 496 11 18446744073709551615 1 3 496 12 496 13 18446744073709551615 1 ; 496 13 496 14 18446744073709551615 1 } 497 3 497 4 18446744073709551615 3 int 498 3 498 6 18446744073709551615 3 len 498 7 498 10 142 1 = 498 11 498 12 18446744073709551615 5 Stack 498 13 498 18 18446744073709551615 1 . 498 18 498 19 18446744073709551615 4 size 498 19 498 23 18446744073709551615 1 ( 498 23 498 24 18446744073709551615 1 ) 498 24 498 25 18446744073709551615 1 - 498 26 498 27 18446744073709551615 1 1 498 28 498 29 18446744073709551615 1 ; 498 29 498 30 18446744073709551615 3 int 499 3 499 6 18446744073709551615 4 len2 499 7 499 11 143 1 = 499 12 499 13 18446744073709551615 3 len 499 14 499 17 142 1 - 499 18 499 19 18446744073709551615 1 1 499 20 499 21 18446744073709551615 1 ; 499 21 499 22 18446744073709551615 13 StackVariable 500 3 500 16 6 3 tmp 500 17 500 20 144 1 = 500 21 500 22 18446744073709551615 5 Stack 500 23 500 28 18446744073709551615 1 [ 500 28 500 29 18446744073709551615 3 len 500 29 500 32 18446744073709551615 1 ] 500 32 500 33 18446744073709551615 1 ; 500 33 500 34 18446744073709551615 13 StackVariable 501 3 501 16 6 4 tmp2 501 17 501 21 145 1 = 501 22 501 23 18446744073709551615 5 Stack 501 24 501 29 18446744073709551615 1 [ 501 29 501 30 18446744073709551615 4 len2 501 30 501 34 18446744073709551615 1 ] 501 34 501 35 18446744073709551615 1 ; 501 35 501 36 18446744073709551615 6 string 502 3 502 9 9 4 stmp 502 10 502 14 146 1 = 502 15 502 16 18446744073709551615 2 "" 502 17 502 19 18446744073709551615 1 ; 502 19 502 20 18446744073709551615 6 string 503 3 503 9 9 5 stmp2 503 10 503 15 147 1 = 503 16 503 17 18446744073709551615 2 "" 503 18 503 20 18446744073709551615 1 ; 503 20 503 21 18446744073709551615 2 if 504 3 504 5 18446744073709551615 1 ( 504 6 504 7 18446744073709551615 3 tmp 504 7 504 10 144 1 . 504 10 504 11 18446744073709551615 4 Type 504 11 504 15 7 2 == 504 16 504 18 18446744073709551615 11 char_string 504 19 504 30 5 1 ) 504 30 504 31 18446744073709551615 1 { 504 32 504 33 18446744073709551615 4 stmp 505 5 505 9 146 1 = 505 10 505 11 18446744073709551615 3 tmp 505 12 505 15 144 1 . 505 15 505 16 18446744073709551615 11 char_string 505 16 505 27 18446744073709551615 1 ; 505 27 505 28 18446744073709551615 1 } 506 3 506 4 18446744073709551615 4 else 506 5 506 9 18446744073709551615 1 { 506 10 506 11 18446744073709551615 4 stmp 507 5 507 9 18446744073709551615 1 = 507 10 507 11 18446744073709551615 9 to_string 507 12 507 21 18446744073709551615 1 ( 507 21 507 22 18446744073709551615 3 tmp 507 22 507 25 18446744073709551615 1 . 507 25 507 26 18446744073709551615 6 number 507 26 507 32 18446744073709551615 1 ) 507 32 507 33 18446744073709551615 1 ; 507 33 507 34 18446744073709551615 1 } 508 3 508 4 18446744073709551615 2 if 509 3 509 5 18446744073709551615 1 ( 509 6 509 7 18446744073709551615 4 tmp2 509 7 509 11 145 1 . 509 11 509 12 18446744073709551615 4 Type 509 12 509 16 7 2 == 509 17 509 19 18446744073709551615 11 char_string 509 20 509 31 5 1 ) 509 31 509 32 18446744073709551615 1 { 509 33 509 34 18446744073709551615 5 stmp2 510 5 510 10 147 1 = 510 11 510 12 18446744073709551615 4 tmp2 510 13 510 17 145 1 . 510 17 510 18 18446744073709551615 11 char_string 510 18 510 29 18446744073709551615 1 ; 510 29 510 30 18446744073709551615 1 } 511 3 511 4 18446744073709551615 4 else 511 5 511 9 18446744073709551615 1 { 511 10 511 11 18446744073709551615 5 stmp2 512 5 512 10 18446744073709551615 1 = 512 11 512 12 18446744073709551615 9 to_string 512 13 512 22 18446744073709551615 1 ( 512 22 512 23 18446744073709551615 4 tmp2 512 23 512 27 18446744073709551615 1 . 512 27 512 28 18446744073709551615 6 number 512 28 512 34 18446744073709551615 1 ) 512 34 512 35 18446744073709551615 1 ; 512 35 512 36 18446744073709551615 1 } 513 3 513 4 18446744073709551615 6 string 514 3 514 9 9 3 out 514 10 514 13 148 1 = 514 14 514 15 18446744073709551615 5 stmp2 514 16 514 21 147 1 + 514 22 514 23 149 4 stmp 514 24 514 28 146 1 ; 514 28 514 29 18446744073709551615 5 Stack 515 3 515 8 18446744073709551615 1 . 515 8 515 9 18446744073709551615 8 pop_back 515 9 515 17 18446744073709551615 1 ( 515 17 515 18 18446744073709551615 1 ) 515 18 515 19 18446744073709551615 1 ; 515 19 515 20 18446744073709551615 5 Stack 516 3 516 8 18446744073709551615 1 . 516 8 516 9 18446744073709551615 8 pop_back 516 9 516 17 18446744073709551615 1 ( 516 17 516 18 18446744073709551615 1 ) 516 18 516 19 18446744073709551615 1 ; 516 19 516 20 18446744073709551615 13 StackVariable 517 3 517 16 6 4 temp 517 17 517 21 150 1 ; 517 21 517 22 18446744073709551615 4 temp 518 3 518 7 150 1 . 518 7 518 8 18446744073709551615 4 Type 518 8 518 12 7 1 = 518 13 518 14 18446744073709551615 11 char_string 518 15 518 26 5 1 ; 518 26 518 27 18446744073709551615 4 temp 519 3 519 7 150 1 . 519 7 519 8 18446744073709551615 11 char_string 519 8 519 19 18446744073709551615 1 = 519 20 519 21 18446744073709551615 3 out 519 22 519 25 148 1 ; 519 25 519 26 18446744073709551615 10 PutOnStack 520 3 520 13 38 1 ( 520 13 520 14 38 4 temp 520 14 520 18 150 1 ) 520 18 520 19 38 1 ; 520 19 520 20 18446744073709551615 6 return 521 3 521 9 18446744073709551615 1 0 521 10 521 11 18446744073709551615 1 ; 521 11 521 12 18446744073709551615 1 } 522 1 522 2 18446744073709551615 3 int 523 1 523 4 18446744073709551615 17 DataHandlerAction 523 5 523 22 151 1 ( 523 22 523 23 151 1 ) 523 23 523 24 151 1 { 523 25 523 26 18446744073709551615 2 if 524 3 524 5 18446744073709551615 1 ( 524 6 524 7 18446744073709551615 5 Stack 524 7 524 12 18446744073709551615 1 . 524 12 524 13 18446744073709551615 4 size 524 13 524 17 18446744073709551615 1 ( 524 17 524 18 18446744073709551615 1 ) 524 18 524 19 18446744073709551615 2 == 524 20 524 22 18446744073709551615 1 0 524 23 524 24 18446744073709551615 2 && 524 25 524 27 18446744073709551615 1 ! 524 28 524 29 18446744073709551615 22 is_data_handler_in_use 524 29 524 51 18446744073709551615 1 ) 524 51 524 52 18446744073709551615 1 { 524 53 524 54 18446744073709551615 6 return 525 5 525 11 18446744073709551615 1 2 525 12 525 13 18446744073709551615 1 ; 525 13 525 14 18446744073709551615 1 } 526 3 526 4 18446744073709551615 2 if 527 3 527 5 18446744073709551615 1 ( 527 6 527 7 18446744073709551615 22 is_data_handler_in_use 527 7 527 29 29 1 ) 527 29 527 30 18446744073709551615 1 { 527 31 527 32 18446744073709551615 22 is_data_handler_in_use 528 5 528 27 29 1 = 528 28 528 29 18446744073709551615 5 false 528 30 528 35 18446744073709551615 1 ; 528 35 528 36 18446744073709551615 10 PutOnStack 529 5 529 15 38 1 ( 529 15 529 16 38 11 DataHandler 529 16 529 27 28 1 ) 529 27 529 28 38 1 ; 529 28 529 29 18446744073709551615 1 } 530 3 530 4 18446744073709551615 4 else 530 5 530 9 18446744073709551615 1 { 530 10 530 11 18446744073709551615 22 is_data_handler_in_use 531 5 531 27 29 1 = 531 28 531 29 18446744073709551615 4 true 531 30 531 34 18446744073709551615 1 ; 531 34 531 35 18446744073709551615 3 int 532 5 532 8 18446744073709551615 3 len 532 9 532 12 152 1 = 532 13 532 14 18446744073709551615 5 Stack 532 15 532 20 18446744073709551615 1 . 532 20 532 21 18446744073709551615 4 size 532 21 532 25 18446744073709551615 1 ( 532 25 532 26 18446744073709551615 1 ) 532 26 532 27 18446744073709551615 1 - 532 28 532 29 18446744073709551615 1 1 532 30 532 31 18446744073709551615 1 ; 532 31 532 32 18446744073709551615 13 StackVariable 533 5 533 18 6 3 tmp 533 19 533 22 153 1 = 533 23 533 24 18446744073709551615 5 Stack 533 25 533 30 18446744073709551615 1 [ 533 30 533 31 18446744073709551615 3 len 533 31 533 34 18446744073709551615 1 ] 533 34 533 35 18446744073709551615 1 ; 533 35 533 36 18446744073709551615 11 DataHandler 534 5 534 16 28 1 = 534 17 534 18 154 3 tmp 534 19 534 22 153 1 ; 534 22 534 23 18446744073709551615 5 Stack 535 5 535 10 18446744073709551615 1 . 535 10 535 11 18446744073709551615 8 pop_back 535 11 535 19 18446744073709551615 1 ( 535 19 535 20 18446744073709551615 1 ) 535 20 535 21 18446744073709551615 1 ; 535 21 535 22 18446744073709551615 1 } 536 3 536 4 18446744073709551615 6 return 537 3 537 9 18446744073709551615 1 0 537 10 537 11 18446744073709551615 1 ; 537 11 537 12 18446744073709551615 1 } 538 1 538 2 18446744073709551615 3 int 539 1 539 4 18446744073709551615 5 Split 539 5 539 10 155 1 ( 539 10 539 11 155 1 ) 539 11 539 12 155 1 { 539 13 539 14 18446744073709551615 2 if 540 3 540 5 18446744073709551615 1 ( 540 6 540 7 18446744073709551615 5 Stack 540 7 540 12 18446744073709551615 1 . 540 12 540 13 18446744073709551615 4 size 540 13 540 17 18446744073709551615 1 ( 540 17 540 18 18446744073709551615 1 ) 540 18 540 19 18446744073709551615 2 == 540 20 540 22 18446744073709551615 1 0 540 23 540 24 18446744073709551615 1 ) 540 24 540 25 18446744073709551615 1 { 540 26 540 27 18446744073709551615 6 return 541 5 541 11 18446744073709551615 1 2 541 12 541 13 18446744073709551615 1 ; 541 13 541 14 18446744073709551615 1 } 542 3 542 4 18446744073709551615 3 int 543 3 543 6 18446744073709551615 3 len 543 7 543 10 156 1 = 543 11 543 12 18446744073709551615 5 Stack 543 13 543 18 18446744073709551615 1 . 543 18 543 19 18446744073709551615 4 size 543 19 543 23 18446744073709551615 1 ( 543 23 543 24 18446744073709551615 1 ) 543 24 543 25 18446744073709551615 1 - 543 26 543 27 18446744073709551615 1 1 543 28 543 29 18446744073709551615 1 ; 543 29 543 30 18446744073709551615 13 StackVariable 544 3 544 16 6 3 tmp 544 17 544 20 157 1 = 544 21 544 22 18446744073709551615 5 Stack 544 23 544 28 18446744073709551615 1 [ 544 28 544 29 18446744073709551615 3 len 544 29 544 32 18446744073709551615 1 ] 544 32 544 33 18446744073709551615 1 ; 544 33 544 34 18446744073709551615 2 if 545 3 545 5 18446744073709551615 1 ( 545 6 545 7 18446744073709551615 3 tmp 545 7 545 10 157 1 . 545 10 545 11 18446744073709551615 4 Type 545 11 545 15 7 2 == 545 16 545 18 18446744073709551615 6 number 545 19 545 25 4 1 ) 545 25 545 26 18446744073709551615 1 { 545 27 545 28 18446744073709551615 6 return 546 5 546 11 18446744073709551615 2 21 546 12 546 14 18446744073709551615 1 ; 546 14 546 15 18446744073709551615 1 } 547 3 547 4 18446744073709551615 3 int 548 3 548 6 18446744073709551615 1 n 548 7 548 8 158 1 = 548 9 548 10 18446744073709551615 3 tmp 548 11 548 14 157 1 . 548 14 548 15 18446744073709551615 11 char_string 548 15 548 26 18446744073709551615 1 . 548 26 548 27 18446744073709551615 6 length 548 27 548 33 18446744073709551615 1 ( 548 33 548 34 18446744073709551615 1 ) 548 34 548 35 18446744073709551615 1 ; 548 35 548 36 18446744073709551615 28 // declaring character array 550 3 550 31 18446744073709551615 4 char 551 3 551 7 18446744073709551615 10 char_array 551 8 551 18 159 1 [ 551 18 551 19 18446744073709551615 1 n 551 19 551 20 158 1 + 551 21 551 22 18446744073709551615 1 1 551 23 551 24 18446744073709551615 1 ] 551 24 551 25 18446744073709551615 1 ; 551 25 551 26 18446744073709551615 30 // copying the contents of the 553 3 553 33 18446744073709551615 23 // string to char array 554 3 554 26 18446744073709551615 6 strcpy 555 3 555 9 160 1 ( 555 9 555 10 18446744073709551615 10 char_array 555 10 555 20 159 1 , 555 20 555 21 18446744073709551615 3 tmp 555 22 555 25 157 1 . 555 25 555 26 18446744073709551615 11 char_string 555 26 555 37 18446744073709551615 1 . 555 37 555 38 18446744073709551615 5 c_str 555 38 555 43 18446744073709551615 1 ( 555 43 555 44 18446744073709551615 1 ) 555 44 555 45 18446744073709551615 1 ) 555 45 555 46 18446744073709551615 1 ; 555 46 555 47 18446744073709551615 5 Stack 556 3 556 8 18446744073709551615 1 . 556 8 556 9 18446744073709551615 8 pop_back 556 9 556 17 18446744073709551615 1 ( 556 17 556 18 18446744073709551615 1 ) 556 18 556 19 18446744073709551615 1 ; 556 19 556 20 18446744073709551615 13 StackVariable 557 3 557 16 6 4 temp 557 17 557 21 161 1 ; 557 21 557 22 18446744073709551615 4 temp 558 3 558 7 161 1 . 558 7 558 8 18446744073709551615 4 Type 558 8 558 12 7 1 = 558 13 558 14 18446744073709551615 11 char_string 558 15 558 26 5 1 ; 558 26 558 27 18446744073709551615 3 for 559 3 559 6 18446744073709551615 1 ( 559 7 559 8 18446744073709551615 3 int 559 8 559 11 18446744073709551615 1 i 559 12 559 13 162 1 = 559 14 559 15 18446744073709551615 1 0 559 16 559 17 18446744073709551615 1 ; 559 17 559 18 18446744073709551615 1 i 559 19 559 20 162 1 < 559 21 559 22 18446744073709551615 1 n 559 23 559 24 158 1 ; 559 24 559 25 18446744073709551615 1 i 559 26 559 27 162 2 ++ 559 27 559 29 18446744073709551615 1 ) 559 29 559 30 18446744073709551615 1 { 559 31 559 32 18446744073709551615 4 temp 560 5 560 9 161 1 . 560 9 560 10 18446744073709551615 11 char_string 560 10 560 21 18446744073709551615 1 = 560 22 560 23 18446744073709551615 10 char_array 560 24 560 34 159 1 [ 560 34 560 35 18446744073709551615 1 i 560 35 560 36 162 1 ] 560 36 560 37 18446744073709551615 1 ; 560 37 560 38 18446744073709551615 10 PutOnStack 561 5 561 15 38 1 ( 561 15 561 16 38 4 temp 561 16 561 20 161 1 ) 561 20 561 21 38 1 ; 561 21 561 22 18446744073709551615 1 } 562 3 562 4 18446744073709551615 6 return 564 3 564 9 18446744073709551615 1 0 564 10 564 11 18446744073709551615 1 ; 564 11 564 12 18446744073709551615 1 } 565 1 565 2 18446744073709551615 3 int 566 1 566 4 18446744073709551615 12 RandomNumber 566 5 566 17 163 1 ( 566 17 566 18 163 1 ) 566 18 566 19 163 1 { 566 20 566 21 18446744073709551615 3 int 567 3 567 6 18446744073709551615 3 tmp 567 7 567 10 164 1 = 567 11 567 12 18446744073709551615 4 rand 567 13 567 17 165 1 ( 567 17 567 18 165 1 ) 567 18 567 19 165 1 ; 567 19 567 20 18446744073709551615 13 StackVariable 568 3 568 16 6 4 temp 568 17 568 21 166 1 ; 568 21 568 22 18446744073709551615 4 temp 569 3 569 7 166 1 . 569 7 569 8 18446744073709551615 4 Type 569 8 569 12 7 1 = 569 13 569 14 18446744073709551615 6 number 569 15 569 21 4 1 ; 569 21 569 22 18446744073709551615 4 temp 570 3 570 7 166 1 . 570 7 570 8 18446744073709551615 6 number 570 8 570 14 8 1 = 570 15 570 16 18446744073709551615 3 tmp 570 17 570 20 164 1 ; 570 20 570 21 18446744073709551615 10 PutOnStack 571 3 571 13 38 1 ( 571 13 571 14 38 4 temp 571 14 571 18 166 1 ) 571 18 571 19 38 1 ; 571 19 571 20 18446744073709551615 6 return 572 3 572 9 18446744073709551615 1 0 572 10 572 11 18446744073709551615 1 ; 572 11 572 12 18446744073709551615 1 } 573 1 573 2 18446744073709551615 3 int 575 1 575 4 18446744073709551615 7 ForLoop 575 5 575 12 167 1 ( 575 12 575 13 167 1 ) 575 13 575 14 167 1 { 575 15 575 16 18446744073709551615 2 if 576 3 576 5 18446744073709551615 1 ( 576 6 576 7 18446744073709551615 5 Stack 576 7 576 12 18446744073709551615 1 . 576 12 576 13 18446744073709551615 4 size 576 13 576 17 18446744073709551615 1 ( 576 17 576 18 18446744073709551615 1 ) 576 18 576 19 18446744073709551615 2 == 576 20 576 22 18446744073709551615 1 0 576 23 576 24 18446744073709551615 1 ) 576 24 576 25 18446744073709551615 1 { 576 26 576 27 18446744073709551615 6 return 577 5 577 11 18446744073709551615 1 2 577 12 577 13 18446744073709551615 1 ; 577 13 577 14 18446744073709551615 1 } 578 3 578 4 18446744073709551615 3 int 579 3 579 6 18446744073709551615 3 len 579 7 579 10 168 1 = 579 11 579 12 18446744073709551615 5 Stack 579 13 579 18 18446744073709551615 1 . 579 18 579 19 18446744073709551615 4 size 579 19 579 23 18446744073709551615 1 ( 579 23 579 24 18446744073709551615 1 ) 579 24 579 25 18446744073709551615 1 - 579 26 579 27 18446744073709551615 1 1 579 28 579 29 18446744073709551615 1 ; 579 29 579 30 18446744073709551615 13 StackVariable 580 3 580 16 6 3 tmp 580 17 580 20 169 1 = 580 21 580 22 18446744073709551615 5 Stack 580 23 580 28 18446744073709551615 1 [ 580 28 580 29 18446744073709551615 3 len 580 29 580 32 18446744073709551615 1 ] 580 32 580 33 18446744073709551615 1 ; 580 33 580 34 18446744073709551615 2 if 581 3 581 5 18446744073709551615 1 ( 581 6 581 7 18446744073709551615 3 tmp 581 7 581 10 169 1 . 581 10 581 11 18446744073709551615 4 Type 581 11 581 15 7 2 != 581 16 581 18 18446744073709551615 6 number 581 19 581 25 4 1 ) 581 25 581 26 18446744073709551615 1 { 581 27 581 28 18446744073709551615 6 return 582 5 582 11 18446744073709551615 2 21 582 12 582 14 18446744073709551615 1 ; 582 14 582 15 18446744073709551615 1 } 583 3 583 4 18446744073709551615 14 is_in_for_loop 584 3 584 17 15 1 = 584 18 584 19 18446744073709551615 4 true 584 20 584 24 18446744073709551615 1 ; 584 24 584 25 18446744073709551615 3 int 585 3 585 6 18446744073709551615 7 counter 585 7 585 14 170 1 = 585 15 585 16 18446744073709551615 1 0 585 17 585 18 18446744073709551615 1 ; 585 18 585 19 18446744073709551615 7 counter 586 3 586 10 170 1 = 586 11 586 12 18446744073709551615 3 tmp 586 13 586 16 169 1 . 586 16 586 17 18446744073709551615 6 number 586 17 586 23 8 1 ; 586 23 586 24 18446744073709551615 8 ForStack 587 3 587 11 18446744073709551615 1 . 587 11 587 12 18446744073709551615 9 push_back 587 12 587 21 18446744073709551615 1 ( 587 21 587 22 18446744073709551615 3 ";" 587 22 587 25 18446744073709551615 1 ) 587 25 587 26 18446744073709551615 1 ; 587 26 587 27 18446744073709551615 10 ForCounter 588 3 588 13 18446744073709551615 1 . 588 13 588 14 18446744073709551615 9 push_back 588 14 588 23 18446744073709551615 1 ( 588 23 588 24 18446744073709551615 7 counter 588 24 588 31 18446744073709551615 1 ) 588 31 588 32 18446744073709551615 1 ; 588 32 588 33 18446744073709551615 14 is_in_for_loop 589 3 589 17 15 1 = 589 18 589 19 18446744073709551615 4 true 589 20 589 24 18446744073709551615 1 ; 589 24 589 25 18446744073709551615 5 Stack 590 3 590 8 18446744073709551615 1 . 590 8 590 9 18446744073709551615 8 pop_back 590 9 590 17 18446744073709551615 1 ( 590 17 590 18 18446744073709551615 1 ) 590 18 590 19 18446744073709551615 1 ; 590 19 590 20 18446744073709551615 6 return 591 3 591 9 18446744073709551615 1 0 591 10 591 11 18446744073709551615 1 ; 591 11 591 12 18446744073709551615 1 } 592 1 592 2 18446744073709551615 3 int 593 1 593 4 18446744073709551615 10 EndForLoop 593 5 593 15 171 1 ( 593 15 593 16 171 1 ) 593 16 593 17 171 1 { 593 18 593 19 18446744073709551615 2 if 594 3 594 5 18446744073709551615 1 ( 594 6 594 7 18446744073709551615 5 Stack 594 7 594 12 18446744073709551615 1 . 594 12 594 13 18446744073709551615 4 size 594 13 594 17 18446744073709551615 1 ( 594 17 594 18 18446744073709551615 1 ) 594 18 594 19 18446744073709551615 2 == 594 20 594 22 18446744073709551615 1 0 594 23 594 24 18446744073709551615 1 ) 594 24 594 25 18446744073709551615 1 { 594 26 594 27 18446744073709551615 6 return 595 5 595 11 18446744073709551615 1 2 595 12 595 13 18446744073709551615 1 ; 595 13 595 14 18446744073709551615 1 } 596 3 596 4 18446744073709551615 2 if 597 3 597 5 18446744073709551615 1 ( 597 6 597 7 18446744073709551615 8 ForStack 597 7 597 15 18446744073709551615 1 . 597 15 597 16 18446744073709551615 4 size 597 16 597 20 18446744073709551615 1 ( 597 20 597 21 18446744073709551615 1 ) 597 21 597 22 18446744073709551615 2 == 597 23 597 25 18446744073709551615 1 0 597 26 597 27 18446744073709551615 2 || 597 28 597 30 18446744073709551615 10 ForCounter 597 31 597 41 18446744073709551615 1 . 597 41 597 42 18446744073709551615 4 size 597 42 597 46 18446744073709551615 1 ( 597 46 597 47 18446744073709551615 1 ) 597 47 597 48 18446744073709551615 2 == 597 49 597 51 18446744073709551615 1 0 597 52 597 53 18446744073709551615 1 ) 597 53 597 54 18446744073709551615 1 { 597 55 597 56 18446744073709551615 6 return 598 5 598 11 18446744073709551615 2 13 598 12 598 14 18446744073709551615 1 ; 598 14 598 15 18446744073709551615 1 } 599 3 599 4 18446744073709551615 3 int 600 3 600 6 18446744073709551615 5 where 600 7 600 12 172 1 = 600 13 600 14 18446744073709551615 10 ForCounter 600 15 600 25 18446744073709551615 1 . 600 25 600 26 18446744073709551615 4 size 600 26 600 30 18446744073709551615 1 ( 600 30 600 31 18446744073709551615 1 ) 600 31 600 32 18446744073709551615 1 - 600 33 600 34 18446744073709551615 1 1 600 35 600 36 18446744073709551615 1 ; 600 36 600 37 18446744073709551615 3 int 601 3 601 6 18446744073709551615 5 count 601 7 601 12 173 1 = 601 13 601 14 18446744073709551615 10 ForCounter 601 15 601 25 18446744073709551615 1 [ 601 25 601 26 18446744073709551615 10 ForCounter 601 26 601 36 18446744073709551615 1 . 601 36 601 37 18446744073709551615 4 size 601 37 601 41 18446744073709551615 1 ( 601 41 601 42 18446744073709551615 1 ) 601 42 601 43 18446744073709551615 1 - 601 44 601 45 18446744073709551615 1 1 601 46 601 47 18446744073709551615 1 ] 601 47 601 48 18446744073709551615 1 ; 601 48 601 49 18446744073709551615 6 string 602 3 602 9 9 1 s 602 10 602 11 174 1 = 602 12 602 13 18446744073709551615 8 ForStack 602 14 602 22 18446744073709551615 1 [ 602 22 602 23 18446744073709551615 8 ForStack 602 23 602 31 18446744073709551615 1 . 602 31 602 32 18446744073709551615 4 size 602 32 602 36 18446744073709551615 1 ( 602 36 602 37 18446744073709551615 1 ) 602 37 602 38 18446744073709551615 1 - 602 39 602 40 18446744073709551615 1 1 602 41 602 42 18446744073709551615 1 ] 602 42 602 43 18446744073709551615 1 ; 602 43 602 44 18446744073709551615 33 //cout << "Debug: " << s << endl; 603 3 603 36 18446744073709551615 3 int 604 3 604 6 18446744073709551615 1 n 604 7 604 8 175 1 = 604 9 604 10 18446744073709551615 1 s 604 11 604 12 174 1 . 604 12 604 13 176 6 length 604 13 604 19 176 1 ( 604 19 604 20 176 1 ) 604 20 604 21 176 1 ; 604 21 604 22 18446744073709551615 28 // declaring character array 605 3 605 31 18446744073709551615 4 char 606 3 606 7 18446744073709551615 10 char_array 606 8 606 18 177 1 [ 606 18 606 19 18446744073709551615 1 n 606 19 606 20 175 1 + 606 21 606 22 18446744073709551615 1 1 606 23 606 24 18446744073709551615 1 ] 606 24 606 25 18446744073709551615 1 ; 606 25 606 26 18446744073709551615 30 // copying the contents of the 607 3 607 33 18446744073709551615 23 // string to char array 608 3 608 26 18446744073709551615 25 //is_in_for_loop = false; 609 3 609 28 18446744073709551615 6 strcpy 610 3 610 9 178 1 ( 610 9 610 10 178 10 char_array 610 10 610 20 177 1 , 610 20 610 21 178 1 s 610 22 610 23 174 1 . 610 23 610 24 179 5 c_str 610 24 610 29 179 1 ( 610 29 610 30 179 1 ) 610 30 610 31 179 1 ) 610 31 610 32 178 1 ; 610 32 610 33 18446744073709551615 3 for 611 3 611 6 18446744073709551615 1 ( 611 7 611 8 18446744073709551615 3 int 611 8 611 11 18446744073709551615 1 i 611 12 611 13 180 1 = 611 14 611 15 18446744073709551615 1 1 611 16 611 17 18446744073709551615 1 ; 611 17 611 18 18446744073709551615 1 i 611 19 611 20 180 1 < 611 21 611 22 18446744073709551615 5 count 611 23 611 28 173 1 ; 611 28 611 29 18446744073709551615 1 i 611 30 611 31 180 2 ++ 611 31 611 33 18446744073709551615 1 ) 611 33 611 34 18446744073709551615 1 { 611 35 611 36 18446744073709551615 3 for 612 5 612 8 18446744073709551615 1 ( 612 9 612 10 18446744073709551615 3 int 612 10 612 13 18446744073709551615 1 j 612 14 612 15 181 1 = 612 16 612 17 18446744073709551615 1 0 612 18 612 19 18446744073709551615 1 ; 612 19 612 20 18446744073709551615 1 j 612 21 612 22 181 1 < 612 23 612 24 18446744073709551615 1 n 612 25 612 26 175 1 ; 612 26 612 27 18446744073709551615 1 j 612 28 612 29 181 2 ++ 612 29 612 31 18446744073709551615 1 ) 612 31 612 32 18446744073709551615 1 { 612 33 612 34 18446744073709551615 31 //cout << "For: " << j << endl; 613 7 613 38 18446744073709551615 16 InterpretCommand 614 7 614 23 1 1 ( 614 23 614 24 1 10 char_array 614 24 614 34 177 1 [ 614 34 614 35 18446744073709551615 1 j 614 35 614 36 181 1 ] 614 36 614 37 18446744073709551615 1 ) 614 37 614 38 1 1 ; 614 38 614 39 18446744073709551615 1 } 615 5 615 6 18446744073709551615 1 } 616 3 616 4 18446744073709551615 22 //ForStack.pop_back(); 617 3 617 25 18446744073709551615 24 //ForCounter.pop_back(); 618 3 618 27 18446744073709551615 10 ForCounter 619 3 619 13 18446744073709551615 1 . 619 13 619 14 18446744073709551615 5 erase 619 14 619 19 18446744073709551615 1 ( 619 19 619 20 18446744073709551615 10 ForCounter 619 20 619 30 18446744073709551615 1 . 619 30 619 31 18446744073709551615 5 begin 619 31 619 36 18446744073709551615 1 ( 619 36 619 37 18446744073709551615 1 ) 619 37 619 38 18446744073709551615 1 + 619 39 619 40 18446744073709551615 5 where 619 41 619 46 18446744073709551615 1 ) 619 46 619 47 18446744073709551615 1 ; 619 47 619 48 18446744073709551615 8 ForStack 620 3 620 11 18446744073709551615 1 . 620 11 620 12 18446744073709551615 5 erase 620 12 620 17 18446744073709551615 1 ( 620 17 620 18 18446744073709551615 8 ForStack 620 18 620 26 18446744073709551615 1 . 620 26 620 27 18446744073709551615 5 begin 620 27 620 32 18446744073709551615 1 ( 620 32 620 33 18446744073709551615 1 ) 620 33 620 34 18446744073709551615 1 + 620 35 620 36 18446744073709551615 5 where 620 37 620 42 18446744073709551615 1 ) 620 42 620 43 18446744073709551615 1 ; 620 43 620 44 18446744073709551615 2 if 621 3 621 5 18446744073709551615 1 ( 621 6 621 7 18446744073709551615 10 ForCounter 621 7 621 17 18446744073709551615 1 . 621 17 621 18 18446744073709551615 4 size 621 18 621 22 18446744073709551615 1 ( 621 22 621 23 18446744073709551615 1 ) 621 23 621 24 18446744073709551615 2 == 621 25 621 27 18446744073709551615 1 0 621 28 621 29 18446744073709551615 2 && 621 30 621 32 18446744073709551615 8 ForStack 621 33 621 41 18446744073709551615 1 . 621 41 621 42 18446744073709551615 4 size 621 42 621 46 18446744073709551615 1 ( 621 46 621 47 18446744073709551615 1 ) 621 47 621 48 18446744073709551615 2 == 621 49 621 51 18446744073709551615 1 0 621 52 621 53 18446744073709551615 1 ) 621 53 621 54 18446744073709551615 1 { 621 55 621 56 18446744073709551615 14 is_in_for_loop 622 5 622 19 15 1 = 622 20 622 21 18446744073709551615 5 false 622 22 622 27 18446744073709551615 1 ; 622 27 622 28 18446744073709551615 1 } 623 3 623 4 18446744073709551615 4 else 623 5 623 9 18446744073709551615 1 { 623 10 623 11 18446744073709551615 14 is_in_for_loop 624 5 624 19 15 1 = 624 20 624 21 18446744073709551615 4 true 624 22 624 26 18446744073709551615 1 ; 624 26 624 27 18446744073709551615 1 } 625 3 625 4 18446744073709551615 6 return 626 3 626 9 18446744073709551615 1 0 626 10 626 11 18446744073709551615 1 ; 626 11 626 12 18446744073709551615 1 } 627 1 627 2 18446744073709551615 3 int 628 1 628 4 18446744073709551615 9 TruthLoop 628 5 628 14 182 1 ( 628 14 628 15 182 1 ) 628 15 628 16 182 1 { 628 17 628 18 18446744073709551615 2 if 629 3 629 5 18446744073709551615 1 ( 629 6 629 7 18446744073709551615 5 Stack 629 7 629 12 18446744073709551615 1 . 629 12 629 13 18446744073709551615 4 size 629 13 629 17 18446744073709551615 1 ( 629 17 629 18 18446744073709551615 1 ) 629 18 629 19 18446744073709551615 2 == 629 20 629 22 18446744073709551615 1 0 629 23 629 24 18446744073709551615 1 ) 629 24 629 25 18446744073709551615 1 { 629 26 629 27 18446744073709551615 6 return 630 5 630 11 18446744073709551615 1 2 630 12 630 13 18446744073709551615 1 ; 630 13 630 14 18446744073709551615 1 } 631 3 631 4 18446744073709551615 3 int 632 3 632 6 18446744073709551615 3 len 632 7 632 10 183 1 = 632 11 632 12 18446744073709551615 5 Stack 632 13 632 18 18446744073709551615 1 . 632 18 632 19 18446744073709551615 4 size 632 19 632 23 18446744073709551615 1 ( 632 23 632 24 18446744073709551615 1 ) 632 24 632 25 18446744073709551615 1 - 632 26 632 27 18446744073709551615 1 1 632 28 632 29 18446744073709551615 1 ; 632 29 632 30 18446744073709551615 13 StackVariable 633 3 633 16 6 3 tmp 633 17 633 20 184 1 = 633 21 633 22 18446744073709551615 5 Stack 633 23 633 28 18446744073709551615 1 [ 633 28 633 29 18446744073709551615 3 len 633 29 633 32 18446744073709551615 1 ] 633 32 633 33 18446744073709551615 1 ; 633 33 633 34 18446744073709551615 16 is_in_truth_loop 634 3 634 19 18 1 = 634 20 634 21 18446744073709551615 4 true 634 22 634 26 18446744073709551615 1 ; 634 26 634 27 18446744073709551615 4 bool 635 3 635 7 18446744073709551615 7 execute 635 8 635 15 185 1 = 635 16 635 17 18446744073709551615 5 false 635 18 635 23 18446744073709551615 1 ; 635 23 635 24 18446744073709551615 2 if 636 3 636 5 18446744073709551615 1 ( 636 6 636 7 18446744073709551615 3 tmp 636 7 636 10 184 1 . 636 10 636 11 18446744073709551615 4 Type 636 11 636 15 7 2 == 636 16 636 18 18446744073709551615 6 number 636 19 636 25 4 1 ) 636 25 636 26 18446744073709551615 1 { 636 27 636 28 18446744073709551615 2 if 637 5 637 7 18446744073709551615 1 ( 637 8 637 9 18446744073709551615 3 tmp 637 9 637 12 184 1 . 637 12 637 13 18446744073709551615 6 number 637 13 637 19 8 2 != 637 20 637 22 18446744073709551615 1 0 637 23 637 24 18446744073709551615 1 ) 637 24 637 25 18446744073709551615 1 { 637 26 637 27 18446744073709551615 7 execute 638 7 638 14 185 1 = 638 15 638 16 18446744073709551615 4 true 638 17 638 21 18446744073709551615 1 ; 638 21 638 22 18446744073709551615 1 } 639 5 639 6 18446744073709551615 1 } 640 3 640 4 18446744073709551615 4 else 640 5 640 9 18446744073709551615 1 { 640 10 640 11 18446744073709551615 7 execute 641 5 641 12 185 1 = 641 13 641 14 18446744073709551615 5 false 641 15 641 20 18446744073709551615 1 ; 641 20 641 21 18446744073709551615 1 } 642 3 642 4 18446744073709551615 10 TruthStack 643 3 643 13 16 1 . 643 13 643 14 18446744073709551615 9 push_back 643 14 643 23 186 1 ( 643 23 643 24 18446744073709551615 3 ";" 643 24 643 27 18446744073709551615 1 ) 643 27 643 28 18446744073709551615 1 ; 643 28 643 29 18446744073709551615 9 TruthBool 644 3 644 12 18446744073709551615 1 . 644 12 644 13 18446744073709551615 9 push_back 644 13 644 22 18446744073709551615 1 ( 644 22 644 23 18446744073709551615 7 execute 644 23 644 30 18446744073709551615 1 ) 644 30 644 31 18446744073709551615 1 ; 644 31 644 32 18446744073709551615 6 return 645 3 645 9 18446744073709551615 1 0 645 10 645 11 18446744073709551615 1 ; 645 11 645 12 18446744073709551615 1 } 646 1 646 2 18446744073709551615 3 int 647 1 647 4 18446744073709551615 12 EndTruthLoop 647 5 647 17 187 1 ( 647 17 647 18 187 1 ) 647 18 647 19 187 1 { 647 20 647 21 18446744073709551615 2 if 648 3 648 5 18446744073709551615 1 ( 648 6 648 7 18446744073709551615 5 Stack 648 7 648 12 18446744073709551615 1 . 648 12 648 13 18446744073709551615 4 size 648 13 648 17 18446744073709551615 1 ( 648 17 648 18 18446744073709551615 1 ) 648 18 648 19 18446744073709551615 2 == 648 20 648 22 18446744073709551615 1 0 648 23 648 24 18446744073709551615 1 ) 648 24 648 25 18446744073709551615 1 { 648 26 648 27 18446744073709551615 6 return 649 5 649 11 18446744073709551615 1 2 649 12 649 13 18446744073709551615 1 ; 649 13 649 14 18446744073709551615 1 } 650 3 650 4 18446744073709551615 2 if 651 3 651 5 18446744073709551615 1 ( 651 6 651 7 18446744073709551615 10 TruthStack 651 7 651 17 18446744073709551615 1 . 651 17 651 18 18446744073709551615 4 size 651 18 651 22 18446744073709551615 1 ( 651 22 651 23 18446744073709551615 1 ) 651 23 651 24 18446744073709551615 2 == 651 25 651 27 18446744073709551615 1 0 651 28 651 29 18446744073709551615 2 || 651 30 651 32 18446744073709551615 9 TruthBool 651 33 651 42 18446744073709551615 1 . 651 42 651 43 18446744073709551615 4 size 651 43 651 47 18446744073709551615 1 ( 651 47 651 48 18446744073709551615 1 ) 651 48 651 49 18446744073709551615 2 == 651 50 651 52 18446744073709551615 1 0 651 53 651 54 18446744073709551615 1 ) 651 54 651 55 18446744073709551615 1 { 651 56 651 57 18446744073709551615 2 if 652 5 652 7 18446744073709551615 1 ( 652 8 652 9 18446744073709551615 9 TruthBool 652 9 652 18 18446744073709551615 1 . 652 18 652 19 18446744073709551615 4 size 652 19 652 23 18446744073709551615 1 ( 652 23 652 24 18446744073709551615 1 ) 652 24 652 25 18446744073709551615 2 != 652 26 652 28 18446744073709551615 1 0 652 29 652 30 18446744073709551615 1 ) 652 30 652 31 18446744073709551615 1 { 652 32 652 33 18446744073709551615 10 TruthStack 653 7 653 17 16 1 . 653 17 653 18 188 8 pop_back 653 18 653 26 188 1 ( 653 26 653 27 188 1 ) 653 27 653 28 188 1 ; 653 28 653 29 18446744073709551615 9 TruthBool 654 7 654 16 18446744073709551615 1 . 654 16 654 17 18446744073709551615 8 pop_back 654 17 654 25 18446744073709551615 1 ( 654 25 654 26 18446744073709551615 1 ) 654 26 654 27 18446744073709551615 1 ; 654 27 654 28 18446744073709551615 1 } 655 5 655 6 18446744073709551615 2 if 656 5 656 7 18446744073709551615 1 ( 656 8 656 9 18446744073709551615 10 TruthStack 656 9 656 19 16 1 . 656 19 656 20 189 4 size 656 20 656 24 189 1 ( 656 24 656 25 189 1 ) 656 25 656 26 189 2 == 656 27 656 29 18446744073709551615 1 0 656 30 656 31 18446744073709551615 1 ) 656 31 656 32 18446744073709551615 1 { 656 33 656 34 18446744073709551615 16 is_in_truth_loop 657 7 657 23 18 1 = 657 24 657 25 18446744073709551615 5 false 657 26 657 31 18446744073709551615 1 ; 657 31 657 32 18446744073709551615 1 } 658 5 658 6 18446744073709551615 6 return 659 5 659 11 18446744073709551615 2 13 659 12 659 14 18446744073709551615 1 ; 659 14 659 15 18446744073709551615 1 } 660 3 660 4 18446744073709551615 3 int 661 3 661 6 18446744073709551615 3 len 661 7 661 10 190 1 = 661 11 661 12 18446744073709551615 5 Stack 661 13 661 18 18446744073709551615 1 . 661 18 661 19 18446744073709551615 4 size 661 19 661 23 18446744073709551615 1 ( 661 23 661 24 18446744073709551615 1 ) 661 24 661 25 18446744073709551615 1 - 661 26 661 27 18446744073709551615 1 1 661 28 661 29 18446744073709551615 1 ; 661 29 661 30 18446744073709551615 13 StackVariable 662 3 662 16 6 3 tmp 662 17 662 20 191 1 = 662 21 662 22 18446744073709551615 5 Stack 662 23 662 28 18446744073709551615 1 [ 662 28 662 29 18446744073709551615 3 len 662 29 662 32 18446744073709551615 1 ] 662 32 662 33 18446744073709551615 1 ; 662 33 662 34 18446744073709551615 16 is_in_truth_loop 663 3 663 19 18 1 = 663 20 663 21 18446744073709551615 4 true 663 22 663 26 18446744073709551615 1 ; 663 26 663 27 18446744073709551615 4 bool 664 3 664 7 18446744073709551615 7 execute 664 8 664 15 192 1 = 664 16 664 17 18446744073709551615 5 false 664 18 664 23 18446744073709551615 1 ; 664 23 664 24 18446744073709551615 2 if 665 3 665 5 18446744073709551615 1 ( 665 6 665 7 18446744073709551615 3 tmp 665 7 665 10 191 1 . 665 10 665 11 18446744073709551615 4 Type 665 11 665 15 7 2 == 665 16 665 18 18446744073709551615 6 number 665 19 665 25 4 1 ) 665 25 665 26 18446744073709551615 1 { 665 27 665 28 18446744073709551615 2 if 666 5 666 7 18446744073709551615 1 ( 666 8 666 9 18446744073709551615 3 tmp 666 9 666 12 191 1 . 666 12 666 13 18446744073709551615 6 number 666 13 666 19 8 2 != 666 20 666 22 18446744073709551615 1 0 666 23 666 24 18446744073709551615 1 ) 666 24 666 25 18446744073709551615 1 { 666 26 666 27 18446744073709551615 7 execute 667 7 667 14 192 1 = 667 15 667 16 18446744073709551615 4 true 667 17 667 21 18446744073709551615 1 ; 667 21 667 22 18446744073709551615 1 } 668 5 668 6 18446744073709551615 1 } 669 3 669 4 18446744073709551615 4 else 669 5 669 9 18446744073709551615 1 { 669 10 669 11 18446744073709551615 7 execute 670 5 670 12 192 1 = 670 13 670 14 18446744073709551615 5 false 670 15 670 20 18446744073709551615 1 ; 670 20 670 21 18446744073709551615 1 } 671 3 671 4 18446744073709551615 36 //cout << "EX: " << execute << endl; 672 3 672 39 18446744073709551615 2 if 673 3 673 5 18446744073709551615 1 ( 673 6 673 7 18446744073709551615 7 execute 673 7 673 14 192 2 == 673 15 673 17 18446744073709551615 5 false 673 18 673 23 18446744073709551615 1 ) 673 23 673 24 18446744073709551615 1 { 673 25 673 26 18446744073709551615 2 if 674 5 674 7 18446744073709551615 1 ( 674 8 674 9 18446744073709551615 9 TruthBool 674 9 674 18 18446744073709551615 1 . 674 18 674 19 18446744073709551615 4 size 674 19 674 23 18446744073709551615 1 ( 674 23 674 24 18446744073709551615 1 ) 674 24 674 25 18446744073709551615 2 != 674 26 674 28 18446744073709551615 1 0 674 29 674 30 18446744073709551615 1 ) 674 30 674 31 18446744073709551615 1 { 674 32 674 33 18446744073709551615 10 TruthStack 675 7 675 17 16 1 . 675 17 675 18 188 8 pop_back 675 18 675 26 188 1 ( 675 26 675 27 188 1 ) 675 27 675 28 188 1 ; 675 28 675 29 18446744073709551615 9 TruthBool 676 7 676 16 18446744073709551615 1 . 676 16 676 17 18446744073709551615 8 pop_back 676 17 676 25 18446744073709551615 1 ( 676 25 676 26 18446744073709551615 1 ) 676 26 676 27 18446744073709551615 1 ; 676 27 676 28 18446744073709551615 1 } 677 5 677 6 18446744073709551615 2 if 678 5 678 7 18446744073709551615 1 ( 678 8 678 9 18446744073709551615 10 TruthStack 678 9 678 19 16 1 . 678 19 678 20 189 4 size 678 20 678 24 189 1 ( 678 24 678 25 189 1 ) 678 25 678 26 189 2 == 678 27 678 29 18446744073709551615 1 0 678 30 678 31 18446744073709551615 1 ) 678 31 678 32 18446744073709551615 1 { 678 33 678 34 18446744073709551615 16 is_in_truth_loop 679 7 679 23 18 1 = 679 24 679 25 18446744073709551615 5 false 679 26 679 31 18446744073709551615 1 ; 679 31 679 32 18446744073709551615 1 } 680 5 680 6 18446744073709551615 1 } 681 3 681 4 18446744073709551615 4 else 681 5 681 9 18446744073709551615 1 { 681 10 681 11 18446744073709551615 26 // cout << "here" << endl; 682 5 682 31 18446744073709551615 6 string 683 5 683 11 9 1 s 683 12 683 13 193 1 = 683 14 683 15 18446744073709551615 10 TruthStack 683 16 683 26 18446744073709551615 1 [ 683 26 683 27 18446744073709551615 10 TruthStack 683 27 683 37 18446744073709551615 1 . 683 37 683 38 18446744073709551615 4 size 683 38 683 42 18446744073709551615 1 ( 683 42 683 43 18446744073709551615 1 ) 683 43 683 44 18446744073709551615 1 - 683 45 683 46 18446744073709551615 1 1 683 47 683 48 18446744073709551615 1 ] 683 48 683 49 18446744073709551615 1 ; 683 49 683 50 18446744073709551615 33 //cout << "Debug: " << s << endl; 684 5 684 38 18446744073709551615 3 int 685 5 685 8 18446744073709551615 1 n 685 9 685 10 194 1 = 685 11 685 12 18446744073709551615 1 s 685 13 685 14 193 1 . 685 14 685 15 176 6 length 685 15 685 21 176 1 ( 685 21 685 22 176 1 ) 685 22 685 23 176 1 ; 685 23 685 24 18446744073709551615 28 // declaring character array 686 5 686 33 18446744073709551615 4 char 687 5 687 9 18446744073709551615 10 char_array 687 10 687 20 195 1 [ 687 20 687 21 18446744073709551615 1 n 687 21 687 22 194 1 + 687 23 687 24 18446744073709551615 1 1 687 25 687 26 18446744073709551615 1 ] 687 26 687 27 18446744073709551615 1 ; 687 27 687 28 18446744073709551615 30 // copying the contents of the 688 5 688 35 18446744073709551615 23 // string to char array 689 5 689 28 18446744073709551615 6 strcpy 690 5 690 11 178 1 ( 690 11 690 12 178 10 char_array 690 12 690 22 195 1 , 690 22 690 23 178 1 s 690 24 690 25 193 1 . 690 25 690 26 179 5 c_str 690 26 690 31 179 1 ( 690 31 690 32 179 1 ) 690 32 690 33 179 1 ) 690 33 690 34 178 1 ; 690 34 690 35 18446744073709551615 16 is_reinterpreted 691 5 691 21 19 1 = 691 22 691 23 18446744073709551615 4 true 691 24 691 28 18446744073709551615 1 ; 691 28 691 29 18446744073709551615 3 for 692 5 692 8 18446744073709551615 1 ( 692 9 692 10 18446744073709551615 3 int 692 10 692 13 18446744073709551615 1 i 692 14 692 15 196 1 = 692 16 692 17 18446744073709551615 1 0 692 18 692 19 18446744073709551615 1 ; 692 19 692 20 18446744073709551615 1 i 692 21 692 22 196 1 < 692 23 692 24 18446744073709551615 1 n 692 25 692 26 194 1 ; 692 26 692 27 18446744073709551615 1 i 692 28 692 29 196 2 ++ 692 29 692 31 18446744073709551615 1 ) 692 31 692 32 18446744073709551615 1 { 692 33 692 34 18446744073709551615 34 // cout << "Truth Loop: " << endl; 693 7 693 41 18446744073709551615 16 InterpretCommand 694 7 694 23 1 1 ( 694 23 694 24 1 10 char_array 694 24 694 34 195 1 [ 694 34 694 35 18446744073709551615 1 i 694 35 694 36 196 1 ] 694 36 694 37 18446744073709551615 1 ) 694 37 694 38 1 1 ; 694 38 694 39 18446744073709551615 1 } 695 5 695 6 18446744073709551615 16 is_reinterpreted 696 5 696 21 19 1 = 696 22 696 23 18446744073709551615 5 false 696 24 696 29 18446744073709551615 1 ; 696 29 696 30 18446744073709551615 1 } 697 3 697 4 18446744073709551615 6 return 699 3 699 9 18446744073709551615 1 0 699 10 699 11 18446744073709551615 1 ; 699 11 699 12 18446744073709551615 1 } 700 1 700 2 18446744073709551615 3 int 701 1 701 4 18446744073709551615 16 InterpretCommand 701 5 701 21 1 1 ( 701 21 701 22 1 4 char 701 22 701 26 18446744073709551615 3 com 701 27 701 30 197 1 ) 701 30 701 31 1 1 { 701 32 701 33 18446744073709551615 3 int 702 3 702 6 18446744073709551615 3 out 702 7 702 10 198 1 = 702 11 702 12 18446744073709551615 1 0 702 13 702 14 18446744073709551615 1 ; 702 14 702 15 18446744073709551615 11 cur_command 703 3 703 14 22 1 = 703 15 703 16 18446744073709551615 3 com 703 17 703 20 197 1 ; 703 20 703 21 18446744073709551615 37 //cout << "Command: " << com << endl; 704 3 704 40 18446744073709551615 240 /*cout << "Code Block Counter: " << code_block_counter << endl;
  if (interpret_if.size() != 0) {
    cout << "If Stack Size: " << interpret_if.size() << endl;
    cout << "If Stack: " << interpret_if[interpret_if.size() - 1] << endl;
  }*/ 705 3 709 6 18446744073709551615 4 bool 710 3 710 7 18446744073709551615 7 bollean 710 8 710 15 199 1 = 710 16 710 17 18446744073709551615 5 false 710 18 710 23 18446744073709551615 1 ; 710 23 710 24 18446744073709551615 2 if 711 3 711 5 18446744073709551615 1 ( 711 6 711 7 18446744073709551615 12 interpret_if 711 7 711 19 26 1 . 711 19 711 20 189 4 size 711 20 711 24 189 1 ( 711 24 711 25 189 1 ) 711 25 711 26 189 2 != 711 27 711 29 18446744073709551615 1 0 711 30 711 31 18446744073709551615 1 ) 711 31 711 32 18446744073709551615 1 { 711 33 711 34 18446744073709551615 3 int 712 5 712 8 18446744073709551615 1 s 712 9 712 10 200 1 = 712 11 712 12 18446744073709551615 12 interpret_if 712 13 712 25 26 1 . 712 25 712 26 189 4 size 712 26 712 30 189 1 ( 712 30 712 31 189 1 ) 712 31 712 32 189 1 - 712 33 712 34 18446744073709551615 1 1 712 35 712 36 18446744073709551615 1 ; 712 36 712 37 18446744073709551615 7 bollean 713 5 713 12 199 1 = 713 13 713 14 18446744073709551615 12 interpret_if 713 15 713 27 26 1 [ 713 27 713 28 201 1 s 713 28 713 29 200 1 ] 713 29 713 30 201 1 ; 713 30 713 31 18446744073709551615 1 } 714 3 714 4 18446744073709551615 2 if 715 3 715 5 18446744073709551615 1 ( 715 6 715 7 18446744073709551615 3 com 715 7 715 10 197 2 == 715 11 715 13 18446744073709551615 3 '{' 715 14 715 17 18446744073709551615 1 ) 715 17 715 18 18446744073709551615 1 { 715 19 715 20 18446744073709551615 18 code_block_counter 716 5 716 23 11 2 ++ 716 23 716 25 18446744073709551615 1 ; 716 25 716 26 18446744073709551615 1 } 717 3 717 4 18446744073709551615 2 if 718 3 718 5 18446744073709551615 1 ( 718 6 718 7 18446744073709551615 3 com 718 7 718 10 197 2 == 718 11 718 13 18446744073709551615 3 '}' 718 14 718 17 18446744073709551615 1 ) 718 17 718 18 18446744073709551615 1 { 718 19 718 20 18446744073709551615 18 code_block_counter 719 5 719 23 11 2 -- 719 23 719 25 18446744073709551615 1 ; 719 25 719 26 18446744073709551615 1 } 720 3 720 4 18446744073709551615 4 bool 722 3 722 7 18446744073709551615 13 in_truth_loop 722 8 722 21 202 1 = 722 22 722 23 18446744073709551615 5 false 722 24 722 29 18446744073709551615 1 ; 722 29 722 30 18446744073709551615 2 if 723 3 723 5 18446744073709551615 1 ( 723 6 723 7 18446744073709551615 9 TruthBool 723 7 723 16 18446744073709551615 1 . 723 16 723 17 18446744073709551615 4 size 723 17 723 21 18446744073709551615 1 ( 723 21 723 22 18446744073709551615 1 ) 723 22 723 23 18446744073709551615 2 != 723 24 723 26 18446744073709551615 1 0 723 27 723 28 18446744073709551615 1 ) 723 28 723 29 18446744073709551615 1 { 723 30 723 31 18446744073709551615 3 int 724 5 724 8 18446744073709551615 1 s 724 9 724 10 203 1 = 724 11 724 12 18446744073709551615 9 TruthBool 724 13 724 22 18446744073709551615 1 . 724 22 724 23 18446744073709551615 4 size 724 23 724 27 18446744073709551615 1 ( 724 27 724 28 18446744073709551615 1 ) 724 28 724 29 18446744073709551615 1 - 724 30 724 31 18446744073709551615 1 1 724 32 724 33 18446744073709551615 1 ; 724 33 724 34 18446744073709551615 13 in_truth_loop 725 5 725 18 18446744073709551615 1 = 725 19 725 20 18446744073709551615 9 TruthBool 725 21 725 30 18446744073709551615 1 [ 725 30 725 31 18446744073709551615 1 s 725 31 725 32 18446744073709551615 1 ] 725 32 725 33 18446744073709551615 1 ; 725 33 725 34 18446744073709551615 32 //cout << in_truth_loop << endl; 726 5 726 37 18446744073709551615 1 } 727 3 727 4 18446744073709551615 2 if 728 3 728 5 18446744073709551615 1 ( 728 6 728 7 18446744073709551615 1 ! 728 7 728 8 18446744073709551615 22 interpret_next_command 728 8 728 30 24 1 ) 728 30 728 31 18446744073709551615 1 { 728 32 728 33 18446744073709551615 12 data_handler 729 5 729 17 25 1 = 729 18 729 19 54 12 data_handler 729 20 729 32 25 1 + 729 33 729 34 149 3 com 729 35 729 38 197 1 ; 729 38 729 39 18446744073709551615 22 interpret_next_command 730 5 730 27 24 1 = 730 28 730 29 18446744073709551615 4 true 730 30 730 34 18446744073709551615 1 ; 730 34 730 35 18446744073709551615 4 goto 731 5 731 9 18446744073709551615 3 end 731 10 731 13 140 1 ; 731 13 731 14 18446744073709551615 1 } 732 3 732 4 18446744073709551615 2 if 733 3 733 5 18446744073709551615 1 ( 733 6 733 7 18446744073709551615 13 is_in_comment 733 7 733 20 20 1 ) 733 20 733 21 18446744073709551615 1 { 733 22 733 23 18446744073709551615 2 if 734 5 734 7 18446744073709551615 1 ( 734 8 734 9 18446744073709551615 3 com 734 9 734 12 197 2 == 734 13 734 15 18446744073709551615 4 '\"' 734 16 734 20 18446744073709551615 1 ) 734 20 734 21 18446744073709551615 1 { 734 22 734 23 18446744073709551615 13 is_in_comment 735 7 735 20 20 1 = 735 21 735 22 18446744073709551615 5 false 735 23 735 28 18446744073709551615 1 ; 735 28 735 29 18446744073709551615 1 } 736 5 736 6 18446744073709551615 4 goto 737 5 737 9 18446744073709551615 3 end 737 10 737 13 140 1 ; 737 13 737 14 18446744073709551615 1 } 738 3 738 4 18446744073709551615 2 if 739 3 739 5 18446744073709551615 1 ( 739 6 739 7 18446744073709551615 13 in_truth_loop 739 7 739 20 202 2 && 739 21 739 23 18446744073709551615 16 is_in_truth_loop 739 24 739 40 18 2 && 739 41 739 43 18446744073709551615 1 ! 739 44 739 45 18446744073709551615 16 is_reinterpreted 739 45 739 61 19 1 ) 739 61 739 62 18446744073709551615 1 { 739 63 739 64 18446744073709551615 32 // this will cause trouble later 739 65 739 97 18446744073709551615 10 TruthStack 740 5 740 15 18446744073709551615 1 [ 740 15 740 16 18446744073709551615 10 TruthStack 740 16 740 26 18446744073709551615 1 . 740 26 740 27 18446744073709551615 4 size 740 27 740 31 18446744073709551615 1 ( 740 31 740 32 18446744073709551615 1 ) 740 32 740 33 18446744073709551615 1 - 740 34 740 35 18446744073709551615 1 1 740 36 740 37 18446744073709551615 1 ] 740 37 740 38 18446744073709551615 1 = 740 39 740 40 18446744073709551615 10 TruthStack 740 41 740 51 18446744073709551615 1 [ 740 51 740 52 18446744073709551615 10 TruthStack 740 52 740 62 18446744073709551615 1 . 740 62 740 63 18446744073709551615 4 size 740 63 740 67 18446744073709551615 1 ( 740 67 740 68 18446744073709551615 1 ) 740 68 740 69 18446744073709551615 1 - 740 70 740 71 18446744073709551615 1 1 740 72 740 73 18446744073709551615 1 ] 740 73 740 74 18446744073709551615 1 + 740 75 740 76 18446744073709551615 3 com 740 77 740 80 18446744073709551615 1 ; 740 80 740 81 18446744073709551615 32 //cout << TruthStack[0] << endl; 741 5 741 37 18446744073709551615 1 } 742 3 742 4 18446744073709551615 2 if 744 3 744 5 18446744073709551615 1 ( 744 6 744 7 18446744073709551615 1 ! 744 7 744 8 18446744073709551615 13 in_truth_loop 744 8 744 21 202 2 && 744 22 744 24 18446744073709551615 16 is_in_truth_loop 744 25 744 41 18 2 && 744 42 744 44 18446744073709551615 3 com 744 45 744 48 197 2 != 744 49 744 51 18446744073709551615 3 ')' 744 52 744 55 18446744073709551615 1 ) 744 55 744 56 18446744073709551615 1 { 744 57 744 58 18446744073709551615 4 goto 745 5 745 9 18446744073709551615 3 end 745 10 745 13 140 1 ; 745 13 745 14 18446744073709551615 1 } 746 3 746 4 18446744073709551615 2 if 747 3 747 5 18446744073709551615 1 ( 747 6 747 7 18446744073709551615 7 bollean 747 7 747 14 199 2 == 747 15 747 17 18446744073709551615 5 false 747 18 747 23 18446744073709551615 2 && 747 24 747 26 18446744073709551615 16 is_in_code_block 747 27 747 43 27 2 == 747 44 747 46 18446744073709551615 4 true 747 47 747 51 18446744073709551615 2 && 747 52 747 54 18446744073709551615 3 com 747 55 747 58 197 2 != 747 59 747 61 18446744073709551615 3 '}' 747 62 747 65 18446744073709551615 1 ) 747 65 747 66 18446744073709551615 1 { 747 67 747 68 18446744073709551615 4 goto 748 5 748 9 18446744073709551615 3 end 748 10 748 13 140 1 ; 748 13 748 14 18446744073709551615 1 } 749 3 749 4 18446744073709551615 2 if 750 3 750 5 18446744073709551615 1 ( 750 6 750 7 18446744073709551615 14 is_in_for_loop 750 7 750 21 15 2 && 750 22 750 24 18446744073709551615 3 com 750 25 750 28 197 2 != 750 29 750 31 18446744073709551615 3 ']' 750 32 750 35 18446744073709551615 1 ) 750 35 750 36 18446744073709551615 1 { 750 37 750 38 18446744073709551615 8 ForStack 751 5 751 13 18446744073709551615 1 [ 751 13 751 14 18446744073709551615 8 ForStack 751 14 751 22 18446744073709551615 1 . 751 22 751 23 18446744073709551615 4 size 751 23 751 27 18446744073709551615 1 ( 751 27 751 28 18446744073709551615 1 ) 751 28 751 29 18446744073709551615 1 - 751 30 751 31 18446744073709551615 1 1 751 32 751 33 18446744073709551615 1 ] 751 33 751 34 18446744073709551615 1 = 751 35 751 36 18446744073709551615 8 ForStack 751 37 751 45 18446744073709551615 1 [ 751 45 751 46 18446744073709551615 8 ForStack 751 46 751 54 18446744073709551615 1 . 751 54 751 55 18446744073709551615 4 size 751 55 751 59 18446744073709551615 1 ( 751 59 751 60 18446744073709551615 1 ) 751 60 751 61 18446744073709551615 1 - 751 62 751 63 18446744073709551615 1 1 751 64 751 65 18446744073709551615 1 ] 751 65 751 66 18446744073709551615 1 + 751 67 751 68 18446744073709551615 3 com 751 69 751 72 18446744073709551615 1 ; 751 72 751 73 18446744073709551615 1 } 752 3 752 4 18446744073709551615 2 if 753 3 753 5 18446744073709551615 1 ( 753 6 753 7 18446744073709551615 14 is_in_for_loop 753 7 753 21 15 2 && 753 22 753 24 18446744073709551615 3 com 753 25 753 28 197 2 == 753 29 753 31 18446744073709551615 3 ']' 753 32 753 35 18446744073709551615 1 ) 753 35 753 36 18446744073709551615 1 { 753 37 753 38 18446744073709551615 2 if 754 5 754 7 18446744073709551615 1 ( 754 8 754 9 18446744073709551615 8 ForStack 754 9 754 17 18446744073709551615 1 . 754 17 754 18 18446744073709551615 4 size 754 18 754 22 18446744073709551615 1 ( 754 22 754 23 18446744073709551615 1 ) 754 23 754 24 18446744073709551615 1 > 754 25 754 26 18446744073709551615 1 1 754 27 754 28 18446744073709551615 1 ) 754 28 754 29 18446744073709551615 1 { 754 30 754 31 18446744073709551615 8 ForStack 755 7 755 15 18446744073709551615 1 [ 755 15 755 16 18446744073709551615 8 ForStack 755 16 755 24 18446744073709551615 1 . 755 24 755 25 18446744073709551615 4 size 755 25 755 29 18446744073709551615 1 ( 755 29 755 30 18446744073709551615 1 ) 755 30 755 31 18446744073709551615 1 - 755 32 755 33 18446744073709551615 1 2 755 34 755 35 18446744073709551615 1 ] 755 35 755 36 18446744073709551615 1 = 755 37 755 38 18446744073709551615 8 ForStack 755 39 755 47 18446744073709551615 1 [ 755 47 755 48 18446744073709551615 8 ForStack 755 48 755 56 18446744073709551615 1 . 755 56 755 57 18446744073709551615 4 size 755 57 755 61 18446744073709551615 1 ( 755 61 755 62 18446744073709551615 1 ) 755 62 755 63 18446744073709551615 1 - 755 64 755 65 18446744073709551615 1 2 755 66 755 67 18446744073709551615 1 ] 755 67 755 68 18446744073709551615 1 + 755 69 755 70 18446744073709551615 8 ForStack 755 71 755 79 18446744073709551615 1 [ 755 79 755 80 18446744073709551615 8 ForStack 755 80 755 88 18446744073709551615 1 . 755 88 755 89 18446744073709551615 4 size 755 89 755 93 18446744073709551615 1 ( 755 93 755 94 18446744073709551615 1 ) 755 94 755 95 18446744073709551615 1 - 755 96 755 97 18446744073709551615 1 1 755 98 755 99 18446744073709551615 1 ] 755 99 755 100 18446744073709551615 1 ; 755 100 755 101 18446744073709551615 8 ForStack 756 7 756 15 18446744073709551615 1 [ 756 15 756 16 18446744073709551615 8 ForStack 756 16 756 24 18446744073709551615 1 . 756 24 756 25 18446744073709551615 4 size 756 25 756 29 18446744073709551615 1 ( 756 29 756 30 18446744073709551615 1 ) 756 30 756 31 18446744073709551615 1 - 756 32 756 33 18446744073709551615 1 2 756 34 756 35 18446744073709551615 1 ] 756 35 756 36 18446744073709551615 1 = 756 37 756 38 18446744073709551615 8 ForStack 756 39 756 47 18446744073709551615 1 [ 756 47 756 48 18446744073709551615 8 ForStack 756 48 756 56 18446744073709551615 1 . 756 56 756 57 18446744073709551615 4 size 756 57 756 61 18446744073709551615 1 ( 756 61 756 62 18446744073709551615 1 ) 756 62 756 63 18446744073709551615 1 - 756 64 756 65 18446744073709551615 1 2 756 66 756 67 18446744073709551615 1 ] 756 67 756 68 18446744073709551615 1 + 756 69 756 70 18446744073709551615 3 com 756 71 756 74 18446744073709551615 1 ; 756 74 756 75 18446744073709551615 1 } 757 5 757 6 18446744073709551615 1 } 758 3 758 4 18446744073709551615 6 switch 759 3 759 9 18446744073709551615 1 ( 759 10 759 11 18446744073709551615 3 com 759 11 759 14 197 1 ) 759 14 759 15 18446744073709551615 1 { 759 16 759 17 18446744073709551615 4 case 760 3 760 7 18446744073709551615 3 '[' 760 8 760 11 18446744073709551615 1 : 760 11 760 12 18446744073709551615 17 DataHandlerUpdate 761 5 761 22 51 1 ( 761 22 761 23 51 1 ) 761 23 761 24 51 1 ; 761 24 761 25 18446744073709551615 3 out 762 5 762 8 198 1 = 762 9 762 10 18446744073709551615 7 ForLoop 762 11 762 18 167 1 ( 762 18 762 19 167 1 ) 762 19 762 20 167 1 ; 762 20 762 21 18446744073709551615 5 break 763 5 763 10 18446744073709551615 1 ; 763 10 763 11 18446744073709551615 4 case 764 3 764 7 18446744073709551615 3 ']' 764 8 764 11 18446744073709551615 1 : 764 11 764 12 18446744073709551615 17 DataHandlerUpdate 765 5 765 22 51 1 ( 765 22 765 23 51 1 ) 765 23 765 24 51 1 ; 765 24 765 25 18446744073709551615 3 out 766 5 766 8 198 1 = 766 9 766 10 18446744073709551615 10 EndForLoop 766 11 766 21 171 1 ( 766 21 766 22 171 1 ) 766 22 766 23 171 1 ; 766 23 766 24 18446744073709551615 5 break 767 5 767 10 18446744073709551615 1 ; 767 10 767 11 18446744073709551615 4 case 768 3 768 7 18446744073709551615 3 '(' 768 8 768 11 18446744073709551615 1 : 768 11 768 12 18446744073709551615 17 DataHandlerUpdate 769 5 769 22 51 1 ( 769 22 769 23 51 1 ) 769 23 769 24 51 1 ; 769 24 769 25 18446744073709551615 3 out 770 5 770 8 198 1 = 770 9 770 10 18446744073709551615 9 TruthLoop 770 11 770 20 182 1 ( 770 20 770 21 182 1 ) 770 21 770 22 182 1 ; 770 22 770 23 18446744073709551615 5 break 771 5 771 10 18446744073709551615 1 ; 771 10 771 11 18446744073709551615 4 case 772 3 772 7 18446744073709551615 3 ')' 772 8 772 11 18446744073709551615 1 : 772 11 772 12 18446744073709551615 17 DataHandlerUpdate 773 5 773 22 51 1 ( 773 22 773 23 51 1 ) 773 23 773 24 51 1 ; 773 24 773 25 18446744073709551615 24 //cout << "End" << endl; 774 5 774 29 18446744073709551615 3 out 775 5 775 8 198 1 = 775 9 775 10 18446744073709551615 12 EndTruthLoop 775 11 775 23 187 1 ( 775 23 775 24 187 1 ) 775 24 775 25 187 1 ; 775 25 775 26 18446744073709551615 5 break 776 5 776 10 18446744073709551615 1 ; 776 10 776 11 18446744073709551615 4 case 777 3 777 7 18446744073709551615 4 '\'' 777 8 777 12 18446744073709551615 1 : 777 12 777 13 18446744073709551615 17 DataHandlerUpdate 778 5 778 22 51 1 ( 778 22 778 23 51 1 ) 778 23 778 24 51 1 ; 778 24 778 25 18446744073709551615 3 out 779 5 779 8 198 1 = 779 9 779 10 18446744073709551615 12 RandomNumber 779 11 779 23 163 1 ( 779 23 779 24 163 1 ) 779 24 779 25 163 1 ; 779 25 779 26 18446744073709551615 5 break 780 5 780 10 18446744073709551615 1 ; 780 10 780 11 18446744073709551615 4 case 781 3 781 7 18446744073709551615 3 '|' 781 8 781 11 18446744073709551615 1 : 781 11 781 12 18446744073709551615 17 DataHandlerUpdate 782 5 782 22 51 1 ( 782 22 782 23 51 1 ) 782 23 782 24 51 1 ; 782 24 782 25 18446744073709551615 3 out 783 5 783 8 198 1 = 783 9 783 10 18446744073709551615 5 Split 783 11 783 16 155 1 ( 783 16 783 17 155 1 ) 783 17 783 18 155 1 ; 783 18 783 19 18446744073709551615 5 break 784 5 784 10 18446744073709551615 1 ; 784 10 784 11 18446744073709551615 4 case 785 3 785 7 18446744073709551615 3 '&' 785 8 785 11 18446744073709551615 1 : 785 11 785 12 18446744073709551615 17 DataHandlerUpdate 786 5 786 22 51 1 ( 786 22 786 23 51 1 ) 786 23 786 24 51 1 ; 786 24 786 25 18446744073709551615 3 out 787 5 787 8 198 1 = 787 9 787 10 18446744073709551615 17 DataHandlerAction 787 11 787 28 151 1 ( 787 28 787 29 151 1 ) 787 29 787 30 151 1 ; 787 30 787 31 18446744073709551615 5 break 788 5 788 10 18446744073709551615 1 ; 788 10 788 11 18446744073709551615 4 case 789 3 789 7 18446744073709551615 3 '^' 789 8 789 11 18446744073709551615 1 : 789 11 789 12 18446744073709551615 17 DataHandlerUpdate 790 5 790 22 51 1 ( 790 22 790 23 51 1 ) 790 23 790 24 51 1 ; 790 24 790 25 18446744073709551615 3 out 791 5 791 8 198 1 = 791 9 791 10 18446744073709551615 4 Join 791 11 791 15 141 1 ( 791 15 791 16 141 1 ) 791 16 791 17 141 1 ; 791 17 791 18 18446744073709551615 5 break 792 5 792 10 18446744073709551615 1 ; 792 10 792 11 18446744073709551615 4 case 793 3 793 7 18446744073709551615 3 '~' 793 8 793 11 18446744073709551615 1 : 793 11 793 12 18446744073709551615 17 DataHandlerUpdate 794 5 794 22 51 1 ( 794 22 794 23 51 1 ) 794 23 794 24 51 1 ; 794 24 794 25 18446744073709551615 3 out 795 5 795 8 198 1 = 795 9 795 10 18446744073709551615 7 Convert 795 11 795 18 135 1 ( 795 18 795 19 135 1 ) 795 19 795 20 135 1 ; 795 20 795 21 18446744073709551615 5 break 796 5 796 10 18446744073709551615 1 ; 796 10 796 11 18446744073709551615 4 case 797 3 797 7 18446744073709551615 3 '<' 797 8 797 11 18446744073709551615 1 : 797 11 797 12 18446744073709551615 17 DataHandlerUpdate 798 5 798 22 51 1 ( 798 22 798 23 51 1 ) 798 23 798 24 51 1 ; 798 24 798 25 18446744073709551615 3 out 799 5 799 8 198 1 = 799 9 799 10 18446744073709551615 11 SmallerThan 799 11 799 22 81 1 ( 799 22 799 23 81 1 ) 799 23 799 24 81 1 ; 799 24 799 25 18446744073709551615 5 break 800 5 800 10 18446744073709551615 1 ; 800 10 800 11 18446744073709551615 4 case 801 3 801 7 18446744073709551615 3 '>' 801 8 801 11 18446744073709551615 1 : 801 11 801 12 18446744073709551615 17 DataHandlerUpdate 802 5 802 22 51 1 ( 802 22 802 23 51 1 ) 802 23 802 24 51 1 ; 802 24 802 25 18446744073709551615 3 out 803 5 803 8 198 1 = 803 9 803 10 18446744073709551615 11 GreaterThan 803 11 803 22 89 1 ( 803 22 803 23 89 1 ) 803 23 803 24 89 1 ; 803 24 803 25 18446744073709551615 5 break 804 5 804 10 18446744073709551615 1 ; 804 10 804 11 18446744073709551615 4 case 805 3 805 7 18446744073709551615 3 '_' 805 8 805 11 18446744073709551615 1 : 805 11 805 12 18446744073709551615 17 DataHandlerUpdate 806 5 806 22 51 1 ( 806 22 806 23 51 1 ) 806 23 806 24 51 1 ; 806 24 806 25 18446744073709551615 3 out 807 5 807 8 198 1 = 807 9 807 10 18446744073709551615 6 Negate 807 11 807 17 132 1 ( 807 17 807 18 132 1 ) 807 18 807 19 132 1 ; 807 19 807 20 18446744073709551615 5 break 808 5 808 10 18446744073709551615 1 ; 808 10 808 11 18446744073709551615 4 case 809 3 809 7 18446744073709551615 3 '+' 809 8 809 11 18446744073709551615 1 : 809 11 809 12 18446744073709551615 17 DataHandlerUpdate 810 5 810 22 51 1 ( 810 22 810 23 51 1 ) 810 23 810 24 51 1 ; 810 24 810 25 18446744073709551615 3 out 811 5 811 8 198 1 = 811 9 811 10 18446744073709551615 3 Add 811 11 811 14 97 1 ( 811 14 811 15 97 1 ) 811 15 811 16 97 1 ; 811 16 811 17 18446744073709551615 5 break 812 5 812 10 18446744073709551615 1 ; 812 10 812 11 18446744073709551615 4 case 813 3 813 7 18446744073709551615 3 '-' 813 8 813 11 18446744073709551615 1 : 813 11 813 12 18446744073709551615 17 DataHandlerUpdate 814 5 814 22 51 1 ( 814 22 814 23 51 1 ) 814 23 814 24 51 1 ; 814 24 814 25 18446744073709551615 3 out 815 5 815 8 198 1 = 815 9 815 10 18446744073709551615 9 Substract 815 11 815 20 118 1 ( 815 20 815 21 118 1 ) 815 21 815 22 118 1 ; 815 22 815 23 18446744073709551615 5 break 816 5 816 10 18446744073709551615 1 ; 816 10 816 11 18446744073709551615 4 case 817 3 817 7 18446744073709551615 3 '/' 817 8 817 11 18446744073709551615 1 : 817 11 817 12 18446744073709551615 17 DataHandlerUpdate 818 5 818 22 51 1 ( 818 22 818 23 51 1 ) 818 23 818 24 51 1 ; 818 24 818 25 18446744073709551615 3 out 819 5 819 8 198 1 = 819 9 819 10 18446744073709551615 6 Divide 819 11 819 17 104 1 ( 819 17 819 18 104 1 ) 819 18 819 19 104 1 ; 819 19 819 20 18446744073709551615 5 break 820 5 820 10 18446744073709551615 1 ; 820 10 820 11 18446744073709551615 4 case 821 3 821 7 18446744073709551615 3 '*' 821 8 821 11 18446744073709551615 1 : 821 11 821 12 18446744073709551615 17 DataHandlerUpdate 822 5 822 22 51 1 ( 822 22 822 23 51 1 ) 822 23 822 24 51 1 ; 822 24 822 25 18446744073709551615 3 out 823 5 823 8 198 1 = 823 9 823 10 18446744073709551615 8 Multiply 823 11 823 19 125 1 ( 823 19 823 20 125 1 ) 823 20 823 21 125 1 ; 823 21 823 22 18446744073709551615 5 break 824 5 824 10 18446744073709551615 1 ; 824 10 824 11 18446744073709551615 4 case 825 3 825 7 18446744073709551615 3 '%' 825 8 825 11 18446744073709551615 1 : 825 11 825 12 18446744073709551615 17 DataHandlerUpdate 826 5 826 22 51 1 ( 826 22 826 23 51 1 ) 826 23 826 24 51 1 ; 826 24 826 25 18446744073709551615 3 out 827 5 827 8 198 1 = 827 9 827 10 18446744073709551615 6 Modulo 827 11 827 17 111 1 ( 827 17 827 18 111 1 ) 827 18 827 19 111 1 ; 827 19 827 20 18446744073709551615 5 break 828 5 828 10 18446744073709551615 1 ; 828 10 828 11 18446744073709551615 4 case 829 3 829 7 18446744073709551615 3 '#' 829 8 829 11 18446744073709551615 1 : 829 11 829 12 18446744073709551615 6 endprg 830 5 830 11 21 1 = 830 12 830 13 18446744073709551615 4 true 830 14 830 18 18446744073709551615 1 ; 830 18 830 19 18446744073709551615 5 break 831 5 831 10 18446744073709551615 1 ; 831 10 831 11 18446744073709551615 4 case 832 3 832 7 18446744073709551615 3 '!' 832 8 832 11 18446744073709551615 1 : 832 11 832 12 18446744073709551615 17 DataHandlerUpdate 833 5 833 22 51 1 ( 833 22 833 23 51 1 ) 833 23 833 24 51 1 ; 833 24 833 25 18446744073709551615 3 out 834 5 834 8 198 1 = 834 9 834 10 18446744073709551615 11 PopAndPrint 834 11 834 22 48 1 ( 834 22 834 23 48 1 ) 834 23 834 24 48 1 ; 834 24 834 25 18446744073709551615 5 break 835 5 835 10 18446744073709551615 1 ; 835 10 835 11 18446744073709551615 4 case 836 3 836 7 18446744073709551615 3 ';' 836 8 836 11 18446744073709551615 1 : 836 11 836 12 18446744073709551615 17 DataHandlerUpdate 837 5 837 22 51 1 ( 837 22 837 23 51 1 ) 837 23 837 24 51 1 ; 837 24 837 25 18446744073709551615 5 break 838 5 838 10 18446744073709551615 1 ; 838 10 838 11 18446744073709551615 4 case 839 3 839 7 18446744073709551615 3 ':' 839 8 839 11 18446744073709551615 1 : 839 11 839 12 18446744073709551615 17 DataHandlerUpdate 840 5 840 22 51 1 ( 840 22 840 23 51 1 ) 840 23 840 24 51 1 ; 840 24 840 25 18446744073709551615 3 out 841 5 841 8 198 1 = 841 9 841 10 18446744073709551615 9 Duplicate 841 11 841 20 67 1 ( 841 20 841 21 67 1 ) 841 21 841 22 67 1 ; 841 22 841 23 18446744073709551615 5 break 842 5 842 10 18446744073709551615 1 ; 842 10 842 11 18446744073709551615 4 case 843 3 843 7 18446744073709551615 4 '\\' 843 8 843 12 18446744073709551615 1 : 843 12 843 13 18446744073709551615 36 //data_handler = data_handler + com; 844 5 844 41 18446744073709551615 22 interpret_next_command 845 5 845 27 24 1 = 845 28 845 29 18446744073709551615 5 false 845 30 845 35 18446744073709551615 1 ; 845 35 845 36 18446744073709551615 5 break 846 5 846 10 18446744073709551615 1 ; 846 10 846 11 18446744073709551615 4 case 847 3 847 7 18446744073709551615 3 '?' 847 8 847 11 18446744073709551615 1 : 847 11 847 12 18446744073709551615 17 DataHandlerUpdate 848 5 848 22 51 1 ( 848 22 848 23 51 1 ) 848 23 848 24 51 1 ; 848 24 848 25 18446744073709551615 3 out 849 5 849 8 198 1 = 849 9 849 10 18446744073709551615 9 UserInput 849 11 849 20 55 1 ( 849 20 849 21 55 1 ) 849 21 849 22 55 1 ; 849 22 849 23 18446744073709551615 5 break 850 5 850 10 18446744073709551615 1 ; 850 10 850 11 18446744073709551615 4 case 851 3 851 7 18446744073709551615 3 ',' 851 8 851 11 18446744073709551615 1 : 851 11 851 12 18446744073709551615 17 DataHandlerUpdate 852 5 852 22 51 1 ( 852 22 852 23 51 1 ) 852 23 852 24 51 1 ; 852 24 852 25 18446744073709551615 3 out 853 5 853 8 198 1 = 853 9 853 10 18446744073709551615 15 RemoveFromStack 853 11 853 26 59 1 ( 853 26 853 27 59 1 ) 853 27 853 28 59 1 ; 853 28 853 29 18446744073709551615 5 break 854 5 854 10 18446744073709551615 1 ; 854 10 854 11 18446744073709551615 4 case 855 3 855 7 18446744073709551615 3 '.' 855 8 855 11 18446744073709551615 1 : 855 11 855 12 18446744073709551615 17 DataHandlerUpdate 856 5 856 22 51 1 ( 856 22 856 23 51 1 ) 856 23 856 24 51 1 ; 856 24 856 25 18446744073709551615 3 out 857 5 857 8 198 1 = 857 9 857 10 18446744073709551615 11 BooleanTest 857 11 857 22 63 1 ( 857 22 857 23 63 1 ) 857 23 857 24 63 1 ; 857 24 857 25 18446744073709551615 5 break 858 5 858 10 18446744073709551615 1 ; 858 10 858 11 18446744073709551615 4 case 859 3 859 7 18446744073709551615 3 '@' 859 8 859 11 18446744073709551615 1 : 859 11 859 12 18446744073709551615 17 DataHandlerUpdate 860 5 860 22 51 1 ( 860 22 860 23 51 1 ) 860 23 860 24 51 1 ; 860 24 860 25 18446744073709551615 3 out 861 5 861 8 198 1 = 861 9 861 10 18446744073709551615 22 CalculateLenghtofStack 861 11 861 33 60 1 ( 861 33 861 34 60 1 ) 861 34 861 35 60 1 ; 861 35 861 36 18446744073709551615 5 break 862 5 862 10 18446744073709551615 1 ; 862 10 862 11 18446744073709551615 4 case 863 3 863 7 18446744073709551615 3 '$' 863 8 863 11 18446744073709551615 1 : 863 11 863 12 18446744073709551615 17 DataHandlerUpdate 864 5 864 22 51 1 ( 864 22 864 23 51 1 ) 864 23 864 24 51 1 ; 864 24 864 25 18446744073709551615 3 out 865 5 865 8 198 1 = 865 9 865 10 18446744073709551615 14 ConvertToASCII 865 11 865 25 70 1 ( 865 25 865 26 70 1 ) 865 26 865 27 70 1 ; 865 27 865 28 18446744073709551615 5 break 866 5 866 10 18446744073709551615 1 ; 866 10 866 11 18446744073709551615 4 case 867 3 867 7 18446744073709551615 3 '=' 867 8 867 11 18446744073709551615 1 : 867 11 867 12 18446744073709551615 17 DataHandlerUpdate 868 5 868 22 51 1 ( 868 22 868 23 51 1 ) 868 23 868 24 51 1 ; 868 24 868 25 18446744073709551615 3 out 869 5 869 8 198 1 = 869 9 869 10 18446744073709551615 9 IfCommand 869 11 869 20 74 1 ( 869 20 869 21 74 1 ) 869 21 869 22 74 1 ; 869 22 869 23 18446744073709551615 5 break 870 5 870 10 18446744073709551615 1 ; 870 10 870 11 18446744073709551615 4 case 871 3 871 7 18446744073709551615 3 '{' 871 8 871 11 18446744073709551615 1 : 871 11 871 12 18446744073709551615 17 DataHandlerUpdate 872 5 872 22 51 1 ( 872 22 872 23 51 1 ) 872 23 872 24 51 1 ; 872 24 872 25 18446744073709551615 16 is_in_code_block 873 5 873 21 27 1 = 873 22 873 23 18446744073709551615 4 true 873 24 873 28 18446744073709551615 1 ; 873 28 873 29 18446744073709551615 5 break 874 5 874 10 18446744073709551615 1 ; 874 10 874 11 18446744073709551615 4 case 875 3 875 7 18446744073709551615 3 '}' 875 8 875 11 18446744073709551615 1 : 875 11 875 12 18446744073709551615 25 //to be changed TEMPORARY 875 13 875 38 18446744073709551615 17 DataHandlerUpdate 876 5 876 22 51 1 ( 876 22 876 23 51 1 ) 876 23 876 24 51 1 ; 876 24 876 25 18446744073709551615 2 if 877 5 877 7 18446744073709551615 1 ( 877 8 877 9 18446744073709551615 18 code_block_counter 877 9 877 27 11 2 == 877 28 877 30 18446744073709551615 1 0 877 31 877 32 18446744073709551615 1 ) 877 32 877 33 18446744073709551615 1 { 877 34 877 35 18446744073709551615 16 is_in_code_block 878 7 878 23 27 1 = 878 24 878 25 18446744073709551615 5 false 878 26 878 31 18446744073709551615 1 ; 878 31 878 32 18446744073709551615 1 } 879 5 879 6 18446744073709551615 2 if 880 5 880 7 18446744073709551615 1 ( 880 8 880 9 18446744073709551615 18 code_block_counter 880 9 880 27 11 1 < 880 28 880 29 18446744073709551615 1 0 880 30 880 31 18446744073709551615 1 ) 880 31 880 32 18446744073709551615 1 { 880 33 880 34 18446744073709551615 6 return 881 7 881 13 18446744073709551615 2 11 881 14 881 16 18446744073709551615 1 ; 881 16 881 17 18446744073709551615 5 //lol 881 18 881 23 18446744073709551615 1 } 882 5 882 6 18446744073709551615 2 if 883 5 883 7 18446744073709551615 1 ( 883 8 883 9 18446744073709551615 12 interpret_if 883 9 883 21 26 1 . 883 21 883 22 189 4 size 883 22 883 26 189 1 ( 883 26 883 27 189 1 ) 883 27 883 28 189 2 != 883 29 883 31 18446744073709551615 1 0 883 32 883 33 18446744073709551615 1 ) 883 33 883 34 18446744073709551615 1 { 883 35 883 36 18446744073709551615 12 interpret_if 884 7 884 19 26 1 . 884 19 884 20 188 8 pop_back 884 20 884 28 188 1 ( 884 28 884 29 188 1 ) 884 29 884 30 188 1 ; 884 30 884 31 18446744073709551615 1 } 885 5 885 6 18446744073709551615 5 break 887 5 887 10 18446744073709551615 1 ; 887 10 887 11 18446744073709551615 4 case 888 3 888 7 18446744073709551615 4 '\"' 888 8 888 12 18446744073709551615 1 : 888 12 888 13 18446744073709551615 2 if 889 5 889 7 18446744073709551615 1 ( 889 8 889 9 18446744073709551615 13 is_in_comment 889 9 889 22 20 1 ) 889 22 889 23 18446744073709551615 1 { 889 24 889 25 18446744073709551615 13 is_in_comment 890 7 890 20 20 1 = 890 21 890 22 18446744073709551615 5 false 890 23 890 28 18446744073709551615 1 ; 890 28 890 29 18446744073709551615 1 } 891 5 891 6 18446744073709551615 4 else 891 7 891 11 18446744073709551615 1 { 891 12 891 13 18446744073709551615 13 is_in_comment 892 7 892 20 20 1 = 892 21 892 22 18446744073709551615 4 true 892 23 892 27 18446744073709551615 1 ; 892 27 892 28 18446744073709551615 1 } 893 5 893 6 18446744073709551615 5 break 894 5 894 10 18446744073709551615 1 ; 894 10 894 11 18446744073709551615 7 default 895 3 895 10 18446744073709551615 1 : 895 10 895 11 18446744073709551615 12 data_handler 896 5 896 17 25 1 = 896 18 896 19 54 12 data_handler 896 20 896 32 25 1 + 896 33 896 34 149 3 com 896 35 896 38 197 1 ; 896 38 896 39 18446744073709551615 5 break 897 5 897 10 18446744073709551615 1 ; 897 10 897 11 18446744073709551615 1 } 898 3 898 4 18446744073709551615 3 end 899 1 899 4 18446744073709551615 1 : 899 4 899 5 18446744073709551615 20 //temorporay i guess 900 1 900 21 18446744073709551615 6 ifloop 901 1 901 7 18446744073709551615 1 : 901 7 901 8 18446744073709551615 2 if 902 3 902 5 18446744073709551615 1 ( 902 6 902 7 18446744073709551615 12 interpret_if 902 7 902 19 26 1 . 902 19 902 20 189 4 size 902 20 902 24 189 1 ( 902 24 902 25 189 1 ) 902 25 902 26 189 1 < 902 27 902 28 18446744073709551615 18 code_block_counter 902 29 902 47 11 1 ) 902 47 902 48 18446744073709551615 1 { 902 49 902 50 18446744073709551615 36 //fix for double false if statements 903 5 903 41 18446744073709551615 12 interpret_if 904 5 904 17 26 1 . 904 17 904 18 80 9 push_back 904 18 904 27 80 1 ( 904 27 904 28 80 5 false 904 28 904 33 18446744073709551615 1 ) 904 33 904 34 80 1 ; 904 34 904 35 18446744073709551615 2 if 905 5 905 7 18446744073709551615 1 ( 905 8 905 9 18446744073709551615 12 interpret_if 905 9 905 21 26 1 . 905 21 905 22 189 4 size 905 22 905 26 189 1 ( 905 26 905 27 189 1 ) 905 27 905 28 189 1 < 905 29 905 30 18446744073709551615 18 code_block_counter 905 31 905 49 11 1 ) 905 49 905 50 18446744073709551615 1 { 905 51 905 52 18446744073709551615 4 goto 906 7 906 11 18446744073709551615 6 ifloop 906 12 906 18 140 1 ; 906 18 906 19 18446744073709551615 1 } 907 5 907 6 18446744073709551615 1 } 908 3 908 4 18446744073709551615 44 // cout << "Data: " << data_handler << endl; 910 3 910 47 18446744073709551615 6 return 911 3 911 9 18446744073709551615 3 out 911 10 911 13 198 1 ; 911 13 911 14 18446744073709551615 1 } 912 1 912 2 18446744073709551615 3 int 913 1 913 4 18446744073709551615 13 InterpretCode 913 5 913 18 204 1 ( 913 18 913 19 204 6 string 913 19 913 25 9 4 path 913 26 913 30 205 1 ) 913 30 913 31 204 1 { 913 32 913 33 18446744073709551615 22 //out << path << endl; 914 3 914 25 18446744073709551615 7 fstream 915 3 915 10 206 4 file 915 11 915 15 207 1 ; 915 15 915 16 18446744073709551615 4 file 916 3 916 7 18446744073709551615 1 . 916 7 916 8 18446744073709551615 4 open 916 8 916 12 18446744073709551615 1 ( 916 12 916 13 18446744073709551615 4 path 916 13 916 17 18446744073709551615 1 , 916 17 916 18 18446744073709551615 3 ios 916 19 916 22 18446744073709551615 2 :: 916 22 916 24 18446744073709551615 2 in 916 24 916 26 18446744073709551615 1 ) 916 26 916 27 18446744073709551615 1 ; 916 27 916 28 18446744073709551615 2 if 917 3 917 5 18446744073709551615 1 ( 917 6 917 7 18446744073709551615 1 ! 917 7 917 8 18446744073709551615 4 file 917 8 917 12 18446744073709551615 1 ) 917 12 917 13 18446744073709551615 1 { 917 14 917 15 18446744073709551615 4 cout 918 5 918 9 44 2 << 918 10 918 12 45 18 "File not found: " 918 13 918 31 18446744073709551615 2 << 918 32 918 34 45 4 path 918 35 918 39 205 2 << 918 40 918 42 46 4 endl 918 43 918 47 47 1 ; 918 47 918 48 18446744073709551615 6 return 919 5 919 11 18446744073709551615 1 1 919 12 919 13 18446744073709551615 1 ; 919 13 919 14 18446744073709551615 1 } 920 3 920 4 18446744073709551615 4 char 921 3 921 7 18446744073709551615 7 command 921 8 921 15 208 1 ; 921 15 921 16 18446744073709551615 22 //stringstream buffer; 922 3 922 25 18446744073709551615 25 //buffer << file.rdbuf(); 923 3 923 28 18446744073709551615 4 file 924 3 924 7 18446744073709551615 1 . 924 7 924 8 18446744073709551615 6 unsetf 924 8 924 14 18446744073709551615 1 ( 924 14 924 15 18446744073709551615 8 ios_base 924 15 924 23 18446744073709551615 2 :: 924 23 924 25 18446744073709551615 6 skipws 924 25 924 31 18446744073709551615 1 ) 924 31 924 32 18446744073709551615 1 ; 924 32 924 33 18446744073709551615 5 while 925 3 925 8 18446744073709551615 1 ( 925 9 925 10 18446744073709551615 1 ! 925 10 925 11 18446744073709551615 4 file 925 11 925 15 18446744073709551615 1 . 925 15 925 16 18446744073709551615 3 eof 925 16 925 19 18446744073709551615 1 ( 925 19 925 20 18446744073709551615 1 ) 925 20 925 21 18446744073709551615 1 ) 925 21 925 22 18446744073709551615 1 { 925 23 925 24 18446744073709551615 2 if 926 5 926 7 18446744073709551615 1 ( 926 8 926 9 18446744073709551615 6 endprg 926 9 926 15 18446744073709551615 1 ) 926 15 926 16 18446744073709551615 1 { 926 17 926 18 18446744073709551615 4 file 927 7 927 11 18446744073709551615 1 . 927 11 927 12 18446744073709551615 5 close 927 12 927 17 18446744073709551615 1 ( 927 17 927 18 18446744073709551615 1 ) 927 18 927 19 18446744073709551615 1 ; 927 19 927 20 18446744073709551615 6 return 928 7 928 13 18446744073709551615 1 0 928 14 928 15 18446744073709551615 1 ; 928 15 928 16 18446744073709551615 1 } 929 5 929 6 18446744073709551615 4 file 930 5 930 9 18446744073709551615 2 >> 930 10 930 12 18446744073709551615 7 command 930 13 930 20 18446744073709551615 1 ; 930 20 930 21 18446744073709551615 39 //cout << "Debug: " << command << endl; 931 5 931 44 18446744073709551615 3 int 932 5 932 8 18446744073709551615 3 out 932 9 932 12 18446744073709551615 1 = 932 13 932 14 18446744073709551615 16 InterpretCommand 932 15 932 31 18446744073709551615 1 ( 932 31 932 32 18446744073709551615 7 command 932 32 932 39 18446744073709551615 1 ) 932 39 932 40 18446744073709551615 1 ; 932 40 932 41 18446744073709551615 15 PrintErrMessage 933 5 933 20 18446744073709551615 1 ( 933 20 933 21 18446744073709551615 3 out 933 21 933 24 18446744073709551615 1 ) 933 24 933 25 18446744073709551615 1 ; 933 25 933 26 18446744073709551615 127 //inserts separator at the end of execution to avoid doubled last instruction execution due to bad eof functioning - workaround 934 5 934 132 18446744073709551615 7 command 935 5 935 12 18446744073709551615 1 = 935 13 935 14 18446744073709551615 3 ';' 935 15 935 18 18446744073709551615 1 ; 935 18 935 19 18446744073709551615 1 } 936 3 936 4 18446744073709551615 4 file 937 3 937 7 18446744073709551615 1 . 937 7 937 8 18446744073709551615 5 close 937 8 937 13 18446744073709551615 1 ( 937 13 937 14 18446744073709551615 1 ) 937 14 937 15 18446744073709551615 1 ; 937 15 937 16 18446744073709551615 6 return 938 3 938 9 18446744073709551615 1 0 938 10 938 11 18446744073709551615 1 ; 938 11 938 12 18446744073709551615 1 } 939 1 939 2 18446744073709551615 3 int 940 1 940 4 18446744073709551615 4 main 940 5 940 9 209 1 ( 940 9 940 10 209 3 int 940 10 940 13 18446744073709551615 4 argc 940 14 940 18 210 1 , 940 18 940 19 209 4 char 940 20 940 24 18446744073709551615 1 * 940 25 940 26 18446744073709551615 1 * 940 26 940 27 18446744073709551615 4 argv 940 27 940 31 211 1 ) 940 31 940 32 209 1 { 940 33 940 34 18446744073709551615 5 srand 941 3 941 8 212 1 ( 941 8 941 9 212 4 time 941 9 941 13 213 1 ( 941 13 941 14 213 4 NULL 941 14 941 18 213 1 ) 941 18 941 19 213 1 ) 941 19 941 20 212 1 ; 941 20 941 21 18446744073709551615 2 if 942 3 942 5 18446744073709551615 1 ( 942 6 942 7 18446744073709551615 4 argc 942 7 942 11 210 2 == 942 12 942 14 18446744073709551615 1 1 942 15 942 16 18446744073709551615 1 ) 942 16 942 17 18446744073709551615 1 { 942 18 942 19 18446744073709551615 4 cout 943 5 943 9 44 2 << 943 10 943 12 45 15 "Nothing to do" 943 13 943 28 18446744073709551615 2 << 943 29 943 31 46 4 endl 943 32 943 36 47 1 ; 943 36 943 37 18446744073709551615 1 } 944 3 944 4 18446744073709551615 2 if 945 3 945 5 18446744073709551615 1 ( 945 6 945 7 18446744073709551615 4 argc 945 7 945 11 210 2 == 945 12 945 14 18446744073709551615 1 2 945 15 945 16 18446744073709551615 1 ) 945 16 945 17 18446744073709551615 1 { 945 18 945 19 18446744073709551615 26 //cout << argv[1] << endl; 946 5 946 31 18446744073709551615 6 string 947 5 947 11 9 3 var 947 12 947 15 214 1 = 947 16 947 17 18446744073709551615 4 argv 947 18 947 22 211 1 [ 947 22 947 23 18446744073709551615 1 1 947 23 947 24 18446744073709551615 1 ] 947 24 947 25 18446744073709551615 1 ; 947 25 947 26 18446744073709551615 22 //cout << var << endl; 948 5 948 27 18446744073709551615 2 if 949 5 949 7 18446744073709551615 1 ( 949 8 949 9 18446744073709551615 3 var 949 9 949 12 214 2 == 949 13 949 15 215 8 "--help" 949 16 949 24 18446744073709551615 1 ) 949 24 949 25 18446744073709551615 1 { 949 26 949 27 18446744073709551615 4 cout 950 7 950 11 44 2 << 950 12 950 14 45 8 "USAGE:" 950 15 950 23 18446744073709551615 2 << 950 24 950 26 46 4 endl 950 27 950 31 47 2 << 951 12 951 14 45 19 "stec [INPUT FILE]" 951 15 951 34 18446744073709551615 2 << 951 35 951 37 46 4 endl 951 38 951 42 47 1 ; 951 42 951 43 18446744073709551615 4 cout 952 7 952 11 44 2 << 952 12 952 14 45 31 "--help  - Prints help message" 952 15 952 46 18446744073709551615 2 << 952 47 952 49 46 4 endl 952 50 952 54 47 1 ; 952 54 952 55 18446744073709551615 4 cout 953 7 953 11 44 2 << 953 12 953 14 45 33 "--version - Prints version info" 953 15 953 48 18446744073709551615 2 << 953 49 953 51 46 4 endl 953 52 953 56 47 1 ; 953 56 953 57 18446744073709551615 4 cout 954 7 954 11 44 2 << 954 12 954 14 45 35 "Please use one argument at a time" 954 15 954 50 18446744073709551615 2 << 954 51 954 53 46 4 endl 954 54 954 58 47 1 ; 954 58 954 59 18446744073709551615 6 return 955 7 955 13 18446744073709551615 1 0 955 14 955 15 18446744073709551615 1 ; 955 15 955 16 18446744073709551615 1 } 956 5 956 6 18446744073709551615 2 if 957 5 957 7 18446744073709551615 1 ( 957 8 957 9 18446744073709551615 3 var 957 9 957 12 214 2 == 957 13 957 15 215 11 "--version" 957 16 957 27 18446744073709551615 1 ) 957 27 957 28 18446744073709551615 1 { 957 29 957 30 18446744073709551615 4 cout 958 7 958 11 44 2 << 958 12 958 14 45 48 "Stackative Interpreter v1.0 for Stackative-21A" 958 15 958 63 18446744073709551615 2 << 958 64 958 66 46 4 endl 958 67 958 71 47 1 ; 958 71 958 72 18446744073709551615 6 return 959 7 959 13 18446744073709551615 1 0 959 14 959 15 18446744073709551615 1 ; 959 15 959 16 18446744073709551615 1 } 960 5 960 6 18446744073709551615 3 int 961 5 961 8 18446744073709551615 3 out 961 9 961 12 216 1 = 961 13 961 14 18446744073709551615 1 0 961 15 961 16 18446744073709551615 1 ; 961 16 961 17 18446744073709551615 3 out 962 5 962 8 216 1 = 962 9 962 10 18446744073709551615 13 InterpretCode 962 11 962 24 204 1 ( 962 24 962 25 204 3 var 962 25 962 28 214 1 ) 962 28 962 29 204 1 ; 962 29 962 30 18446744073709551615 6 return 963 5 963 11 18446744073709551615 3 out 963 12 963 15 216 1 ; 963 15 963 16 18446744073709551615 1 } 964 3 964 4 18446744073709551615 6 return 965 3 965 9 18446744073709551615 1 0 965 10 965 11 18446744073709551615 1 ; 965 11 965 12 18446744073709551615 1 } 966 1 966 2 18446744073709551615 0 0 217 0 0 0 22 0 0 1 13 0 3 std 8 1 13 0 16 InterpretCommand 10 1 13 0 50 9:27:/home/leopoldkucinski/Dokumenty/stec/main.cpp 5 1 13 0 4 type 7 1 13 0 11 number:type 7 1 13 0 16 char_string:type 2 1 13 0 13 StackVariable 6 1 13 0 18 Type:StackVariable 6 1 13 0 20 number:StackVariable 20 1 13 0 10 string:std 6 1 13 0 25 char_string:StackVariable 9 1 13 0 18 code_block_counter 31 1 13 0 10 vector:std 9 1 13 0 8 ForStack 9 1 13 0 10 ForCounter 9 1 13 0 14 is_in_for_loop 9 1 13 0 10 TruthStack 9 1 13 0 9 TruthBool 9 1 13 0 16 is_in_truth_loop 9 1 13 0 16 is_reinterpreted 9 1 13 0 13 is_in_comment 9 1 13 0 6 endprg 9 1 13 0 11 cur_command 9 1 13 0 5 Stack 9 1 13 0 22 interpret_next_command 9 1 13 0 12 data_handler 9 1 13 0 12 interpret_if 9 1 13 0 16 is_in_code_block 9 1 13 0 11 DataHandler 9 1 13 0 22 is_data_handler_in_use 8 1 13 0 8 parseInt 10 1 13 0 51 54:33:/home/leopoldkucinski/Dokumenty/stec/main.cpp 20 1 13 0 10 size_t:std 9 1 13 0 51 55:15:/home/leopoldkucinski/Dokumenty/stec/main.cpp 9 1 13 0 50 56:7:/home/leopoldkucinski/Dokumenty/stec/main.cpp 8 1 13 0 16 stoi:__cxx11:std 21 1 13 0 29 size:basic_string:__cxx11:std 4 1 13 0 17 runtime_error:std 8 1 13 0 10 PutOnStack 10 1 13 0 51 61:31:/home/leopoldkucinski/Dokumenty/stec/main.cpp 9 1 13 0 50 62:7:/home/leopoldkucinski/Dokumenty/stec/main.cpp 49 1 13 0 8 parseInt 8 1 13 0 15 PrintErrMessage 10 1 13 0 51 76:26:/home/leopoldkucinski/Dokumenty/stec/main.cpp 9 1 13 0 8 cout:std 8 1 13 0 12 operator:std 21 1 13 0 26 operator:basic_ostream:std 8 1 13 0 8 endl:std 8 1 13 0 11 PopAndPrint 9 1 13 0 51 111:7:/home/leopoldkucinski/Dokumenty/stec/main.cpp 9 1 13 0 52 115:17:/home/leopoldkucinski/Dokumenty/stec/main.cpp 8 1 13 0 17 DataHandlerUpdate 8 1 13 0 14 operator!=:std 9 1 13 0 52 138:19:/home/leopoldkucinski/Dokumenty/stec/main.cpp 21 1 13 0 34 operator=:basic_string:__cxx11:std 8 1 13 0 9 UserInput 9 1 13 0 52 146:17:/home/leopoldkucinski/Dokumenty/stec/main.cpp 49 1 13 0 7 getline 9 1 13 0 7 cin:std 8 1 13 0 15 RemoveFromStack 8 1 13 0 22 CalculateLenghtofStack 9 1 13 0 51 160:7:/home/leopoldkucinski/Dokumenty/stec/main.cpp 9 1 13 0 52 161:17:/home/leopoldkucinski/Dokumenty/stec/main.cpp 8 1 13 0 11 BooleanTest 9 1 13 0 51 171:8:/home/leopoldkucinski/Dokumenty/stec/main.cpp 9 1 13 0 51 172:7:/home/leopoldkucinski/Dokumenty/stec/main.cpp 9 1 13 0 52 183:17:/home/leopoldkucinski/Dokumenty/stec/main.cpp 8 1 13 0 9 Duplicate 9 1 13 0 51 197:7:/home/leopoldkucinski/Dokumenty/stec/main.cpp 9 1 13 0 52 198:17:/home/leopoldkucinski/Dokumenty/stec/main.cpp 8 1 13 0 14 ConvertToASCII 9 1 13 0 51 209:7:/home/leopoldkucinski/Dokumenty/stec/main.cpp 9 1 13 0 51 210:8:/home/leopoldkucinski/Dokumenty/stec/main.cpp 9 1 13 0 51 211:7:/home/leopoldkucinski/Dokumenty/stec/main.cpp 8 1 13 0 9 IfCommand 9 1 13 0 51 233:8:/home/leopoldkucinski/Dokumenty/stec/main.cpp 9 1 13 0 51 234:7:/home/leopoldkucinski/Dokumenty/stec/main.cpp 9 1 13 0 51 235:7:/home/leopoldkucinski/Dokumenty/stec/main.cpp 9 1 13 0 52 236:17:/home/leopoldkucinski/Dokumenty/stec/main.cpp 9 1 13 0 52 237:17:/home/leopoldkucinski/Dokumenty/stec/main.cpp 21 1 13 0 20 push_back:vector:std 8 1 13 0 11 SmallerThan 9 1 13 0 51 262:8:/home/leopoldkucinski/Dokumenty/stec/main.cpp 9 1 13 0 51 263:7:/home/leopoldkucinski/Dokumenty/stec/main.cpp 9 1 13 0 51 264:7:/home/leopoldkucinski/Dokumenty/stec/main.cpp 9 1 13 0 52 265:17:/home/leopoldkucinski/Dokumenty/stec/main.cpp 9 1 13 0 52 266:17:/home/leopoldkucinski/Dokumenty/stec/main.cpp 9 1 13 0 52 269:11:/home/leopoldkucinski/Dokumenty/stec/main.cpp 9 1 13 0 52 270:11:/home/leopoldkucinski/Dokumenty/stec/main.cpp 8 1 13 0 11 GreaterThan 9 1 13 0 51 295:8:/home/leopoldkucinski/Dokumenty/stec/main.cpp 9 1 13 0 51 296:7:/home/leopoldkucinski/Dokumenty/stec/main.cpp 9 1 13 0 51 297:7:/home/leopoldkucinski/Dokumenty/stec/main.cpp 9 1 13 0 52 298:17:/home/leopoldkucinski/Dokumenty/stec/main.cpp 9 1 13 0 52 299:17:/home/leopoldkucinski/Dokumenty/stec/main.cpp 9 1 13 0 52 302:11:/home/leopoldkucinski/Dokumenty/stec/main.cpp 9 1 13 0 52 303:11:/home/leopoldkucinski/Dokumenty/stec/main.cpp 8 1 13 0 3 Add 9 1 13 0 51 329:7:/home/leopoldkucinski/Dokumenty/stec/main.cpp 9 1 13 0 51 330:7:/home/leopoldkucinski/Dokumenty/stec/main.cpp 9 1 13 0 52 331:17:/home/leopoldkucinski/Dokumenty/stec/main.cpp 9 1 13 0 52 332:17:/home/leopoldkucinski/Dokumenty/stec/main.cpp 9 1 13 0 51 336:7:/home/leopoldkucinski/Dokumenty/stec/main.cpp 9 1 13 0 52 338:17:/home/leopoldkucinski/Dokumenty/stec/main.cpp 8 1 13 0 6 Divide 9 1 13 0 51 353:7:/home/leopoldkucinski/Dokumenty/stec/main.cpp 9 1 13 0 51 354:7:/home/leopoldkucinski/Dokumenty/stec/main.cpp 9 1 13 0 52 355:17:/home/leopoldkucinski/Dokumenty/stec/main.cpp 9 1 13 0 52 356:17:/home/leopoldkucinski/Dokumenty/stec/main.cpp 9 1 13 0 51 363:7:/home/leopoldkucinski/Dokumenty/stec/main.cpp 9 1 13 0 52 365:17:/home/leopoldkucinski/Dokumenty/stec/main.cpp 8 1 13 0 6 Modulo 9 1 13 0 51 380:7:/home/leopoldkucinski/Dokumenty/stec/main.cpp 9 1 13 0 51 381:7:/home/leopoldkucinski/Dokumenty/stec/main.cpp 9 1 13 0 52 382:17:/home/leopoldkucinski/Dokumenty/stec/main.cpp 9 1 13 0 52 383:17:/home/leopoldkucinski/Dokumenty/stec/main.cpp 9 1 13 0 51 387:7:/home/leopoldkucinski/Dokumenty/stec/main.cpp 9 1 13 0 52 389:17:/home/leopoldkucinski/Dokumenty/stec/main.cpp 8 1 13 0 9 Substract 9 1 13 0 51 404:7:/home/leopoldkucinski/Dokumenty/stec/main.cpp 9 1 13 0 51 405:7:/home/leopoldkucinski/Dokumenty/stec/main.cpp 9 1 13 0 52 406:17:/home/leopoldkucinski/Dokumenty/stec/main.cpp 9 1 13 0 52 407:17:/home/leopoldkucinski/Dokumenty/stec/main.cpp 9 1 13 0 51 411:7:/home/leopoldkucinski/Dokumenty/stec/main.cpp 9 1 13 0 52 413:17:/home/leopoldkucinski/Dokumenty/stec/main.cpp 8 1 13 0 8 Multiply 9 1 13 0 51 428:7:/home/leopoldkucinski/Dokumenty/stec/main.cpp 9 1 13 0 51 429:7:/home/leopoldkucinski/Dokumenty/stec/main.cpp 9 1 13 0 52 430:17:/home/leopoldkucinski/Dokumenty/stec/main.cpp 9 1 13 0 52 431:17:/home/leopoldkucinski/Dokumenty/stec/main.cpp 9 1 13 0 51 435:7:/home/leopoldkucinski/Dokumenty/stec/main.cpp 9 1 13 0 52 437:17:/home/leopoldkucinski/Dokumenty/stec/main.cpp 8 1 13 0 6 Negate 9 1 13 0 51 449:7:/home/leopoldkucinski/Dokumenty/stec/main.cpp 9 1 13 0 52 450:17:/home/leopoldkucinski/Dokumenty/stec/main.cpp 8 1 13 0 7 Convert 9 1 13 0 51 463:7:/home/leopoldkucinski/Dokumenty/stec/main.cpp 9 1 13 0 52 464:17:/home/leopoldkucinski/Dokumenty/stec/main.cpp 9 1 13 0 52 465:10:/home/leopoldkucinski/Dokumenty/stec/main.cpp 9 1 13 0 51 467:7:/home/leopoldkucinski/Dokumenty/stec/main.cpp 201 1 13 0 0  8 1 13 0 4 Join 9 1 13 0 51 498:7:/home/leopoldkucinski/Dokumenty/stec/main.cpp 9 1 13 0 51 499:7:/home/leopoldkucinski/Dokumenty/stec/main.cpp 9 1 13 0 52 500:17:/home/leopoldkucinski/Dokumenty/stec/main.cpp 9 1 13 0 52 501:17:/home/leopoldkucinski/Dokumenty/stec/main.cpp 9 1 13 0 52 502:10:/home/leopoldkucinski/Dokumenty/stec/main.cpp 9 1 13 0 52 503:10:/home/leopoldkucinski/Dokumenty/stec/main.cpp 9 1 13 0 52 514:10:/home/leopoldkucinski/Dokumenty/stec/main.cpp 8 1 13 0 13 operator+:std 9 1 13 0 52 517:17:/home/leopoldkucinski/Dokumenty/stec/main.cpp 8 1 13 0 17 DataHandlerAction 9 1 13 0 51 532:9:/home/leopoldkucinski/Dokumenty/stec/main.cpp 9 1 13 0 52 533:19:/home/leopoldkucinski/Dokumenty/stec/main.cpp 21 1 13 0 23 operator=:StackVariable 8 1 13 0 5 Split 9 1 13 0 51 543:7:/home/leopoldkucinski/Dokumenty/stec/main.cpp 9 1 13 0 52 544:17:/home/leopoldkucinski/Dokumenty/stec/main.cpp 9 1 13 0 51 548:7:/home/leopoldkucinski/Dokumenty/stec/main.cpp 9 1 13 0 51 551:8:/home/leopoldkucinski/Dokumenty/stec/main.cpp 49 1 13 0 6 strcpy 9 1 13 0 52 557:17:/home/leopoldkucinski/Dokumenty/stec/main.cpp 9 1 13 0 52 559:12:/home/leopoldkucinski/Dokumenty/stec/main.cpp 8 1 13 0 12 RandomNumber 9 1 13 0 51 567:7:/home/leopoldkucinski/Dokumenty/stec/main.cpp 8 1 13 0 4 rand 9 1 13 0 52 568:17:/home/leopoldkucinski/Dokumenty/stec/main.cpp 8 1 13 0 7 ForLoop 9 1 13 0 51 579:7:/home/leopoldkucinski/Dokumenty/stec/main.cpp 9 1 13 0 52 580:17:/home/leopoldkucinski/Dokumenty/stec/main.cpp 9 1 13 0 51 585:7:/home/leopoldkucinski/Dokumenty/stec/main.cpp 8 1 13 0 10 EndForLoop 9 1 13 0 51 600:7:/home/leopoldkucinski/Dokumenty/stec/main.cpp 9 1 13 0 51 601:7:/home/leopoldkucinski/Dokumenty/stec/main.cpp 9 1 13 0 52 602:10:/home/leopoldkucinski/Dokumenty/stec/main.cpp 9 1 13 0 51 604:7:/home/leopoldkucinski/Dokumenty/stec/main.cpp 21 1 13 0 31 length:basic_string:__cxx11:std 9 1 13 0 51 606:8:/home/leopoldkucinski/Dokumenty/stec/main.cpp 8 1 13 0 6 strcpy 21 1 13 0 30 c_str:basic_string:__cxx11:std 9 1 13 0 52 611:12:/home/leopoldkucinski/Dokumenty/stec/main.cpp 9 1 13 0 52 612:14:/home/leopoldkucinski/Dokumenty/stec/main.cpp 8 1 13 0 9 TruthLoop 9 1 13 0 51 632:7:/home/leopoldkucinski/Dokumenty/stec/main.cpp 9 1 13 0 52 633:17:/home/leopoldkucinski/Dokumenty/stec/main.cpp 9 1 13 0 51 635:8:/home/leopoldkucinski/Dokumenty/stec/main.cpp 49 1 13 0 9 push_back 8 1 13 0 12 EndTruthLoop 21 1 13 0 19 pop_back:vector:std 21 1 13 0 15 size:vector:std 9 1 13 0 51 661:7:/home/leopoldkucinski/Dokumenty/stec/main.cpp 9 1 13 0 52 662:17:/home/leopoldkucinski/Dokumenty/stec/main.cpp 9 1 13 0 51 664:8:/home/leopoldkucinski/Dokumenty/stec/main.cpp 9 1 13 0 52 683:12:/home/leopoldkucinski/Dokumenty/stec/main.cpp 9 1 13 0 51 685:9:/home/leopoldkucinski/Dokumenty/stec/main.cpp 9 1 13 0 52 687:10:/home/leopoldkucinski/Dokumenty/stec/main.cpp 9 1 13 0 52 692:14:/home/leopoldkucinski/Dokumenty/stec/main.cpp 10 1 13 0 52 701:27:/home/leopoldkucinski/Dokumenty/stec/main.cpp 9 1 13 0 51 702:7:/home/leopoldkucinski/Dokumenty/stec/main.cpp 9 1 13 0 51 710:8:/home/leopoldkucinski/Dokumenty/stec/main.cpp 9 1 13 0 51 712:9:/home/leopoldkucinski/Dokumenty/stec/main.cpp 21 1 13 0 21 operator[]:vector:std 9 1 13 0 51 722:8:/home/leopoldkucinski/Dokumenty/stec/main.cpp 9 1 13 0 51 724:9:/home/leopoldkucinski/Dokumenty/stec/main.cpp 8 1 13 0 13 InterpretCode 10 1 13 0 52 913:26:/home/leopoldkucinski/Dokumenty/stec/main.cpp 20 1 13 0 11 fstream:std 9 1 13 0 52 915:11:/home/leopoldkucinski/Dokumenty/stec/main.cpp 9 1 13 0 51 921:8:/home/leopoldkucinski/Dokumenty/stec/main.cpp 8 1 13 0 4 main 10 1 13 0 52 940:14:/home/leopoldkucinski/Dokumenty/stec/main.cpp 10 1 13 0 52 940:27:/home/leopoldkucinski/Dokumenty/stec/main.cpp 8 1 13 0 5 srand 8 1 13 0 4 time 9 1 13 0 52 947:12:/home/leopoldkucinski/Dokumenty/stec/main.cpp 8 1 13 0 14 operator==:std 9 1 13 0 51 961:9:/home/leopoldkucinski/Dokumenty/stec/main.cpp 0 0 1 0 0 0 45 /home/leopoldkucinski/Dokumenty/stec/main.cpp 1623440587